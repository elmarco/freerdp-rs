/* automatically generated by rust-bindgen 0.59.1 */

pub const CF_RAW: u32 = 0;
pub const CF_TEXT: u32 = 1;
pub const CF_BITMAP: u32 = 2;
pub const CF_METAFILEPICT: u32 = 3;
pub const CF_SYLK: u32 = 4;
pub const CF_DIF: u32 = 5;
pub const CF_TIFF: u32 = 6;
pub const CF_OEMTEXT: u32 = 7;
pub const CF_DIB: u32 = 8;
pub const CF_PALETTE: u32 = 9;
pub const CF_PENDATA: u32 = 10;
pub const CF_RIFF: u32 = 11;
pub const CF_WAVE: u32 = 12;
pub const CF_UNICODETEXT: u32 = 13;
pub const CF_ENHMETAFILE: u32 = 14;
pub const CF_HDROP: u32 = 15;
pub const CF_LOCALE: u32 = 16;
pub const CF_DIBV5: u32 = 17;
pub const CF_MAX: u32 = 18;
pub const CF_OWNERDISPLAY: u32 = 128;
pub const CF_DSPTEXT: u32 = 129;
pub const CF_DSPBITMAP: u32 = 130;
pub const CF_DSPMETAFILEPICT: u32 = 131;
pub const CF_DSPENHMETAFILE: u32 = 142;
pub const CF_PRIVATEFIRST: u32 = 512;
pub const CF_PRIVATELAST: u32 = 767;
pub const CF_GDIOBJFIRST: u32 = 768;
pub const CF_GDIOBJLAST: u32 = 1023;
pub const WAIT_TIMEOUT: u32 = 258;
pub const CONNECTION_TYPE_MODEM: u32 = 1;
pub const CONNECTION_TYPE_BROADBAND_LOW: u32 = 2;
pub const CONNECTION_TYPE_SATELLITE: u32 = 3;
pub const CONNECTION_TYPE_BROADBAND_HIGH: u32 = 4;
pub const CONNECTION_TYPE_WAN: u32 = 5;
pub const CONNECTION_TYPE_LAN: u32 = 6;
pub const CONNECTION_TYPE_AUTODETECT: u32 = 7;
pub const RDPDR_DTYP_SERIAL: u32 = 1;
pub const RDPDR_DTYP_PARALLEL: u32 = 2;
pub const RDPDR_DTYP_PRINT: u32 = 4;
pub const RDPDR_DTYP_FILESYSTEM: u32 = 8;
pub const RDPDR_DTYP_SMARTCARD: u32 = 32;
pub const FreeRDP_instance: u32 = 0;
pub const FreeRDP_ServerMode: u32 = 16;
pub const FreeRDP_ShareId: u32 = 17;
pub const FreeRDP_PduSource: u32 = 18;
pub const FreeRDP_ServerPort: u32 = 19;
pub const FreeRDP_ServerHostname: u32 = 20;
pub const FreeRDP_Username: u32 = 21;
pub const FreeRDP_Password: u32 = 22;
pub const FreeRDP_Domain: u32 = 23;
pub const FreeRDP_PasswordHash: u32 = 24;
pub const FreeRDP_WaitForOutputBufferFlush: u32 = 25;
pub const FreeRDP_MaxTimeInCheckLoop: u32 = 26;
pub const FreeRDP_AcceptedCert: u32 = 27;
pub const FreeRDP_AcceptedCertLength: u32 = 28;
pub const FreeRDP_RdpVersion: u32 = 128;
pub const FreeRDP_DesktopWidth: u32 = 129;
pub const FreeRDP_DesktopHeight: u32 = 130;
pub const FreeRDP_ColorDepth: u32 = 131;
pub const FreeRDP_ConnectionType: u32 = 132;
pub const FreeRDP_ClientBuild: u32 = 133;
pub const FreeRDP_ClientHostname: u32 = 134;
pub const FreeRDP_ClientProductId: u32 = 135;
pub const FreeRDP_EarlyCapabilityFlags: u32 = 136;
pub const FreeRDP_NetworkAutoDetect: u32 = 137;
pub const FreeRDP_SupportAsymetricKeys: u32 = 138;
pub const FreeRDP_SupportErrorInfoPdu: u32 = 139;
pub const FreeRDP_SupportStatusInfoPdu: u32 = 140;
pub const FreeRDP_SupportMonitorLayoutPdu: u32 = 141;
pub const FreeRDP_SupportGraphicsPipeline: u32 = 142;
pub const FreeRDP_SupportDynamicTimeZone: u32 = 143;
pub const FreeRDP_SupportHeartbeatPdu: u32 = 144;
pub const FreeRDP_DesktopPhysicalWidth: u32 = 145;
pub const FreeRDP_DesktopPhysicalHeight: u32 = 146;
pub const FreeRDP_DesktopOrientation: u32 = 147;
pub const FreeRDP_DesktopScaleFactor: u32 = 148;
pub const FreeRDP_DeviceScaleFactor: u32 = 149;
pub const FreeRDP_UseRdpSecurityLayer: u32 = 192;
pub const FreeRDP_EncryptionMethods: u32 = 193;
pub const FreeRDP_ExtEncryptionMethods: u32 = 194;
pub const FreeRDP_EncryptionLevel: u32 = 195;
pub const FreeRDP_ServerRandom: u32 = 196;
pub const FreeRDP_ServerRandomLength: u32 = 197;
pub const FreeRDP_ServerCertificate: u32 = 198;
pub const FreeRDP_ServerCertificateLength: u32 = 199;
pub const FreeRDP_ClientRandom: u32 = 200;
pub const FreeRDP_ClientRandomLength: u32 = 201;
pub const FreeRDP_ChannelCount: u32 = 256;
pub const FreeRDP_ChannelDefArraySize: u32 = 257;
pub const FreeRDP_ChannelDefArray: u32 = 258;
pub const FreeRDP_ClusterInfoFlags: u32 = 320;
pub const FreeRDP_RedirectedSessionId: u32 = 321;
pub const FreeRDP_ConsoleSession: u32 = 322;
pub const FreeRDP_MonitorCount: u32 = 384;
pub const FreeRDP_MonitorDefArraySize: u32 = 385;
pub const FreeRDP_MonitorDefArray: u32 = 386;
pub const FreeRDP_SpanMonitors: u32 = 387;
pub const FreeRDP_UseMultimon: u32 = 388;
pub const FreeRDP_ForceMultimon: u32 = 389;
pub const FreeRDP_DesktopPosX: u32 = 390;
pub const FreeRDP_DesktopPosY: u32 = 391;
pub const FreeRDP_ListMonitors: u32 = 392;
pub const FreeRDP_MonitorIds: u32 = 393;
pub const FreeRDP_NumMonitorIds: u32 = 394;
pub const FreeRDP_MonitorLocalShiftX: u32 = 395;
pub const FreeRDP_MonitorLocalShiftY: u32 = 396;
pub const FreeRDP_HasMonitorAttributes: u32 = 397;
pub const FreeRDP_MultitransportFlags: u32 = 512;
pub const FreeRDP_SupportMultitransport: u32 = 513;
pub const FreeRDP_AlternateShell: u32 = 640;
pub const FreeRDP_ShellWorkingDirectory: u32 = 641;
pub const FreeRDP_AutoLogonEnabled: u32 = 704;
pub const FreeRDP_CompressionEnabled: u32 = 705;
pub const FreeRDP_DisableCtrlAltDel: u32 = 706;
pub const FreeRDP_EnableWindowsKey: u32 = 707;
pub const FreeRDP_MaximizeShell: u32 = 708;
pub const FreeRDP_LogonNotify: u32 = 709;
pub const FreeRDP_LogonErrors: u32 = 710;
pub const FreeRDP_MouseAttached: u32 = 711;
pub const FreeRDP_MouseHasWheel: u32 = 712;
pub const FreeRDP_RemoteConsoleAudio: u32 = 713;
pub const FreeRDP_AudioPlayback: u32 = 714;
pub const FreeRDP_AudioCapture: u32 = 715;
pub const FreeRDP_VideoDisable: u32 = 716;
pub const FreeRDP_PasswordIsSmartcardPin: u32 = 717;
pub const FreeRDP_UsingSavedCredentials: u32 = 718;
pub const FreeRDP_ForceEncryptedCsPdu: u32 = 719;
pub const FreeRDP_HiDefRemoteApp: u32 = 720;
pub const FreeRDP_CompressionLevel: u32 = 721;
pub const FreeRDP_IPv6Enabled: u32 = 768;
pub const FreeRDP_ClientAddress: u32 = 769;
pub const FreeRDP_ClientDir: u32 = 770;
pub const FreeRDP_AutoReconnectionEnabled: u32 = 832;
pub const FreeRDP_AutoReconnectMaxRetries: u32 = 833;
pub const FreeRDP_ClientAutoReconnectCookie: u32 = 834;
pub const FreeRDP_ServerAutoReconnectCookie: u32 = 835;
pub const FreeRDP_PrintReconnectCookie: u32 = 836;
pub const FreeRDP_ClientTimeZone: u32 = 896;
pub const FreeRDP_DynamicDSTTimeZoneKeyName: u32 = 897;
pub const FreeRDP_DynamicDaylightTimeDisabled: u32 = 898;
pub const FreeRDP_PerformanceFlags: u32 = 960;
pub const FreeRDP_AllowFontSmoothing: u32 = 961;
pub const FreeRDP_DisableWallpaper: u32 = 962;
pub const FreeRDP_DisableFullWindowDrag: u32 = 963;
pub const FreeRDP_DisableMenuAnims: u32 = 964;
pub const FreeRDP_DisableThemes: u32 = 965;
pub const FreeRDP_DisableCursorShadow: u32 = 966;
pub const FreeRDP_DisableCursorBlinking: u32 = 967;
pub const FreeRDP_AllowDesktopComposition: u32 = 968;
pub const FreeRDP_RemoteAssistanceMode: u32 = 1024;
pub const FreeRDP_RemoteAssistanceSessionId: u32 = 1025;
pub const FreeRDP_RemoteAssistancePassStub: u32 = 1026;
pub const FreeRDP_RemoteAssistancePassword: u32 = 1027;
pub const FreeRDP_RemoteAssistanceRCTicket: u32 = 1028;
pub const FreeRDP_EncomspVirtualChannel: u32 = 1029;
pub const FreeRDP_RemdeskVirtualChannel: u32 = 1030;
pub const FreeRDP_LyncRdpMode: u32 = 1031;
pub const FreeRDP_RemoteAssistanceRequestControl: u32 = 1032;
pub const FreeRDP_TlsSecurity: u32 = 1088;
pub const FreeRDP_NlaSecurity: u32 = 1089;
pub const FreeRDP_RdpSecurity: u32 = 1090;
pub const FreeRDP_ExtSecurity: u32 = 1091;
pub const FreeRDP_Authentication: u32 = 1092;
pub const FreeRDP_RequestedProtocols: u32 = 1093;
pub const FreeRDP_SelectedProtocol: u32 = 1094;
pub const FreeRDP_NegotiationFlags: u32 = 1095;
pub const FreeRDP_NegotiateSecurityLayer: u32 = 1096;
pub const FreeRDP_RestrictedAdminModeRequired: u32 = 1097;
pub const FreeRDP_AuthenticationServiceClass: u32 = 1098;
pub const FreeRDP_DisableCredentialsDelegation: u32 = 1099;
pub const FreeRDP_AuthenticationLevel: u32 = 1100;
pub const FreeRDP_AllowedTlsCiphers: u32 = 1101;
pub const FreeRDP_VmConnectMode: u32 = 1102;
pub const FreeRDP_NtlmSamFile: u32 = 1103;
pub const FreeRDP_FIPSMode: u32 = 1104;
pub const FreeRDP_TlsSecLevel: u32 = 1105;
pub const FreeRDP_MstscCookieMode: u32 = 1152;
pub const FreeRDP_CookieMaxLength: u32 = 1153;
pub const FreeRDP_PreconnectionId: u32 = 1154;
pub const FreeRDP_PreconnectionBlob: u32 = 1155;
pub const FreeRDP_SendPreconnectionPdu: u32 = 1156;
pub const FreeRDP_RedirectionFlags: u32 = 1216;
pub const FreeRDP_TargetNetAddress: u32 = 1217;
pub const FreeRDP_LoadBalanceInfo: u32 = 1218;
pub const FreeRDP_LoadBalanceInfoLength: u32 = 1219;
pub const FreeRDP_RedirectionUsername: u32 = 1220;
pub const FreeRDP_RedirectionDomain: u32 = 1221;
pub const FreeRDP_RedirectionPassword: u32 = 1222;
pub const FreeRDP_RedirectionPasswordLength: u32 = 1223;
pub const FreeRDP_RedirectionTargetFQDN: u32 = 1224;
pub const FreeRDP_RedirectionTargetNetBiosName: u32 = 1225;
pub const FreeRDP_RedirectionTsvUrl: u32 = 1226;
pub const FreeRDP_RedirectionTsvUrlLength: u32 = 1227;
pub const FreeRDP_TargetNetAddressCount: u32 = 1228;
pub const FreeRDP_TargetNetAddresses: u32 = 1229;
pub const FreeRDP_TargetNetPorts: u32 = 1230;
pub const FreeRDP_RedirectionAcceptedCert: u32 = 1231;
pub const FreeRDP_RedirectionAcceptedCertLength: u32 = 1232;
pub const FreeRDP_RedirectionPreferType: u32 = 1233;
pub const FreeRDP_Password51: u32 = 1280;
pub const FreeRDP_Password51Length: u32 = 1281;
pub const FreeRDP_SmartcardLogon: u32 = 1282;
pub const FreeRDP_PromptForCredentials: u32 = 1283;
pub const FreeRDP_KerberosKdc: u32 = 1344;
pub const FreeRDP_KerberosRealm: u32 = 1345;
pub const FreeRDP_IgnoreCertificate: u32 = 1408;
pub const FreeRDP_CertificateName: u32 = 1409;
pub const FreeRDP_CertificateFile: u32 = 1410;
pub const FreeRDP_PrivateKeyFile: u32 = 1411;
pub const FreeRDP_RdpKeyFile: u32 = 1412;
pub const FreeRDP_RdpServerRsaKey: u32 = 1413;
pub const FreeRDP_RdpServerCertificate: u32 = 1414;
pub const FreeRDP_ExternalCertificateManagement: u32 = 1415;
pub const FreeRDP_CertificateContent: u32 = 1416;
pub const FreeRDP_PrivateKeyContent: u32 = 1417;
pub const FreeRDP_RdpKeyContent: u32 = 1418;
pub const FreeRDP_AutoAcceptCertificate: u32 = 1419;
pub const FreeRDP_AutoDenyCertificate: u32 = 1420;
pub const FreeRDP_CertificateAcceptedFingerprints: u32 = 1421;
pub const FreeRDP_Workarea: u32 = 1536;
pub const FreeRDP_Fullscreen: u32 = 1537;
pub const FreeRDP_PercentScreen: u32 = 1538;
pub const FreeRDP_GrabKeyboard: u32 = 1539;
pub const FreeRDP_Decorations: u32 = 1540;
pub const FreeRDP_MouseMotion: u32 = 1541;
pub const FreeRDP_WindowTitle: u32 = 1542;
pub const FreeRDP_ParentWindowId: u32 = 1543;
pub const FreeRDP_AsyncInput: u32 = 1544;
pub const FreeRDP_AsyncUpdate: u32 = 1545;
pub const FreeRDP_AsyncChannels: u32 = 1546;
pub const FreeRDP_ToggleFullscreen: u32 = 1548;
pub const FreeRDP_WmClass: u32 = 1549;
pub const FreeRDP_EmbeddedWindow: u32 = 1550;
pub const FreeRDP_SmartSizing: u32 = 1551;
pub const FreeRDP_XPan: u32 = 1552;
pub const FreeRDP_YPan: u32 = 1553;
pub const FreeRDP_SmartSizingWidth: u32 = 1554;
pub const FreeRDP_SmartSizingHeight: u32 = 1555;
pub const FreeRDP_PercentScreenUseWidth: u32 = 1556;
pub const FreeRDP_PercentScreenUseHeight: u32 = 1557;
pub const FreeRDP_DynamicResolutionUpdate: u32 = 1558;
pub const FreeRDP_SoftwareGdi: u32 = 1601;
pub const FreeRDP_LocalConnection: u32 = 1602;
pub const FreeRDP_AuthenticationOnly: u32 = 1603;
pub const FreeRDP_CredentialsFromStdin: u32 = 1604;
pub const FreeRDP_UnmapButtons: u32 = 1605;
pub const FreeRDP_OldLicenseBehaviour: u32 = 1606;
pub const FreeRDP_ComputerName: u32 = 1664;
pub const FreeRDP_ConnectionFile: u32 = 1728;
pub const FreeRDP_AssistanceFile: u32 = 1729;
pub const FreeRDP_HomePath: u32 = 1792;
pub const FreeRDP_ConfigPath: u32 = 1793;
pub const FreeRDP_CurrentPath: u32 = 1794;
pub const FreeRDP_DumpRemoteFx: u32 = 1856;
pub const FreeRDP_PlayRemoteFx: u32 = 1857;
pub const FreeRDP_DumpRemoteFxFile: u32 = 1858;
pub const FreeRDP_PlayRemoteFxFile: u32 = 1859;
pub const FreeRDP_GatewayUsageMethod: u32 = 1984;
pub const FreeRDP_GatewayPort: u32 = 1985;
pub const FreeRDP_GatewayHostname: u32 = 1986;
pub const FreeRDP_GatewayUsername: u32 = 1987;
pub const FreeRDP_GatewayPassword: u32 = 1988;
pub const FreeRDP_GatewayDomain: u32 = 1989;
pub const FreeRDP_GatewayCredentialsSource: u32 = 1990;
pub const FreeRDP_GatewayUseSameCredentials: u32 = 1991;
pub const FreeRDP_GatewayEnabled: u32 = 1992;
pub const FreeRDP_GatewayBypassLocal: u32 = 1993;
pub const FreeRDP_GatewayRpcTransport: u32 = 1994;
pub const FreeRDP_GatewayHttpTransport: u32 = 1995;
pub const FreeRDP_GatewayUdpTransport: u32 = 1996;
pub const FreeRDP_GatewayAccessToken: u32 = 1997;
pub const FreeRDP_GatewayAcceptedCert: u32 = 1998;
pub const FreeRDP_GatewayAcceptedCertLength: u32 = 1999;
pub const FreeRDP_GatewayHttpUseWebsockets: u32 = 2000;
pub const FreeRDP_ProxyType: u32 = 2015;
pub const FreeRDP_ProxyHostname: u32 = 2016;
pub const FreeRDP_ProxyPort: u32 = 2017;
pub const FreeRDP_ProxyUsername: u32 = 2018;
pub const FreeRDP_ProxyPassword: u32 = 2019;
pub const FreeRDP_RemoteApplicationMode: u32 = 2112;
pub const FreeRDP_RemoteApplicationName: u32 = 2113;
pub const FreeRDP_RemoteApplicationIcon: u32 = 2114;
pub const FreeRDP_RemoteApplicationProgram: u32 = 2115;
pub const FreeRDP_RemoteApplicationFile: u32 = 2116;
pub const FreeRDP_RemoteApplicationGuid: u32 = 2117;
pub const FreeRDP_RemoteApplicationCmdLine: u32 = 2118;
pub const FreeRDP_RemoteApplicationExpandCmdLine: u32 = 2119;
pub const FreeRDP_RemoteApplicationExpandWorkingDir: u32 = 2120;
pub const FreeRDP_DisableRemoteAppCapsCheck: u32 = 2121;
pub const FreeRDP_RemoteAppNumIconCaches: u32 = 2122;
pub const FreeRDP_RemoteAppNumIconCacheEntries: u32 = 2123;
pub const FreeRDP_RemoteAppLanguageBarSupported: u32 = 2124;
pub const FreeRDP_RemoteWndSupportLevel: u32 = 2125;
pub const FreeRDP_RemoteApplicationSupportLevel: u32 = 2126;
pub const FreeRDP_RemoteApplicationSupportMask: u32 = 2127;
pub const FreeRDP_RemoteApplicationWorkingDir: u32 = 2128;
pub const FreeRDP_ReceivedCapabilities: u32 = 2240;
pub const FreeRDP_ReceivedCapabilitiesSize: u32 = 2241;
pub const FreeRDP_OsMajorType: u32 = 2304;
pub const FreeRDP_OsMinorType: u32 = 2305;
pub const FreeRDP_RefreshRect: u32 = 2306;
pub const FreeRDP_SuppressOutput: u32 = 2307;
pub const FreeRDP_FastPathOutput: u32 = 2308;
pub const FreeRDP_SaltedChecksum: u32 = 2309;
pub const FreeRDP_LongCredentialsSupported: u32 = 2310;
pub const FreeRDP_NoBitmapCompressionHeader: u32 = 2311;
pub const FreeRDP_BitmapCompressionDisabled: u32 = 2312;
pub const FreeRDP_DesktopResize: u32 = 2368;
pub const FreeRDP_DrawAllowDynamicColorFidelity: u32 = 2369;
pub const FreeRDP_DrawAllowColorSubsampling: u32 = 2370;
pub const FreeRDP_DrawAllowSkipAlpha: u32 = 2371;
pub const FreeRDP_OrderSupport: u32 = 2432;
pub const FreeRDP_BitmapCacheV3Enabled: u32 = 2433;
pub const FreeRDP_AltSecFrameMarkerSupport: u32 = 2434;
pub const FreeRDP_AllowUnanouncedOrdersFromServer: u32 = 2435;
pub const FreeRDP_BitmapCacheEnabled: u32 = 2497;
pub const FreeRDP_BitmapCacheVersion: u32 = 2498;
pub const FreeRDP_AllowCacheWaitingList: u32 = 2499;
pub const FreeRDP_BitmapCachePersistEnabled: u32 = 2500;
pub const FreeRDP_BitmapCacheV2NumCells: u32 = 2501;
pub const FreeRDP_BitmapCacheV2CellInfo: u32 = 2502;
pub const FreeRDP_ColorPointerFlag: u32 = 2560;
pub const FreeRDP_PointerCacheSize: u32 = 2561;
pub const FreeRDP_KeyboardRemappingList: u32 = 2622;
pub const FreeRDP_KeyboardCodePage: u32 = 2623;
pub const FreeRDP_KeyboardLayout: u32 = 2624;
pub const FreeRDP_KeyboardType: u32 = 2625;
pub const FreeRDP_KeyboardSubType: u32 = 2626;
pub const FreeRDP_KeyboardFunctionKey: u32 = 2627;
pub const FreeRDP_ImeFileName: u32 = 2628;
pub const FreeRDP_UnicodeInput: u32 = 2629;
pub const FreeRDP_FastPathInput: u32 = 2630;
pub const FreeRDP_MultiTouchInput: u32 = 2631;
pub const FreeRDP_MultiTouchGestures: u32 = 2632;
pub const FreeRDP_KeyboardHook: u32 = 2633;
pub const FreeRDP_HasHorizontalWheel: u32 = 2634;
pub const FreeRDP_HasExtendedMouseEvent: u32 = 2635;
pub const FreeRDP_BrushSupportLevel: u32 = 2688;
pub const FreeRDP_GlyphSupportLevel: u32 = 2752;
pub const FreeRDP_GlyphCache: u32 = 2753;
pub const FreeRDP_FragCache: u32 = 2754;
pub const FreeRDP_OffscreenSupportLevel: u32 = 2816;
pub const FreeRDP_OffscreenCacheSize: u32 = 2817;
pub const FreeRDP_OffscreenCacheEntries: u32 = 2818;
pub const FreeRDP_VirtualChannelCompressionFlags: u32 = 2880;
pub const FreeRDP_VirtualChannelChunkSize: u32 = 2881;
pub const FreeRDP_SoundBeepsEnabled: u32 = 2944;
pub const FreeRDP_MultifragMaxRequestSize: u32 = 3328;
pub const FreeRDP_LargePointerFlag: u32 = 3392;
pub const FreeRDP_CompDeskSupportLevel: u32 = 3456;
pub const FreeRDP_SurfaceCommandsEnabled: u32 = 3520;
pub const FreeRDP_FrameMarkerCommandEnabled: u32 = 3521;
pub const FreeRDP_SurfaceFrameMarkerEnabled: u32 = 3522;
pub const FreeRDP_RemoteFxOnly: u32 = 3648;
pub const FreeRDP_RemoteFxCodec: u32 = 3649;
pub const FreeRDP_RemoteFxCodecId: u32 = 3650;
pub const FreeRDP_RemoteFxCodecMode: u32 = 3651;
pub const FreeRDP_RemoteFxImageCodec: u32 = 3652;
pub const FreeRDP_RemoteFxCaptureFlags: u32 = 3653;
pub const FreeRDP_NSCodec: u32 = 3712;
pub const FreeRDP_NSCodecId: u32 = 3713;
pub const FreeRDP_FrameAcknowledge: u32 = 3714;
pub const FreeRDP_NSCodecColorLossLevel: u32 = 3715;
pub const FreeRDP_NSCodecAllowSubsampling: u32 = 3716;
pub const FreeRDP_NSCodecAllowDynamicColorFidelity: u32 = 3717;
pub const FreeRDP_JpegCodec: u32 = 3776;
pub const FreeRDP_JpegCodecId: u32 = 3777;
pub const FreeRDP_JpegQuality: u32 = 3778;
pub const FreeRDP_GfxThinClient: u32 = 3840;
pub const FreeRDP_GfxSmallCache: u32 = 3841;
pub const FreeRDP_GfxProgressive: u32 = 3842;
pub const FreeRDP_GfxProgressiveV2: u32 = 3843;
pub const FreeRDP_GfxH264: u32 = 3844;
pub const FreeRDP_GfxAVC444: u32 = 3845;
pub const FreeRDP_GfxSendQoeAck: u32 = 3846;
pub const FreeRDP_GfxAVC444v2: u32 = 3847;
pub const FreeRDP_GfxCapsFilter: u32 = 3848;
pub const FreeRDP_BitmapCacheV3CodecId: u32 = 3904;
pub const FreeRDP_DrawNineGridEnabled: u32 = 3968;
pub const FreeRDP_DrawNineGridCacheSize: u32 = 3969;
pub const FreeRDP_DrawNineGridCacheEntries: u32 = 3970;
pub const FreeRDP_DrawGdiPlusEnabled: u32 = 4032;
pub const FreeRDP_DrawGdiPlusCacheEnabled: u32 = 4033;
pub const FreeRDP_DeviceRedirection: u32 = 4160;
pub const FreeRDP_DeviceCount: u32 = 4161;
pub const FreeRDP_DeviceArraySize: u32 = 4162;
pub const FreeRDP_DeviceArray: u32 = 4163;
pub const FreeRDP_RedirectDrives: u32 = 4288;
pub const FreeRDP_RedirectHomeDrive: u32 = 4289;
pub const FreeRDP_DrivesToRedirect: u32 = 4290;
pub const FreeRDP_RedirectSmartCards: u32 = 4416;
pub const FreeRDP_RedirectPrinters: u32 = 4544;
pub const FreeRDP_RedirectSerialPorts: u32 = 4672;
pub const FreeRDP_RedirectParallelPorts: u32 = 4673;
pub const FreeRDP_PreferIPv6OverIPv4: u32 = 4674;
pub const FreeRDP_RedirectClipboard: u32 = 4800;
pub const FreeRDP_StaticChannelCount: u32 = 4928;
pub const FreeRDP_StaticChannelArraySize: u32 = 4929;
pub const FreeRDP_StaticChannelArray: u32 = 4930;
pub const FreeRDP_DynamicChannelCount: u32 = 5056;
pub const FreeRDP_DynamicChannelArraySize: u32 = 5057;
pub const FreeRDP_DynamicChannelArray: u32 = 5058;
pub const FreeRDP_SupportDynamicChannels: u32 = 5059;
pub const FreeRDP_SupportEchoChannel: u32 = 5184;
pub const FreeRDP_SupportDisplayControl: u32 = 5185;
pub const FreeRDP_SupportGeometryTracking: u32 = 5186;
pub const FreeRDP_SupportSSHAgentChannel: u32 = 5187;
pub const FreeRDP_SupportVideoOptimized: u32 = 5188;
pub const FreeRDP_RDP2TCPArgs: u32 = 5189;
pub const FreeRDP_TcpKeepAlive: u32 = 5190;
pub const FreeRDP_TcpKeepAliveRetries: u32 = 5191;
pub const FreeRDP_TcpKeepAliveDelay: u32 = 5192;
pub const FreeRDP_TcpKeepAliveInterval: u32 = 5193;
pub const FreeRDP_TcpAckTimeout: u32 = 5194;
pub const FreeRDP_Settings_StableAPI_MAX: u32 = 5312;
pub const FREERDP_SETTINGS_SERVER_MODE: u32 = 1;
pub const FREERDP_UPDATE_MESSAGE_QUEUE: u32 = 1;
pub const FREERDP_INPUT_MESSAGE_QUEUE: u32 = 2;
pub const FREERDP_CHANNEL_MESSAGE_QUEUE: u32 = 3;
pub const WAIT_OBJECT_0: u32 = 0;
pub const WAIT_ABANDONED: u32 = 128;
pub const WAIT_IO_COMPLETION: u32 = 192;
pub const CAT_NONE: &'static [u8; 8usize] = b"success\0";
pub const CAT_USE: &'static [u8; 4usize] = b"use\0";
pub const CAT_BROKER: &'static [u8; 7usize] = b"broker\0";
pub const CAT_GATEWAY: &'static [u8; 8usize] = b"gateway\0";
pub const CAT_LICENSING: &'static [u8; 10usize] = b"licensing\0";
pub const CAT_SERVER: &'static [u8; 7usize] = b"server\0";
pub const CAT_CONFIG: &'static [u8; 7usize] = b"config\0";
pub const CAT_PROTOCOL: &'static [u8; 9usize] = b"protocol\0";
pub const CAT_ADMIN: &'static [u8; 15usize] = b"administrative\0";
pub const ERRINFO_RPC_INITIATED_DISCONNECT: u32 = 1;
pub const ERRINFO_RPC_INITIATED_LOGOFF: u32 = 2;
pub const ERRINFO_IDLE_TIMEOUT: u32 = 3;
pub const ERRINFO_LOGON_TIMEOUT: u32 = 4;
pub const ERRINFO_DISCONNECTED_BY_OTHER_CONNECTION: u32 = 5;
pub const ERRINFO_OUT_OF_MEMORY: u32 = 6;
pub const ERRINFO_SERVER_DENIED_CONNECTION: u32 = 7;
pub const ERRINFO_SERVER_INSUFFICIENT_PRIVILEGES: u32 = 9;
pub const ERRINFO_SERVER_FRESH_CREDENTIALS_REQUIRED: u32 = 10;
pub const ERRINFO_RPC_INITIATED_DISCONNECT_BY_USER: u32 = 11;
pub const ERRINFO_LOGOFF_BY_USER: u32 = 12;
pub const ERRINFO_CLOSE_STACK_ON_DRIVER_NOT_READY: u32 = 15;
pub const ERRINFO_SERVER_DWM_CRASH: u32 = 16;
pub const ERRINFO_CLOSE_STACK_ON_DRIVER_FAILURE: u32 = 17;
pub const ERRINFO_CLOSE_STACK_ON_DRIVER_IFACE_FAILURE: u32 = 18;
pub const ERRINFO_SERVER_WINLOGON_CRASH: u32 = 23;
pub const ERRINFO_SERVER_CSRSS_CRASH: u32 = 24;
pub const ERRINFO_LICENSE_INTERNAL: u32 = 256;
pub const ERRINFO_LICENSE_NO_LICENSE_SERVER: u32 = 257;
pub const ERRINFO_LICENSE_NO_LICENSE: u32 = 258;
pub const ERRINFO_LICENSE_BAD_CLIENT_MSG: u32 = 259;
pub const ERRINFO_LICENSE_HWID_DOESNT_MATCH_LICENSE: u32 = 260;
pub const ERRINFO_LICENSE_BAD_CLIENT_LICENSE: u32 = 261;
pub const ERRINFO_LICENSE_CANT_FINISH_PROTOCOL: u32 = 262;
pub const ERRINFO_LICENSE_CLIENT_ENDED_PROTOCOL: u32 = 263;
pub const ERRINFO_LICENSE_BAD_CLIENT_ENCRYPTION: u32 = 264;
pub const ERRINFO_LICENSE_CANT_UPGRADE_LICENSE: u32 = 265;
pub const ERRINFO_LICENSE_NO_REMOTE_CONNECTIONS: u32 = 266;
pub const ERRINFO_CB_DESTINATION_NOT_FOUND: u32 = 1024;
pub const ERRINFO_CB_LOADING_DESTINATION: u32 = 1026;
pub const ERRINFO_CB_REDIRECTING_TO_DESTINATION: u32 = 1028;
pub const ERRINFO_CB_SESSION_ONLINE_VM_WAKE: u32 = 1029;
pub const ERRINFO_CB_SESSION_ONLINE_VM_BOOT: u32 = 1030;
pub const ERRINFO_CB_SESSION_ONLINE_VM_NO_DNS: u32 = 1031;
pub const ERRINFO_CB_DESTINATION_POOL_NOT_FREE: u32 = 1032;
pub const ERRINFO_CB_CONNECTION_CANCELLED: u32 = 1033;
pub const ERRINFO_CB_CONNECTION_ERROR_INVALID_SETTINGS: u32 = 1040;
pub const ERRINFO_CB_SESSION_ONLINE_VM_BOOT_TIMEOUT: u32 = 1041;
pub const ERRINFO_CB_SESSION_ONLINE_VM_SESSMON_FAILED: u32 = 1042;
pub const ERRINFO_UNKNOWN_DATA_PDU_TYPE: u32 = 4297;
pub const ERRINFO_UNKNOWN_PDU_TYPE: u32 = 4298;
pub const ERRINFO_DATA_PDU_SEQUENCE: u32 = 4299;
pub const ERRINFO_CONTROL_PDU_SEQUENCE: u32 = 4301;
pub const ERRINFO_INVALID_CONTROL_PDU_ACTION: u32 = 4302;
pub const ERRINFO_INVALID_INPUT_PDU_TYPE: u32 = 4303;
pub const ERRINFO_INVALID_INPUT_PDU_MOUSE: u32 = 4304;
pub const ERRINFO_INVALID_REFRESH_RECT_PDU: u32 = 4305;
pub const ERRINFO_CREATE_USER_DATA_FAILED: u32 = 4306;
pub const ERRINFO_CONNECT_FAILED: u32 = 4307;
pub const ERRINFO_CONFIRM_ACTIVE_HAS_WRONG_SHAREID: u32 = 4308;
pub const ERRINFO_CONFIRM_ACTIVE_HAS_WRONG_ORIGINATOR: u32 = 4309;
pub const ERRINFO_PERSISTENT_KEY_PDU_BAD_LENGTH: u32 = 4314;
pub const ERRINFO_PERSISTENT_KEY_PDU_ILLEGAL_FIRST: u32 = 4315;
pub const ERRINFO_PERSISTENT_KEY_PDU_TOO_MANY_TOTAL_KEYS: u32 = 4316;
pub const ERRINFO_PERSISTENT_KEY_PDU_TOO_MANY_CACHE_KEYS: u32 = 4317;
pub const ERRINFO_INPUT_PDU_BAD_LENGTH: u32 = 4318;
pub const ERRINFO_BITMAP_CACHE_ERROR_PDU_BAD_LENGTH: u32 = 4319;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT: u32 = 4320;
pub const ERRINFO_VCHANNEL_DATA_TOO_SHORT: u32 = 4321;
pub const ERRINFO_SHARE_DATA_TOO_SHORT: u32 = 4322;
pub const ERRINFO_BAD_SUPPRESS_OUTPUT_PDU: u32 = 4323;
pub const ERRINFO_CONFIRM_ACTIVE_PDU_TOO_SHORT: u32 = 4325;
pub const ERRINFO_CAPABILITY_SET_TOO_SMALL: u32 = 4327;
pub const ERRINFO_CAPABILITY_SET_TOO_LARGE: u32 = 4328;
pub const ERRINFO_NO_CURSOR_CACHE: u32 = 4329;
pub const ERRINFO_BAD_CAPABILITIES: u32 = 4330;
pub const ERRINFO_VIRTUAL_CHANNEL_DECOMPRESSION: u32 = 4332;
pub const ERRINFO_INVALID_VC_COMPRESSION_TYPE: u32 = 4333;
pub const ERRINFO_INVALID_CHANNEL_ID: u32 = 4335;
pub const ERRINFO_VCHANNELS_TOO_MANY: u32 = 4336;
pub const ERRINFO_REMOTEAPP_NOT_ENABLED: u32 = 4339;
pub const ERRINFO_CACHE_CAP_NOT_SET: u32 = 4340;
pub const ERRINFO_BITMAP_CACHE_ERROR_PDU_BAD_LENGTH2: u32 = 4341;
pub const ERRINFO_OFFSCREEN_CACHE_ERROR_PDU_BAD_LENGTH: u32 = 4342;
pub const ERRINFO_DRAWNINEGRID_CACHE_ERROR_PDU_BAD_LENGTH: u32 = 4343;
pub const ERRINFO_GDIPLUS_PDU_BAD_LENGTH: u32 = 4344;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT2: u32 = 4369;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT3: u32 = 4370;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT4: u32 = 4371;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT5: u32 = 4372;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT6: u32 = 4373;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT7: u32 = 4374;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT8: u32 = 4375;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT9: u32 = 4376;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT10: u32 = 4377;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT11: u32 = 4378;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT12: u32 = 4379;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT13: u32 = 4380;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT14: u32 = 4381;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT15: u32 = 4382;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT16: u32 = 4383;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT17: u32 = 4384;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT18: u32 = 4385;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT19: u32 = 4386;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT20: u32 = 4387;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT21: u32 = 4388;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT22: u32 = 4389;
pub const ERRINFO_SECURITY_DATA_TOO_SHORT23: u32 = 4390;
pub const ERRINFO_BAD_MONITOR_DATA: u32 = 4393;
pub const ERRINFO_VC_DECOMPRESSED_REASSEMBLE_FAILED: u32 = 4394;
pub const ERRINFO_VC_DATA_TOO_LONG: u32 = 4395;
pub const ERRINFO_BAD_FRAME_ACK_DATA: u32 = 4396;
pub const ERRINFO_GRAPHICS_MODE_NOT_SUPPORTED: u32 = 4397;
pub const ERRINFO_GRAPHICS_SUBSYSTEM_RESET_FAILED: u32 = 4398;
pub const ERRINFO_GRAPHICS_SUBSYSTEM_FAILED: u32 = 4399;
pub const ERRINFO_TIMEZONE_KEY_NAME_LENGTH_TOO_SHORT: u32 = 4400;
pub const ERRINFO_TIMEZONE_KEY_NAME_LENGTH_TOO_LONG: u32 = 4401;
pub const ERRINFO_DYNAMIC_DST_DISABLED_FIELD_MISSING: u32 = 4402;
pub const ERRINFO_VC_DECODING_ERROR: u32 = 4403;
pub const ERRINFO_VIRTUALDESKTOPTOOLARGE: u32 = 4404;
pub const ERRINFO_MONITORGEOMETRYVALIDATIONFAILED: u32 = 4405;
pub const ERRINFO_INVALIDMONITORCOUNT: u32 = 4406;
pub const ERRINFO_UPDATE_SESSION_KEY_FAILED: u32 = 4497;
pub const ERRINFO_DECRYPT_FAILED: u32 = 4498;
pub const ERRINFO_ENCRYPT_FAILED: u32 = 4499;
pub const ERRINFO_ENCRYPTION_PACKAGE_MISMATCH: u32 = 4500;
pub const ERRINFO_DECRYPT_FAILED2: u32 = 4501;
pub const ERRINFO_PEER_DISCONNECTED: u32 = 4502;
pub const ERRINFO_SUCCESS: u32 = 0;
pub const ERRINFO_NONE: u32 = 4294967295;
pub const FREERDP_ERROR_BASE: u32 = 0;
pub const FREERDP_ERROR_ERRBASE_CLASS: u32 = 0;
pub const FREERDP_ERROR_SUCCESS: u32 = 0;
pub const FREERDP_ERROR_NONE: u32 = 4294967295;
pub const FREERDP_ERROR_ERRINFO_CLASS: u32 = 1;
pub const FREERDP_ERROR_CONNECT_CLASS: u32 = 2;
pub const FREERDP_WINDOW_STATE_NORMAL: u32 = 0;
pub const FREERDP_WINDOW_STATE_MINIMIZED: u32 = 1;
pub const FREERDP_WINDOW_STATE_MAXIMIZED: u32 = 2;
pub const FREERDP_WINDOW_STATE_FULLSCREEN: u32 = 3;
pub const FREERDP_WINDOW_STATE_ACTIVE: u32 = 4;
pub const FREERDP_PIXEL_FORMAT_TYPE_A: u32 = 0;
pub const FREERDP_PIXEL_FORMAT_TYPE_ARGB: u32 = 1;
pub const FREERDP_PIXEL_FORMAT_TYPE_ABGR: u32 = 2;
pub const FREERDP_PIXEL_FORMAT_TYPE_RGBA: u32 = 3;
pub const FREERDP_PIXEL_FORMAT_TYPE_BGRA: u32 = 4;
pub const FREERDP_FLIP_NONE: u32 = 0;
pub const FREERDP_FLIP_VERTICAL: u32 = 1;
pub const FREERDP_FLIP_HORIZONTAL: u32 = 2;
pub const OSMAJORTYPE_UNSPECIFIED: u32 = 0;
pub const OSMAJORTYPE_WINDOWS: u32 = 1;
pub const OSMAJORTYPE_OS2: u32 = 2;
pub const OSMAJORTYPE_MACINTOSH: u32 = 3;
pub const OSMAJORTYPE_UNIX: u32 = 4;
pub const OSMINORTYPE_UNSPECIFIED: u32 = 0;
pub const OSMINORTYPE_WINDOWS_31X: u32 = 1;
pub const OSMINORTYPE_WINDOWS_95: u32 = 2;
pub const OSMINORTYPE_WINDOWS_NT: u32 = 3;
pub const OSMINORTYPE_OS2_V21: u32 = 4;
pub const OSMINORTYPE_POWER_PC: u32 = 5;
pub const OSMINORTYPE_MACINTOSH: u32 = 6;
pub const OSMINORTYPE_NATIVE_XSERVER: u32 = 7;
pub const OSMINORTYPE_PSEUDO_XSERVER: u32 = 8;
pub const OSMINORTYPE_NATIVE_WAYLAND: u32 = 9;
pub const FREERDP_ADDIN_CLIENT: u32 = 1;
pub const FREERDP_ADDIN_SERVER: u32 = 2;
pub const FREERDP_ADDIN_STATIC: u32 = 16;
pub const FREERDP_ADDIN_DYNAMIC: u32 = 32;
pub const FREERDP_ADDIN_NAME: u32 = 256;
pub const FREERDP_ADDIN_SUBSYSTEM: u32 = 512;
pub const FREERDP_ADDIN_TYPE: u32 = 1024;
pub const FREERDP_ADDIN_CHANNEL_STATIC: u32 = 4096;
pub const FREERDP_ADDIN_CHANNEL_DYNAMIC: u32 = 8192;
pub const FREERDP_ADDIN_CHANNEL_DEVICE: u32 = 16384;
pub const FREERDP_ADDIN_CHANNEL_ENTRYEX: u32 = 32768;
pub const RDPGFX_DVC_CHANNEL_NAME: &'static [u8; 34usize] = b"Microsoft::Windows::RDS::Graphics\0";
pub const RDPGFX_CMDID_UNUSED_0000: u32 = 0;
pub const RDPGFX_CMDID_WIRETOSURFACE_1: u32 = 1;
pub const RDPGFX_CMDID_WIRETOSURFACE_2: u32 = 2;
pub const RDPGFX_CMDID_DELETEENCODINGCONTEXT: u32 = 3;
pub const RDPGFX_CMDID_SOLIDFILL: u32 = 4;
pub const RDPGFX_CMDID_SURFACETOSURFACE: u32 = 5;
pub const RDPGFX_CMDID_SURFACETOCACHE: u32 = 6;
pub const RDPGFX_CMDID_CACHETOSURFACE: u32 = 7;
pub const RDPGFX_CMDID_EVICTCACHEENTRY: u32 = 8;
pub const RDPGFX_CMDID_CREATESURFACE: u32 = 9;
pub const RDPGFX_CMDID_DELETESURFACE: u32 = 10;
pub const RDPGFX_CMDID_STARTFRAME: u32 = 11;
pub const RDPGFX_CMDID_ENDFRAME: u32 = 12;
pub const RDPGFX_CMDID_FRAMEACKNOWLEDGE: u32 = 13;
pub const RDPGFX_CMDID_RESETGRAPHICS: u32 = 14;
pub const RDPGFX_CMDID_MAPSURFACETOOUTPUT: u32 = 15;
pub const RDPGFX_CMDID_CACHEIMPORTOFFER: u32 = 16;
pub const RDPGFX_CMDID_CACHEIMPORTREPLY: u32 = 17;
pub const RDPGFX_CMDID_CAPSADVERTISE: u32 = 18;
pub const RDPGFX_CMDID_CAPSCONFIRM: u32 = 19;
pub const RDPGFX_CMDID_UNUSED_0014: u32 = 20;
pub const RDPGFX_CMDID_MAPSURFACETOWINDOW: u32 = 21;
pub const RDPGFX_CMDID_QOEFRAMEACKNOWLEDGE: u32 = 22;
pub const RDPGFX_CMDID_MAPSURFACETOSCALEDOUTPUT: u32 = 23;
pub const RDPGFX_CMDID_MAPSURFACETOSCALEDWINDOW: u32 = 24;
pub const RDPGFX_HEADER_SIZE: u32 = 8;
pub const RDPGFX_CAPVERSION_8: u32 = 524292;
pub const RDPGFX_CAPVERSION_81: u32 = 524549;
pub const RDPGFX_CAPVERSION_10: u32 = 655362;
pub const RDPGFX_CAPVERSION_101: u32 = 655616;
pub const RDPGFX_CAPVERSION_102: u32 = 655872;
pub const RDPGFX_CAPVERSION_103: u32 = 656129;
pub const RDPGFX_CAPVERSION_104: u32 = 656384;
pub const RDPGFX_CAPVERSION_105: u32 = 656642;
pub const RDPGFX_CAPVERSION_106: u32 = 656896;
pub const RDPGFX_NUMBER_CAPSETS: u32 = 9;
pub const RDPGFX_CAPSET_BASE_SIZE: u32 = 8;
pub const RDPGFX_CAPS_FLAG_THINCLIENT: u32 = 1;
pub const RDPGFX_CAPS_FLAG_SMALL_CACHE: u32 = 2;
pub const RDPGFX_CAPS_FLAG_AVC420_ENABLED: u32 = 16;
pub const RDPGFX_CAPS_FLAG_AVC_DISABLED: u32 = 32;
pub const RDPGFX_CAPS_FLAG_AVC_THINCLIENT: u32 = 64;
pub const RDPGFX_CODECID_UNCOMPRESSED: u32 = 0;
pub const RDPGFX_CODECID_CAVIDEO: u32 = 3;
pub const RDPGFX_CODECID_CLEARCODEC: u32 = 8;
pub const RDPGFX_CODECID_PLANAR: u32 = 10;
pub const RDPGFX_CODECID_AVC420: u32 = 11;
pub const RDPGFX_CODECID_ALPHA: u32 = 12;
pub const RDPGFX_CODECID_AVC444: u32 = 14;
pub const RDPGFX_CODECID_AVC444v2: u32 = 15;
pub const RDPGFX_WIRE_TO_SURFACE_PDU_1_SIZE: u32 = 17;
pub const RDPGFX_CODECID_CAPROGRESSIVE: u32 = 9;
pub const RDPGFX_CODECID_CAPROGRESSIVE_V2: u32 = 13;
pub const RDPGFX_WIRE_TO_SURFACE_PDU_2_SIZE: u32 = 13;
pub const RDPGFX_START_FRAME_PDU_SIZE: u32 = 8;
pub const RDPGFX_END_FRAME_PDU_SIZE: u32 = 4;
pub const FREERDP_CODEC_INTERLEAVED: u32 = 1;
pub const FREERDP_CODEC_PLANAR: u32 = 2;
pub const FREERDP_CODEC_NSCODEC: u32 = 4;
pub const FREERDP_CODEC_REMOTEFX: u32 = 8;
pub const FREERDP_CODEC_CLEARCODEC: u32 = 16;
pub const FREERDP_CODEC_ALPHACODEC: u32 = 32;
pub const FREERDP_CODEC_PROGRESSIVE: u32 = 64;
pub const FREERDP_CODEC_AVC420: u32 = 128;
pub const FREERDP_CODEC_AVC444: u32 = 256;
pub const FREERDP_CODEC_ALL: u32 = 4294967295;
pub const FREERDP_EXT_EXPORT_FUNC_NAME: &'static [u8; 22usize] = b"FreeRDPExtensionEntry\0";
pub const RDP_CLIENT_INPUT_PDU_HEADER_LENGTH: u32 = 4;
pub const RDP_RAIL_ORDER_EXEC: u32 = 1;
pub const RDP_RAIL_ORDER_ACTIVATE: u32 = 2;
pub const RDP_RAIL_ORDER_SYSPARAM: u32 = 3;
pub const RDP_RAIL_ORDER_SYSCOMMAND: u32 = 4;
pub const RDP_RAIL_ORDER_HANDSHAKE: u32 = 5;
pub const RDP_RAIL_ORDER_NOTIFY_EVENT: u32 = 6;
pub const RDP_RAIL_ORDER_WINDOWMOVE: u32 = 8;
pub const RDP_RAIL_ORDER_LOCALMOVESIZE: u32 = 9;
pub const RDP_RAIL_ORDER_MINMAXINFO: u32 = 10;
pub const RDP_RAIL_ORDER_CLIENTSTATUS: u32 = 11;
pub const RDP_RAIL_ORDER_SYSMENU: u32 = 12;
pub const RDP_RAIL_ORDER_LANGBARINFO: u32 = 13;
pub const RDP_RAIL_ORDER_EXEC_RESULT: u32 = 128;
pub const RDP_RAIL_ORDER_GET_APPID_REQ: u32 = 14;
pub const RDP_RAIL_ORDER_GET_APPID_RESP: u32 = 15;
pub const RDP_RAIL_ORDER_LANGUAGEIMEINFO: u32 = 17;
pub const RDP_RAIL_ORDER_COMPARTMENTINFO: u32 = 18;
pub const RDP_RAIL_ORDER_HANDSHAKE_EX: u32 = 19;
pub const RDP_RAIL_ORDER_ZORDER_SYNC: u32 = 20;
pub const RDP_RAIL_ORDER_CLOAK: u32 = 21;
pub const RDP_RAIL_ORDER_POWER_DISPLAY_REQUEST: u32 = 22;
pub const RDP_RAIL_ORDER_SNAP_ARRANGE: u32 = 23;
pub const RDP_RAIL_ORDER_GET_APPID_RESP_EX: u32 = 24;
pub const RDP_CLIENT_INTERFACE_VERSION: u32 = 1;
pub const RDP_CLIENT_ENTRY_POINT_NAME: &'static [u8; 15usize] = b"RdpClientEntry\0";
pub const RDPINPUT_HEADER_LENGTH: u32 = 6;
pub const RDPEI_DVC_CHANNEL_NAME: &'static [u8; 31usize] = b"Microsoft::Windows::RDS::Input\0";
pub const CLIPRDR_SVC_CHANNEL_NAME: &'static [u8; 8usize] = b"cliprdr\0";
pub const CB_FORMAT_HTML: u32 = 53264;
pub const CB_FORMAT_PNG: u32 = 53265;
pub const CB_FORMAT_JPEG: u32 = 53266;
pub const CB_FORMAT_GIF: u32 = 53267;
pub const CB_FORMAT_TEXTURILIST: u32 = 53268;
pub const CB_MONITOR_READY: u32 = 1;
pub const CB_FORMAT_LIST: u32 = 2;
pub const CB_FORMAT_LIST_RESPONSE: u32 = 3;
pub const CB_FORMAT_DATA_REQUEST: u32 = 4;
pub const CB_FORMAT_DATA_RESPONSE: u32 = 5;
pub const CB_TEMP_DIRECTORY: u32 = 6;
pub const CB_CLIP_CAPS: u32 = 7;
pub const CB_FILECONTENTS_REQUEST: u32 = 8;
pub const CB_FILECONTENTS_RESPONSE: u32 = 9;
pub const CB_LOCK_CLIPDATA: u32 = 10;
pub const CB_UNLOCK_CLIPDATA: u32 = 11;
pub const CB_RESPONSE_OK: u32 = 1;
pub const CB_RESPONSE_FAIL: u32 = 2;
pub const CB_ASCII_NAMES: u32 = 4;
pub const CB_CAPSTYPE_GENERAL: u32 = 1;
pub const CB_CAPSTYPE_GENERAL_LEN: u32 = 12;
pub const CB_CAPS_VERSION_1: u32 = 1;
pub const CB_CAPS_VERSION_2: u32 = 2;
pub const CB_USE_LONG_FORMAT_NAMES: u32 = 2;
pub const CB_STREAM_FILECLIP_ENABLED: u32 = 4;
pub const CB_FILECLIP_NO_FILE_PATHS: u32 = 8;
pub const CB_CAN_LOCK_CLIPDATA: u32 = 16;
pub const CB_HUGE_FILE_SUPPORT_ENABLED: u32 = 32;
pub const RDP_KEYBOARD_LAYOUT_TYPE_STANDARD: u32 = 1;
pub const RDP_KEYBOARD_LAYOUT_TYPE_VARIANT: u32 = 2;
pub const RDP_KEYBOARD_LAYOUT_TYPE_IME: u32 = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_rdp {
    _unused: [u8; 0],
}
pub type rdpRdp = rdp_rdp;
pub type rdpGdi = rdp_gdi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_rail {
    _unused: [u8; 0],
}
pub type rdpRail = rdp_rail;
pub type rdpCache = rdp_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_channels {
    _unused: [u8; 0],
}
pub type rdpChannels = rdp_channels;
pub type rdpGraphics = rdp_graphics;
pub type rdpMetrics = rdp_metrics;
pub type rdpCodecs = rdp_codecs;
pub type freerdp = rdp_freerdp;
pub type rdpContext = rdp_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_freerdp_peer {
    _unused: [u8; 0],
}
pub type freerdp_peer = rdp_freerdp_peer;
pub type rdpClientContext = rdp_client_context;
pub type RDP_CLIENT_ENTRY_POINTS_V1 = rdp_client_entry_points_v1;
pub type RDP_CLIENT_ENTRY_POINTS = RDP_CLIENT_ENTRY_POINTS_V1;
pub type size_t = ::std::os::raw::c_ulong;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type va_list = __builtin_va_list;
pub type FILE = _IO_FILE;
pub type __uint8 = u8;
pub type __int16 = i16;
pub type __uint16 = u16;
pub type __int32 = i32;
pub type __uint32 = u32;
pub type __int64 = i64;
pub type __uint64 = u64;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type BOOL = __int32;
pub type PBOOL = *mut BOOL;
pub type LPBOOL = *mut BOOL;
pub type BYTE = __uint8;
pub type LPBYTE = *mut BYTE;
pub type BOOLEAN = BYTE;
pub type CHAR = ::std::os::raw::c_char;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PCHAR = *mut CHAR;
pub type PSTR = *mut CHAR;
pub type LPSTR = *mut CHAR;
pub type LPCSTR = *const CHAR;
pub type PUCHAR = *mut UCHAR;
pub type WCHAR = __uint16;
pub type LPWSTR = *mut WCHAR;
pub type PWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type INT = __int32;
pub type LONG = __int32;
pub type UINT = __uint32;
pub type USHORT = __uint16;
pub type ULONG = __uint32;
pub type PULONG = *mut __uint32;
pub type INT16 = __int16;
pub type INT32 = __int32;
pub type INT64 = __int64;
pub type UINT8 = __uint8;
pub type UINT16 = __uint16;
pub type UINT32 = __uint32;
pub type UINT64 = __uint64;
pub type WORD = __uint16;
pub type DWORD = __uint32;
pub type LPDWORD = *mut __uint32;
pub type UINT_PTR = u64;
pub type LONG_PTR = i64;
pub type ULONG_PTR = u64;
pub type PULONG_PTR = *mut u64;
pub type SIZE_T = ULONG_PTR;
pub type SSIZE_T = LONG_PTR;
pub type FLOAT = f32;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type PHANDLE = *mut ::std::os::raw::c_void;
pub type HINSTANCE = HANDLE;
pub type HWND = HANDLE;
pub type HMENU = HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTL {
    pub x: LONG,
    pub y: LONG,
}
#[test]
fn bindgen_test_layout__POINTL() {
    assert_eq!(
        ::std::mem::size_of::<_POINTL>(),
        8usize,
        concat!("Size of: ", stringify!(_POINTL))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTL>(),
        4usize,
        concat!("Alignment of ", stringify!(_POINTL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTL>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTL),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTL>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTL),
            "::",
            stringify!(y)
        )
    );
}
pub type POINTL = _POINTL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSIZE {
    pub cx: LONG,
    pub cy: LONG,
}
#[test]
fn bindgen_test_layout_tagSIZE() {
    assert_eq!(
        ::std::mem::size_of::<tagSIZE>(),
        8usize,
        concat!("Size of: ", stringify!(tagSIZE))
    );
    assert_eq!(
        ::std::mem::align_of::<tagSIZE>(),
        4usize,
        concat!("Alignment of ", stringify!(tagSIZE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagSIZE>())).cx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSIZE),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagSIZE>())).cy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSIZE),
            "::",
            stringify!(cy)
        )
    );
}
pub type SIZE = tagSIZE;
pub type SIZEL = SIZE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: UINT32,
    pub Data2: UINT16,
    pub Data3: UINT16,
    pub Data4: [BYTE; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
pub type GUID = _GUID;
pub type CLSID = GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILETIME {
    pub dwLowDateTime: DWORD,
    pub dwHighDateTime: DWORD,
}
#[test]
fn bindgen_test_layout__FILETIME() {
    assert_eq!(
        ::std::mem::size_of::<_FILETIME>(),
        8usize,
        concat!("Size of: ", stringify!(_FILETIME))
    );
    assert_eq!(
        ::std::mem::align_of::<_FILETIME>(),
        4usize,
        concat!("Alignment of ", stringify!(_FILETIME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILETIME>())).dwLowDateTime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwLowDateTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILETIME>())).dwHighDateTime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwHighDateTime)
        )
    );
}
pub type FILETIME = _FILETIME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEMTIME {
    pub wYear: WORD,
    pub wMonth: WORD,
    pub wDayOfWeek: WORD,
    pub wDay: WORD,
    pub wHour: WORD,
    pub wMinute: WORD,
    pub wSecond: WORD,
    pub wMilliseconds: WORD,
}
#[test]
fn bindgen_test_layout__SYSTEMTIME() {
    assert_eq!(
        ::std::mem::size_of::<_SYSTEMTIME>(),
        16usize,
        concat!("Size of: ", stringify!(_SYSTEMTIME))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYSTEMTIME>(),
        2usize,
        concat!("Alignment of ", stringify!(_SYSTEMTIME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wYear as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wYear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wMonth as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wMonth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wDayOfWeek as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wDayOfWeek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wDay as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wDay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wHour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wHour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wMinute as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wMinute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wSecond as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wSecond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYSTEMTIME>())).wMilliseconds as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYSTEMTIME),
            "::",
            stringify!(wMilliseconds)
        )
    );
}
pub type SYSTEMTIME = _SYSTEMTIME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RPC_SID_IDENTIFIER_AUTHORITY {
    pub Value: [BYTE; 6usize],
}
#[test]
fn bindgen_test_layout__RPC_SID_IDENTIFIER_AUTHORITY() {
    assert_eq!(
        ::std::mem::size_of::<_RPC_SID_IDENTIFIER_AUTHORITY>(),
        6usize,
        concat!("Size of: ", stringify!(_RPC_SID_IDENTIFIER_AUTHORITY))
    );
    assert_eq!(
        ::std::mem::align_of::<_RPC_SID_IDENTIFIER_AUTHORITY>(),
        1usize,
        concat!("Alignment of ", stringify!(_RPC_SID_IDENTIFIER_AUTHORITY))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RPC_SID_IDENTIFIER_AUTHORITY>())).Value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RPC_SID_IDENTIFIER_AUTHORITY),
            "::",
            stringify!(Value)
        )
    );
}
pub type RPC_SID_IDENTIFIER_AUTHORITY = _RPC_SID_IDENTIFIER_AUTHORITY;
pub type SECURITY_INFORMATION = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RPC_SID {
    pub Revision: UCHAR,
    pub SubAuthorityCount: UCHAR,
    pub IdentifierAuthority: RPC_SID_IDENTIFIER_AUTHORITY,
    pub SubAuthority: [ULONG; 1usize],
}
#[test]
fn bindgen_test_layout__RPC_SID() {
    assert_eq!(
        ::std::mem::size_of::<_RPC_SID>(),
        12usize,
        concat!("Size of: ", stringify!(_RPC_SID))
    );
    assert_eq!(
        ::std::mem::align_of::<_RPC_SID>(),
        4usize,
        concat!("Alignment of ", stringify!(_RPC_SID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RPC_SID>())).Revision as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RPC_SID),
            "::",
            stringify!(Revision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RPC_SID>())).SubAuthorityCount as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_RPC_SID),
            "::",
            stringify!(SubAuthorityCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RPC_SID>())).IdentifierAuthority as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RPC_SID),
            "::",
            stringify!(IdentifierAuthority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RPC_SID>())).SubAuthority as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RPC_SID),
            "::",
            stringify!(SubAuthority)
        )
    );
}
pub type PSID = *mut _RPC_SID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL {
    pub AclRevision: UCHAR,
    pub Sbz1: UCHAR,
    pub AclSize: USHORT,
    pub AceCount: USHORT,
    pub Sbz2: USHORT,
}
#[test]
fn bindgen_test_layout__ACL() {
    assert_eq!(
        ::std::mem::size_of::<_ACL>(),
        8usize,
        concat!("Size of: ", stringify!(_ACL))
    );
    assert_eq!(
        ::std::mem::align_of::<_ACL>(),
        2usize,
        concat!("Alignment of ", stringify!(_ACL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ACL>())).AclRevision as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ACL),
            "::",
            stringify!(AclRevision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ACL>())).Sbz1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_ACL),
            "::",
            stringify!(Sbz1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ACL>())).AclSize as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ACL),
            "::",
            stringify!(AclSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ACL>())).AceCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ACL),
            "::",
            stringify!(AceCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ACL>())).Sbz2 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_ACL),
            "::",
            stringify!(Sbz2)
        )
    );
}
pub type PACL = *mut _ACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_DESCRIPTOR {
    pub Revision: UCHAR,
    pub Sbz1: UCHAR,
    pub Control: USHORT,
    pub Owner: PSID,
    pub Group: PSID,
    pub Sacl: PACL,
    pub Dacl: PACL,
}
#[test]
fn bindgen_test_layout__SECURITY_DESCRIPTOR() {
    assert_eq!(
        ::std::mem::size_of::<_SECURITY_DESCRIPTOR>(),
        40usize,
        concat!("Size of: ", stringify!(_SECURITY_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_SECURITY_DESCRIPTOR>(),
        8usize,
        concat!("Alignment of ", stringify!(_SECURITY_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Revision as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Revision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Sbz1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Sbz1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Control as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Group as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Sacl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Sacl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_DESCRIPTOR>())).Dacl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_DESCRIPTOR),
            "::",
            stringify!(Dacl)
        )
    );
}
pub type PSECURITY_DESCRIPTOR = *mut _SECURITY_DESCRIPTOR;
pub type PSECURITY_DESCRIPTOR_CONTROL = *mut WORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_ATTRIBUTES {
    pub nLength: DWORD,
    pub lpSecurityDescriptor: LPVOID,
    pub bInheritHandle: BOOL,
}
#[test]
fn bindgen_test_layout__SECURITY_ATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<_SECURITY_ATTRIBUTES>(),
        24usize,
        concat!("Size of: ", stringify!(_SECURITY_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<_SECURITY_ATTRIBUTES>(),
        8usize,
        concat!("Alignment of ", stringify!(_SECURITY_ATTRIBUTES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_ATTRIBUTES>())).nLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_ATTRIBUTES),
            "::",
            stringify!(nLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SECURITY_ATTRIBUTES>())).lpSecurityDescriptor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_ATTRIBUTES),
            "::",
            stringify!(lpSecurityDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SECURITY_ATTRIBUTES>())).bInheritHandle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_ATTRIBUTES),
            "::",
            stringify!(bInheritHandle)
        )
    );
}
pub type LPSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_INFORMATION {
    pub hProcess: HANDLE,
    pub hThread: HANDLE,
    pub dwProcessId: DWORD,
    pub dwThreadId: DWORD,
}
#[test]
fn bindgen_test_layout__PROCESS_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_PROCESS_INFORMATION>(),
        24usize,
        concat!("Size of: ", stringify!(_PROCESS_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_PROCESS_INFORMATION>(),
        8usize,
        concat!("Alignment of ", stringify!(_PROCESS_INFORMATION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PROCESS_INFORMATION>())).hProcess as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PROCESS_INFORMATION),
            "::",
            stringify!(hProcess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PROCESS_INFORMATION>())).hThread as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PROCESS_INFORMATION),
            "::",
            stringify!(hThread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_PROCESS_INFORMATION>())).dwProcessId as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PROCESS_INFORMATION),
            "::",
            stringify!(dwProcessId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PROCESS_INFORMATION>())).dwThreadId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PROCESS_INFORMATION),
            "::",
            stringify!(dwThreadId)
        )
    );
}
pub type LPPROCESS_INFORMATION = *mut _PROCESS_INFORMATION;
pub type PTHREAD_START_ROUTINE =
    ::std::option::Option<unsafe extern "C" fn(lpThreadParameter: LPVOID) -> DWORD>;
pub type LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OVERLAPPED {
    pub Internal: ULONG_PTR,
    pub InternalHigh: ULONG_PTR,
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[test]
fn bindgen_test_layout__OVERLAPPED__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>())).Offset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>())).OffsetHigh
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(OffsetHigh)
        )
    );
}
#[test]
fn bindgen_test_layout__OVERLAPPED__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_OVERLAPPED__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED__bindgen_ty_1>())).Pointer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1),
            "::",
            stringify!(Pointer)
        )
    );
}
#[test]
fn bindgen_test_layout__OVERLAPPED() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED>(),
        32usize,
        concat!("Size of: ", stringify!(_OVERLAPPED))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED>())).Internal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(Internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED>())).InternalHigh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(InternalHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED>())).hEvent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(hEvent)
        )
    );
}
pub type LPOVERLAPPED = *mut _OVERLAPPED;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED_ENTRY {
    pub lpCompletionKey: ULONG_PTR,
    pub lpOverlapped: LPOVERLAPPED,
    pub Internal: ULONG_PTR,
    pub dwNumberOfBytesTransferred: DWORD,
}
#[test]
fn bindgen_test_layout__OVERLAPPED_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED_ENTRY>(),
        32usize,
        concat!("Size of: ", stringify!(_OVERLAPPED_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED_ENTRY))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED_ENTRY>())).lpCompletionKey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED_ENTRY),
            "::",
            stringify!(lpCompletionKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED_ENTRY>())).lpOverlapped as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED_ENTRY),
            "::",
            stringify!(lpOverlapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OVERLAPPED_ENTRY>())).Internal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED_ENTRY),
            "::",
            stringify!(Internal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_OVERLAPPED_ENTRY>())).dwNumberOfBytesTransferred as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED_ENTRY),
            "::",
            stringify!(dwNumberOfBytesTransferred)
        )
    );
}
pub type LPOVERLAPPED_ENTRY = *mut _OVERLAPPED_ENTRY;
extern "C" {
    pub fn GetOverlappedResult(
        hFile: HANDLE,
        lpOverlapped: LPOVERLAPPED,
        lpNumberOfBytesTransferred: LPDWORD,
        bWait: BOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn GetOverlappedResultEx(
        hFile: HANDLE,
        lpOverlapped: LPOVERLAPPED,
        lpNumberOfBytesTransferred: LPDWORD,
        dwMilliseconds: DWORD,
        bAlertable: BOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateIoCompletionPort(
        FileHandle: HANDLE,
        ExistingCompletionPort: HANDLE,
        CompletionKey: ULONG_PTR,
        NumberOfConcurrentThreads: DWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn GetQueuedCompletionStatus(
        CompletionPort: HANDLE,
        lpNumberOfBytesTransferred: LPDWORD,
        lpCompletionKey: PULONG_PTR,
        lpOverlapped: *mut LPOVERLAPPED,
        dwMilliseconds: DWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn GetQueuedCompletionStatusEx(
        CompletionPort: HANDLE,
        lpCompletionPortEntries: LPOVERLAPPED_ENTRY,
        ulCount: ULONG,
        ulNumEntriesRemoved: PULONG,
        dwMilliseconds: DWORD,
        fAlertable: BOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn GetErrorMode() -> UINT;
}
extern "C" {
    pub fn GetLastError() -> DWORD;
}
extern "C" {
    pub fn CreateFileA(
        lpFileName: LPCSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateFileW(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
    ) -> HANDLE;
}
pub const _GET_FILEEX_INFO_LEVELS_GetFileExInfoStandard: _GET_FILEEX_INFO_LEVELS = 0;
pub const _GET_FILEEX_INFO_LEVELS_GetFileExMaxInfoLevel: _GET_FILEEX_INFO_LEVELS = 1;
pub type _GET_FILEEX_INFO_LEVELS = ::std::os::raw::c_uint;
pub use self::_GET_FILEEX_INFO_LEVELS as GET_FILEEX_INFO_LEVELS;
extern "C" {
    pub fn GetFileAttributesExA(
        lpFileName: LPCSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
    ) -> BOOL;
}
extern "C" {
    pub fn GetFileAttributesA(lpFileName: LPCSTR) -> DWORD;
}
extern "C" {
    pub fn GetFileAttributesExW(
        lpFileName: LPCWSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
    ) -> BOOL;
}
extern "C" {
    pub fn GetFileAttributesW(lpFileName: LPCWSTR) -> DWORD;
}
extern "C" {
    pub fn GetFileSize(hFile: HANDLE, lpFileSizeHigh: LPDWORD) -> DWORD;
}
extern "C" {
    pub fn CreateDirectoryA(
        lpPathName: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateDirectoryW(
        lpPathName: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
extern "C" {
    pub fn GetStdHandle(nStdHandle: DWORD) -> HANDLE;
}
extern "C" {
    pub fn GetDiskFreeSpaceA(
        lpRootPathName: LPCSTR,
        lpSectorsPerCluster: LPDWORD,
        lpBytesPerSector: LPDWORD,
        lpNumberOfFreeClusters: LPDWORD,
        lpTotalNumberOfClusters: LPDWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn GetDiskFreeSpaceW(
        lpRootPathName: LPCWSTR,
        lpSectorsPerCluster: LPDWORD,
        lpBytesPerSector: LPDWORD,
        lpNumberOfFreeClusters: LPDWORD,
        lpTotalNumberOfClusters: LPDWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn GetNamedPipeNameWithoutPrefixA(lpName: LPCSTR) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetNamedPipeUnixDomainSocketBaseFilePathA() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetNamedPipeUnixDomainSocketFilePathA(lpName: LPCSTR) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetNamePipeFileDescriptor(hNamedPipe: HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetFileHandleForFileDescriptor(fd: ::std::os::raw::c_int) -> HANDLE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCHANNEL_DEF {
    pub name: [::std::os::raw::c_char; 8usize],
    pub options: ULONG,
}
#[test]
fn bindgen_test_layout_tagCHANNEL_DEF() {
    assert_eq!(
        ::std::mem::size_of::<tagCHANNEL_DEF>(),
        12usize,
        concat!("Size of: ", stringify!(tagCHANNEL_DEF))
    );
    assert_eq!(
        ::std::mem::align_of::<tagCHANNEL_DEF>(),
        4usize,
        concat!("Alignment of ", stringify!(tagCHANNEL_DEF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagCHANNEL_DEF>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_DEF),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagCHANNEL_DEF>())).options as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_DEF),
            "::",
            stringify!(options)
        )
    );
}
pub type CHANNEL_DEF = tagCHANNEL_DEF;
pub type PCHANNEL_DEF = *mut CHANNEL_DEF;
pub type CHANNEL_INIT_EVENT_FN = ::std::option::Option<
    unsafe extern "C" fn(pInitHandle: LPVOID, event: UINT, pData: LPVOID, dataLength: UINT),
>;
pub type PCHANNEL_INIT_EVENT_FN = CHANNEL_INIT_EVENT_FN;
pub type CHANNEL_INIT_EVENT_EX_FN = ::std::option::Option<
    unsafe extern "C" fn(
        lpUserParam: LPVOID,
        pInitHandle: LPVOID,
        event: UINT,
        pData: LPVOID,
        dataLength: UINT,
    ),
>;
pub type PCHANNEL_INIT_EVENT_EX_FN = CHANNEL_INIT_EVENT_EX_FN;
pub type CHANNEL_OPEN_EVENT_FN = ::std::option::Option<
    unsafe extern "C" fn(
        openHandle: DWORD,
        event: UINT,
        pData: LPVOID,
        dataLength: UINT32,
        totalLength: UINT32,
        dataFlags: UINT32,
    ),
>;
pub type PCHANNEL_OPEN_EVENT_FN = CHANNEL_OPEN_EVENT_FN;
pub type CHANNEL_OPEN_EVENT_EX_FN = ::std::option::Option<
    unsafe extern "C" fn(
        lpUserParam: LPVOID,
        openHandle: DWORD,
        event: UINT,
        pData: LPVOID,
        dataLength: UINT32,
        totalLength: UINT32,
        dataFlags: UINT32,
    ),
>;
pub type PCHANNEL_OPEN_EVENT_EX_FN = CHANNEL_OPEN_EVENT_EX_FN;
pub type VIRTUALCHANNELINIT = ::std::option::Option<
    unsafe extern "C" fn(
        ppInitHandle: *mut LPVOID,
        pChannel: PCHANNEL_DEF,
        channelCount: INT,
        versionRequested: ULONG,
        pChannelInitEventProc: PCHANNEL_INIT_EVENT_FN,
    ) -> UINT,
>;
pub type PVIRTUALCHANNELINIT = VIRTUALCHANNELINIT;
pub type VIRTUALCHANNELINITEX = ::std::option::Option<
    unsafe extern "C" fn(
        lpUserParam: LPVOID,
        clientContext: LPVOID,
        pInitHandle: LPVOID,
        pChannel: PCHANNEL_DEF,
        channelCount: INT,
        versionRequested: ULONG,
        pChannelInitEventProcEx: PCHANNEL_INIT_EVENT_EX_FN,
    ) -> UINT,
>;
pub type PVIRTUALCHANNELINITEX = VIRTUALCHANNELINITEX;
pub type VIRTUALCHANNELOPEN = ::std::option::Option<
    unsafe extern "C" fn(
        pInitHandle: LPVOID,
        pOpenHandle: LPDWORD,
        pChannelName: PCHAR,
        pChannelOpenEventProc: PCHANNEL_OPEN_EVENT_FN,
    ) -> UINT,
>;
pub type PVIRTUALCHANNELOPEN = VIRTUALCHANNELOPEN;
pub type VIRTUALCHANNELOPENEX = ::std::option::Option<
    unsafe extern "C" fn(
        pInitHandle: LPVOID,
        pOpenHandle: LPDWORD,
        pChannelName: PCHAR,
        pChannelOpenEventProcEx: PCHANNEL_OPEN_EVENT_EX_FN,
    ) -> UINT,
>;
pub type PVIRTUALCHANNELOPENEX = VIRTUALCHANNELOPENEX;
pub type VIRTUALCHANNELCLOSE =
    ::std::option::Option<unsafe extern "C" fn(openHandle: DWORD) -> UINT>;
pub type PVIRTUALCHANNELCLOSE = VIRTUALCHANNELCLOSE;
pub type VIRTUALCHANNELCLOSEEX =
    ::std::option::Option<unsafe extern "C" fn(pInitHandle: LPVOID, openHandle: DWORD) -> UINT>;
pub type PVIRTUALCHANNELCLOSEEX = VIRTUALCHANNELCLOSEEX;
pub type VIRTUALCHANNELWRITE = ::std::option::Option<
    unsafe extern "C" fn(
        openHandle: DWORD,
        pData: LPVOID,
        dataLength: ULONG,
        pUserData: LPVOID,
    ) -> UINT,
>;
pub type PVIRTUALCHANNELWRITE = VIRTUALCHANNELWRITE;
pub type VIRTUALCHANNELWRITEEX = ::std::option::Option<
    unsafe extern "C" fn(
        pInitHandle: LPVOID,
        openHandle: DWORD,
        pData: LPVOID,
        dataLength: ULONG,
        pUserData: LPVOID,
    ) -> UINT,
>;
pub type PVIRTUALCHANNELWRITEEX = VIRTUALCHANNELWRITEEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCHANNEL_ENTRY_POINTS {
    pub cbSize: DWORD,
    pub protocolVersion: DWORD,
    pub pVirtualChannelInit: PVIRTUALCHANNELINIT,
    pub pVirtualChannelOpen: PVIRTUALCHANNELOPEN,
    pub pVirtualChannelClose: PVIRTUALCHANNELCLOSE,
    pub pVirtualChannelWrite: PVIRTUALCHANNELWRITE,
}
#[test]
fn bindgen_test_layout_tagCHANNEL_ENTRY_POINTS() {
    assert_eq!(
        ::std::mem::size_of::<tagCHANNEL_ENTRY_POINTS>(),
        40usize,
        concat!("Size of: ", stringify!(tagCHANNEL_ENTRY_POINTS))
    );
    assert_eq!(
        ::std::mem::align_of::<tagCHANNEL_ENTRY_POINTS>(),
        8usize,
        concat!("Alignment of ", stringify!(tagCHANNEL_ENTRY_POINTS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS>())).cbSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS>())).protocolVersion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS),
            "::",
            stringify!(protocolVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS>())).pVirtualChannelInit as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS),
            "::",
            stringify!(pVirtualChannelInit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS>())).pVirtualChannelOpen as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS),
            "::",
            stringify!(pVirtualChannelOpen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS>())).pVirtualChannelClose as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS),
            "::",
            stringify!(pVirtualChannelClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS>())).pVirtualChannelWrite as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS),
            "::",
            stringify!(pVirtualChannelWrite)
        )
    );
}
pub type PCHANNEL_ENTRY_POINTS = *mut tagCHANNEL_ENTRY_POINTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCHANNEL_ENTRY_POINTS_EX {
    pub cbSize: DWORD,
    pub protocolVersion: DWORD,
    pub pVirtualChannelInitEx: PVIRTUALCHANNELINITEX,
    pub pVirtualChannelOpenEx: PVIRTUALCHANNELOPENEX,
    pub pVirtualChannelCloseEx: PVIRTUALCHANNELCLOSEEX,
    pub pVirtualChannelWriteEx: PVIRTUALCHANNELWRITEEX,
}
#[test]
fn bindgen_test_layout_tagCHANNEL_ENTRY_POINTS_EX() {
    assert_eq!(
        ::std::mem::size_of::<tagCHANNEL_ENTRY_POINTS_EX>(),
        40usize,
        concat!("Size of: ", stringify!(tagCHANNEL_ENTRY_POINTS_EX))
    );
    assert_eq!(
        ::std::mem::align_of::<tagCHANNEL_ENTRY_POINTS_EX>(),
        8usize,
        concat!("Alignment of ", stringify!(tagCHANNEL_ENTRY_POINTS_EX))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS_EX>())).cbSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS_EX),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS_EX>())).protocolVersion as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS_EX),
            "::",
            stringify!(protocolVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS_EX>())).pVirtualChannelInitEx as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS_EX),
            "::",
            stringify!(pVirtualChannelInitEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS_EX>())).pVirtualChannelOpenEx as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS_EX),
            "::",
            stringify!(pVirtualChannelOpenEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS_EX>())).pVirtualChannelCloseEx
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS_EX),
            "::",
            stringify!(pVirtualChannelCloseEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tagCHANNEL_ENTRY_POINTS_EX>())).pVirtualChannelWriteEx
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagCHANNEL_ENTRY_POINTS_EX),
            "::",
            stringify!(pVirtualChannelWriteEx)
        )
    );
}
pub type PCHANNEL_ENTRY_POINTS_EX = *mut tagCHANNEL_ENTRY_POINTS_EX;
pub type VIRTUALCHANNELENTRY =
    ::std::option::Option<unsafe extern "C" fn(pEntryPoints: PCHANNEL_ENTRY_POINTS) -> BOOL>;
pub type PVIRTUALCHANNELENTRY = VIRTUALCHANNELENTRY;
pub type VIRTUALCHANNELENTRYEX = ::std::option::Option<
    unsafe extern "C" fn(pEntryPointsEx: PCHANNEL_ENTRY_POINTS_EX, pInitHandle: PVOID) -> BOOL,
>;
pub type PVIRTUALCHANNELENTRYEX = VIRTUALCHANNELENTRYEX;
pub const _WTS_CONNECTSTATE_CLASS_WTSActive: _WTS_CONNECTSTATE_CLASS = 0;
pub const _WTS_CONNECTSTATE_CLASS_WTSConnected: _WTS_CONNECTSTATE_CLASS = 1;
pub const _WTS_CONNECTSTATE_CLASS_WTSConnectQuery: _WTS_CONNECTSTATE_CLASS = 2;
pub const _WTS_CONNECTSTATE_CLASS_WTSShadow: _WTS_CONNECTSTATE_CLASS = 3;
pub const _WTS_CONNECTSTATE_CLASS_WTSDisconnected: _WTS_CONNECTSTATE_CLASS = 4;
pub const _WTS_CONNECTSTATE_CLASS_WTSIdle: _WTS_CONNECTSTATE_CLASS = 5;
pub const _WTS_CONNECTSTATE_CLASS_WTSListen: _WTS_CONNECTSTATE_CLASS = 6;
pub const _WTS_CONNECTSTATE_CLASS_WTSReset: _WTS_CONNECTSTATE_CLASS = 7;
pub const _WTS_CONNECTSTATE_CLASS_WTSDown: _WTS_CONNECTSTATE_CLASS = 8;
pub const _WTS_CONNECTSTATE_CLASS_WTSInit: _WTS_CONNECTSTATE_CLASS = 9;
pub type _WTS_CONNECTSTATE_CLASS = ::std::os::raw::c_uint;
pub use self::_WTS_CONNECTSTATE_CLASS as WTS_CONNECTSTATE_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_SERVER_INFOW {
    pub pServerName: LPWSTR,
}
#[test]
fn bindgen_test_layout__WTS_SERVER_INFOW() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_SERVER_INFOW>(),
        8usize,
        concat!("Size of: ", stringify!(_WTS_SERVER_INFOW))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_SERVER_INFOW>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_SERVER_INFOW))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SERVER_INFOW>())).pServerName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SERVER_INFOW),
            "::",
            stringify!(pServerName)
        )
    );
}
pub type PWTS_SERVER_INFOW = *mut _WTS_SERVER_INFOW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_SERVER_INFOA {
    pub pServerName: LPSTR,
}
#[test]
fn bindgen_test_layout__WTS_SERVER_INFOA() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_SERVER_INFOA>(),
        8usize,
        concat!("Size of: ", stringify!(_WTS_SERVER_INFOA))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_SERVER_INFOA>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_SERVER_INFOA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SERVER_INFOA>())).pServerName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SERVER_INFOA),
            "::",
            stringify!(pServerName)
        )
    );
}
pub type PWTS_SERVER_INFOA = *mut _WTS_SERVER_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_SESSION_INFOW {
    pub SessionId: DWORD,
    pub pWinStationName: LPWSTR,
    pub State: WTS_CONNECTSTATE_CLASS,
}
#[test]
fn bindgen_test_layout__WTS_SESSION_INFOW() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_SESSION_INFOW>(),
        24usize,
        concat!("Size of: ", stringify!(_WTS_SESSION_INFOW))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_SESSION_INFOW>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_SESSION_INFOW))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFOW>())).SessionId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFOW),
            "::",
            stringify!(SessionId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTS_SESSION_INFOW>())).pWinStationName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFOW),
            "::",
            stringify!(pWinStationName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFOW>())).State as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFOW),
            "::",
            stringify!(State)
        )
    );
}
pub type PWTS_SESSION_INFOW = *mut _WTS_SESSION_INFOW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_SESSION_INFOA {
    pub SessionId: DWORD,
    pub pWinStationName: LPSTR,
    pub State: WTS_CONNECTSTATE_CLASS,
}
#[test]
fn bindgen_test_layout__WTS_SESSION_INFOA() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_SESSION_INFOA>(),
        24usize,
        concat!("Size of: ", stringify!(_WTS_SESSION_INFOA))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_SESSION_INFOA>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_SESSION_INFOA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFOA>())).SessionId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFOA),
            "::",
            stringify!(SessionId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTS_SESSION_INFOA>())).pWinStationName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFOA),
            "::",
            stringify!(pWinStationName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFOA>())).State as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFOA),
            "::",
            stringify!(State)
        )
    );
}
pub type PWTS_SESSION_INFOA = *mut _WTS_SESSION_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_SESSION_INFO_1W {
    pub ExecEnvId: DWORD,
    pub State: WTS_CONNECTSTATE_CLASS,
    pub SessionId: DWORD,
    pub pSessionName: LPWSTR,
    pub pHostName: LPWSTR,
    pub pUserName: LPWSTR,
    pub pDomainName: LPWSTR,
    pub pFarmName: LPWSTR,
}
#[test]
fn bindgen_test_layout__WTS_SESSION_INFO_1W() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_SESSION_INFO_1W>(),
        56usize,
        concat!("Size of: ", stringify!(_WTS_SESSION_INFO_1W))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_SESSION_INFO_1W>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_SESSION_INFO_1W))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).ExecEnvId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(ExecEnvId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).State as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).SessionId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(SessionId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).pSessionName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(pSessionName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).pHostName as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(pHostName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).pUserName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(pUserName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).pDomainName as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(pDomainName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1W>())).pFarmName as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1W),
            "::",
            stringify!(pFarmName)
        )
    );
}
pub type PWTS_SESSION_INFO_1W = *mut _WTS_SESSION_INFO_1W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_SESSION_INFO_1A {
    pub ExecEnvId: DWORD,
    pub State: WTS_CONNECTSTATE_CLASS,
    pub SessionId: DWORD,
    pub pSessionName: LPSTR,
    pub pHostName: LPSTR,
    pub pUserName: LPSTR,
    pub pDomainName: LPSTR,
    pub pFarmName: LPSTR,
}
#[test]
fn bindgen_test_layout__WTS_SESSION_INFO_1A() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_SESSION_INFO_1A>(),
        56usize,
        concat!("Size of: ", stringify!(_WTS_SESSION_INFO_1A))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_SESSION_INFO_1A>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_SESSION_INFO_1A))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).ExecEnvId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(ExecEnvId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).State as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).SessionId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(SessionId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).pSessionName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(pSessionName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).pHostName as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(pHostName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).pUserName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(pUserName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).pDomainName as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(pDomainName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_SESSION_INFO_1A>())).pFarmName as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_SESSION_INFO_1A),
            "::",
            stringify!(pFarmName)
        )
    );
}
pub type PWTS_SESSION_INFO_1A = *mut _WTS_SESSION_INFO_1A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_PROCESS_INFOW {
    pub SessionId: DWORD,
    pub ProcessId: DWORD,
    pub pProcessName: LPWSTR,
    pub pUserSid: PSID,
}
#[test]
fn bindgen_test_layout__WTS_PROCESS_INFOW() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_PROCESS_INFOW>(),
        24usize,
        concat!("Size of: ", stringify!(_WTS_PROCESS_INFOW))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_PROCESS_INFOW>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_PROCESS_INFOW))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOW>())).SessionId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOW),
            "::",
            stringify!(SessionId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOW>())).ProcessId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOW),
            "::",
            stringify!(ProcessId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOW>())).pProcessName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOW),
            "::",
            stringify!(pProcessName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOW>())).pUserSid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOW),
            "::",
            stringify!(pUserSid)
        )
    );
}
pub type PWTS_PROCESS_INFOW = *mut _WTS_PROCESS_INFOW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTS_PROCESS_INFOA {
    pub SessionId: DWORD,
    pub ProcessId: DWORD,
    pub pProcessName: LPSTR,
    pub pUserSid: PSID,
}
#[test]
fn bindgen_test_layout__WTS_PROCESS_INFOA() {
    assert_eq!(
        ::std::mem::size_of::<_WTS_PROCESS_INFOA>(),
        24usize,
        concat!("Size of: ", stringify!(_WTS_PROCESS_INFOA))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTS_PROCESS_INFOA>(),
        8usize,
        concat!("Alignment of ", stringify!(_WTS_PROCESS_INFOA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOA>())).SessionId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOA),
            "::",
            stringify!(SessionId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOA>())).ProcessId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOA),
            "::",
            stringify!(ProcessId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOA>())).pProcessName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOA),
            "::",
            stringify!(pProcessName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTS_PROCESS_INFOA>())).pUserSid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTS_PROCESS_INFOA),
            "::",
            stringify!(pUserSid)
        )
    );
}
pub type PWTS_PROCESS_INFOA = *mut _WTS_PROCESS_INFOA;
pub const _WTS_INFO_CLASS_WTSInitialProgram: _WTS_INFO_CLASS = 0;
pub const _WTS_INFO_CLASS_WTSApplicationName: _WTS_INFO_CLASS = 1;
pub const _WTS_INFO_CLASS_WTSWorkingDirectory: _WTS_INFO_CLASS = 2;
pub const _WTS_INFO_CLASS_WTSOEMId: _WTS_INFO_CLASS = 3;
pub const _WTS_INFO_CLASS_WTSSessionId: _WTS_INFO_CLASS = 4;
pub const _WTS_INFO_CLASS_WTSUserName: _WTS_INFO_CLASS = 5;
pub const _WTS_INFO_CLASS_WTSWinStationName: _WTS_INFO_CLASS = 6;
pub const _WTS_INFO_CLASS_WTSDomainName: _WTS_INFO_CLASS = 7;
pub const _WTS_INFO_CLASS_WTSConnectState: _WTS_INFO_CLASS = 8;
pub const _WTS_INFO_CLASS_WTSClientBuildNumber: _WTS_INFO_CLASS = 9;
pub const _WTS_INFO_CLASS_WTSClientName: _WTS_INFO_CLASS = 10;
pub const _WTS_INFO_CLASS_WTSClientDirectory: _WTS_INFO_CLASS = 11;
pub const _WTS_INFO_CLASS_WTSClientProductId: _WTS_INFO_CLASS = 12;
pub const _WTS_INFO_CLASS_WTSClientHardwareId: _WTS_INFO_CLASS = 13;
pub const _WTS_INFO_CLASS_WTSClientAddress: _WTS_INFO_CLASS = 14;
pub const _WTS_INFO_CLASS_WTSClientDisplay: _WTS_INFO_CLASS = 15;
pub const _WTS_INFO_CLASS_WTSClientProtocolType: _WTS_INFO_CLASS = 16;
pub const _WTS_INFO_CLASS_WTSIdleTime: _WTS_INFO_CLASS = 17;
pub const _WTS_INFO_CLASS_WTSLogonTime: _WTS_INFO_CLASS = 18;
pub const _WTS_INFO_CLASS_WTSIncomingBytes: _WTS_INFO_CLASS = 19;
pub const _WTS_INFO_CLASS_WTSOutgoingBytes: _WTS_INFO_CLASS = 20;
pub const _WTS_INFO_CLASS_WTSIncomingFrames: _WTS_INFO_CLASS = 21;
pub const _WTS_INFO_CLASS_WTSOutgoingFrames: _WTS_INFO_CLASS = 22;
pub const _WTS_INFO_CLASS_WTSClientInfo: _WTS_INFO_CLASS = 23;
pub const _WTS_INFO_CLASS_WTSSessionInfo: _WTS_INFO_CLASS = 24;
pub const _WTS_INFO_CLASS_WTSSessionInfoEx: _WTS_INFO_CLASS = 25;
pub const _WTS_INFO_CLASS_WTSConfigInfo: _WTS_INFO_CLASS = 26;
pub const _WTS_INFO_CLASS_WTSValidationInfo: _WTS_INFO_CLASS = 27;
pub const _WTS_INFO_CLASS_WTSSessionAddressV4: _WTS_INFO_CLASS = 28;
pub const _WTS_INFO_CLASS_WTSIsRemoteSession: _WTS_INFO_CLASS = 29;
pub type _WTS_INFO_CLASS = ::std::os::raw::c_uint;
pub use self::_WTS_INFO_CLASS as WTS_INFO_CLASS;
pub const _WTS_CONFIG_CLASS_WTSUserConfigInitialProgram: _WTS_CONFIG_CLASS = 0;
pub const _WTS_CONFIG_CLASS_WTSUserConfigWorkingDirectory: _WTS_CONFIG_CLASS = 1;
pub const _WTS_CONFIG_CLASS_WTSUserConfigfInheritInitialProgram: _WTS_CONFIG_CLASS = 2;
pub const _WTS_CONFIG_CLASS_WTSUserConfigfAllowLogonTerminalServer: _WTS_CONFIG_CLASS = 3;
pub const _WTS_CONFIG_CLASS_WTSUserConfigTimeoutSettingsConnections: _WTS_CONFIG_CLASS = 4;
pub const _WTS_CONFIG_CLASS_WTSUserConfigTimeoutSettingsDisconnections: _WTS_CONFIG_CLASS = 5;
pub const _WTS_CONFIG_CLASS_WTSUserConfigTimeoutSettingsIdle: _WTS_CONFIG_CLASS = 6;
pub const _WTS_CONFIG_CLASS_WTSUserConfigfDeviceClientDrives: _WTS_CONFIG_CLASS = 7;
pub const _WTS_CONFIG_CLASS_WTSUserConfigfDeviceClientPrinters: _WTS_CONFIG_CLASS = 8;
pub const _WTS_CONFIG_CLASS_WTSUserConfigfDeviceClientDefaultPrinter: _WTS_CONFIG_CLASS = 9;
pub const _WTS_CONFIG_CLASS_WTSUserConfigBrokenTimeoutSettings: _WTS_CONFIG_CLASS = 10;
pub const _WTS_CONFIG_CLASS_WTSUserConfigReconnectSettings: _WTS_CONFIG_CLASS = 11;
pub const _WTS_CONFIG_CLASS_WTSUserConfigModemCallbackSettings: _WTS_CONFIG_CLASS = 12;
pub const _WTS_CONFIG_CLASS_WTSUserConfigModemCallbackPhoneNumber: _WTS_CONFIG_CLASS = 13;
pub const _WTS_CONFIG_CLASS_WTSUserConfigShadowingSettings: _WTS_CONFIG_CLASS = 14;
pub const _WTS_CONFIG_CLASS_WTSUserConfigTerminalServerProfilePath: _WTS_CONFIG_CLASS = 15;
pub const _WTS_CONFIG_CLASS_WTSUserConfigTerminalServerHomeDir: _WTS_CONFIG_CLASS = 16;
pub const _WTS_CONFIG_CLASS_WTSUserConfigTerminalServerHomeDirDrive: _WTS_CONFIG_CLASS = 17;
pub const _WTS_CONFIG_CLASS_WTSUserConfigfTerminalServerRemoteHomeDir: _WTS_CONFIG_CLASS = 18;
pub const _WTS_CONFIG_CLASS_WTSUserConfigUser: _WTS_CONFIG_CLASS = 19;
pub type _WTS_CONFIG_CLASS = ::std::os::raw::c_uint;
pub use self::_WTS_CONFIG_CLASS as WTS_CONFIG_CLASS;
pub const _WTS_VIRTUAL_CLASS_WTSVirtualClientData: _WTS_VIRTUAL_CLASS = 0;
pub const _WTS_VIRTUAL_CLASS_WTSVirtualFileHandle: _WTS_VIRTUAL_CLASS = 1;
pub const _WTS_VIRTUAL_CLASS_WTSVirtualEventHandle: _WTS_VIRTUAL_CLASS = 2;
pub const _WTS_VIRTUAL_CLASS_WTSVirtualChannelReady: _WTS_VIRTUAL_CLASS = 3;
pub type _WTS_VIRTUAL_CLASS = ::std::os::raw::c_uint;
pub use self::_WTS_VIRTUAL_CLASS as WTS_VIRTUAL_CLASS;
pub const _WTS_TYPE_CLASS_WTSTypeProcessInfoLevel0: _WTS_TYPE_CLASS = 0;
pub const _WTS_TYPE_CLASS_WTSTypeProcessInfoLevel1: _WTS_TYPE_CLASS = 1;
pub const _WTS_TYPE_CLASS_WTSTypeSessionInfoLevel1: _WTS_TYPE_CLASS = 2;
pub type _WTS_TYPE_CLASS = ::std::os::raw::c_uint;
pub use self::_WTS_TYPE_CLASS as WTS_TYPE_CLASS;
pub type WTSLISTENERNAMEW = [WCHAR; 33usize];
pub type PWTSLISTENERNAMEW = *mut WTSLISTENERNAMEW;
pub type WTSLISTENERNAMEA = [CHAR; 33usize];
pub type PWTSLISTENERNAMEA = *mut WTSLISTENERNAMEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTSLISTENERCONFIGW {
    pub version: ULONG,
    pub fEnableListener: ULONG,
    pub MaxConnectionCount: ULONG,
    pub fPromptForPassword: ULONG,
    pub fInheritColorDepth: ULONG,
    pub ColorDepth: ULONG,
    pub fInheritBrokenTimeoutSettings: ULONG,
    pub BrokenTimeoutSettings: ULONG,
    pub fDisablePrinterRedirection: ULONG,
    pub fDisableDriveRedirection: ULONG,
    pub fDisableComPortRedirection: ULONG,
    pub fDisableLPTPortRedirection: ULONG,
    pub fDisableClipboardRedirection: ULONG,
    pub fDisableAudioRedirection: ULONG,
    pub fDisablePNPRedirection: ULONG,
    pub fDisableDefaultMainClientPrinter: ULONG,
    pub LanAdapter: ULONG,
    pub PortNumber: ULONG,
    pub fInheritShadowSettings: ULONG,
    pub ShadowSettings: ULONG,
    pub TimeoutSettingsConnection: ULONG,
    pub TimeoutSettingsDisconnection: ULONG,
    pub TimeoutSettingsIdle: ULONG,
    pub SecurityLayer: ULONG,
    pub MinEncryptionLevel: ULONG,
    pub UserAuthentication: ULONG,
    pub Comment: [WCHAR; 61usize],
    pub LogonUserName: [WCHAR; 21usize],
    pub LogonDomain: [WCHAR; 18usize],
    pub WorkDirectory: [WCHAR; 261usize],
    pub InitialProgram: [WCHAR; 261usize],
}
#[test]
fn bindgen_test_layout__WTSLISTENERCONFIGW() {
    assert_eq!(
        ::std::mem::size_of::<_WTSLISTENERCONFIGW>(),
        1348usize,
        concat!("Size of: ", stringify!(_WTSLISTENERCONFIGW))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTSLISTENERCONFIGW>(),
        4usize,
        concat!("Alignment of ", stringify!(_WTSLISTENERCONFIGW))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fEnableListener as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fEnableListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).MaxConnectionCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(MaxConnectionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fPromptForPassword as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fPromptForPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fInheritColorDepth as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fInheritColorDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).ColorDepth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(ColorDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fInheritBrokenTimeoutSettings
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fInheritBrokenTimeoutSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).BrokenTimeoutSettings as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(BrokenTimeoutSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisablePrinterRedirection as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisablePrinterRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisableDriveRedirection as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisableDriveRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisableComPortRedirection as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisableComPortRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisableLPTPortRedirection as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisableLPTPortRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisableClipboardRedirection as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisableClipboardRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisableAudioRedirection as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisableAudioRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisablePNPRedirection as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisablePNPRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fDisableDefaultMainClientPrinter
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fDisableDefaultMainClientPrinter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).LanAdapter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(LanAdapter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).PortNumber as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(PortNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).fInheritShadowSettings as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(fInheritShadowSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).ShadowSettings as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(ShadowSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).TimeoutSettingsConnection as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(TimeoutSettingsConnection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).TimeoutSettingsDisconnection as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(TimeoutSettingsDisconnection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).TimeoutSettingsIdle as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(TimeoutSettingsIdle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).SecurityLayer as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(SecurityLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).MinEncryptionLevel as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(MinEncryptionLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).UserAuthentication as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(UserAuthentication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).Comment as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(Comment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).LogonUserName as *const _ as usize
        },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(LogonUserName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).LogonDomain as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(LogonDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).WorkDirectory as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(WorkDirectory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGW>())).InitialProgram as *const _ as usize
        },
        826usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGW),
            "::",
            stringify!(InitialProgram)
        )
    );
}
pub type PWTSLISTENERCONFIGW = *mut _WTSLISTENERCONFIGW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WTSLISTENERCONFIGA {
    pub version: ULONG,
    pub fEnableListener: ULONG,
    pub MaxConnectionCount: ULONG,
    pub fPromptForPassword: ULONG,
    pub fInheritColorDepth: ULONG,
    pub ColorDepth: ULONG,
    pub fInheritBrokenTimeoutSettings: ULONG,
    pub BrokenTimeoutSettings: ULONG,
    pub fDisablePrinterRedirection: ULONG,
    pub fDisableDriveRedirection: ULONG,
    pub fDisableComPortRedirection: ULONG,
    pub fDisableLPTPortRedirection: ULONG,
    pub fDisableClipboardRedirection: ULONG,
    pub fDisableAudioRedirection: ULONG,
    pub fDisablePNPRedirection: ULONG,
    pub fDisableDefaultMainClientPrinter: ULONG,
    pub LanAdapter: ULONG,
    pub PortNumber: ULONG,
    pub fInheritShadowSettings: ULONG,
    pub ShadowSettings: ULONG,
    pub TimeoutSettingsConnection: ULONG,
    pub TimeoutSettingsDisconnection: ULONG,
    pub TimeoutSettingsIdle: ULONG,
    pub SecurityLayer: ULONG,
    pub MinEncryptionLevel: ULONG,
    pub UserAuthentication: ULONG,
    pub Comment: [CHAR; 61usize],
    pub LogonUserName: [CHAR; 21usize],
    pub LogonDomain: [CHAR; 18usize],
    pub WorkDirectory: [CHAR; 261usize],
    pub InitialProgram: [CHAR; 261usize],
}
#[test]
fn bindgen_test_layout__WTSLISTENERCONFIGA() {
    assert_eq!(
        ::std::mem::size_of::<_WTSLISTENERCONFIGA>(),
        728usize,
        concat!("Size of: ", stringify!(_WTSLISTENERCONFIGA))
    );
    assert_eq!(
        ::std::mem::align_of::<_WTSLISTENERCONFIGA>(),
        4usize,
        concat!("Alignment of ", stringify!(_WTSLISTENERCONFIGA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fEnableListener as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fEnableListener)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).MaxConnectionCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(MaxConnectionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fPromptForPassword as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fPromptForPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fInheritColorDepth as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fInheritColorDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).ColorDepth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(ColorDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fInheritBrokenTimeoutSettings
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fInheritBrokenTimeoutSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).BrokenTimeoutSettings as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(BrokenTimeoutSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisablePrinterRedirection as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisablePrinterRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisableDriveRedirection as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisableDriveRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisableComPortRedirection as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisableComPortRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisableLPTPortRedirection as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisableLPTPortRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisableClipboardRedirection as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisableClipboardRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisableAudioRedirection as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisableAudioRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisablePNPRedirection as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisablePNPRedirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fDisableDefaultMainClientPrinter
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fDisableDefaultMainClientPrinter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).LanAdapter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(LanAdapter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).PortNumber as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(PortNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).fInheritShadowSettings as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(fInheritShadowSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).ShadowSettings as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(ShadowSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).TimeoutSettingsConnection as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(TimeoutSettingsConnection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).TimeoutSettingsDisconnection as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(TimeoutSettingsDisconnection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).TimeoutSettingsIdle as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(TimeoutSettingsIdle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).SecurityLayer as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(SecurityLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).MinEncryptionLevel as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(MinEncryptionLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).UserAuthentication as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(UserAuthentication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).Comment as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(Comment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).LogonUserName as *const _ as usize
        },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(LogonUserName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).LogonDomain as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(LogonDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).WorkDirectory as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(WorkDirectory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WTSLISTENERCONFIGA>())).InitialProgram as *const _ as usize
        },
        465usize,
        concat!(
            "Offset of field: ",
            stringify!(_WTSLISTENERCONFIGA),
            "::",
            stringify!(InitialProgram)
        )
    );
}
pub type PWTSLISTENERCONFIGA = *mut _WTSLISTENERCONFIGA;
extern "C" {
    pub fn WTSVirtualChannelOpen(hServer: HANDLE, SessionId: DWORD, pVirtualName: LPSTR) -> HANDLE;
}
extern "C" {
    pub fn WTSVirtualChannelOpenEx(SessionId: DWORD, pVirtualName: LPSTR, flags: DWORD) -> HANDLE;
}
extern "C" {
    pub fn WTSVirtualChannelClose(hChannelHandle: HANDLE) -> BOOL;
}
extern "C" {
    pub fn WTSVirtualChannelRead(
        hChannelHandle: HANDLE,
        TimeOut: ULONG,
        Buffer: PCHAR,
        BufferSize: ULONG,
        pBytesRead: PULONG,
    ) -> BOOL;
}
extern "C" {
    pub fn WTSVirtualChannelWrite(
        hChannelHandle: HANDLE,
        Buffer: PCHAR,
        Length: ULONG,
        pBytesWritten: PULONG,
    ) -> BOOL;
}
extern "C" {
    pub fn WTSVirtualChannelPurgeInput(hChannelHandle: HANDLE) -> BOOL;
}
extern "C" {
    pub fn WTSVirtualChannelPurgeOutput(hChannelHandle: HANDLE) -> BOOL;
}
extern "C" {
    pub fn WTSVirtualChannelQuery(
        hChannelHandle: HANDLE,
        WtsVirtualClass: WTS_VIRTUAL_CLASS,
        ppBuffer: *mut PVOID,
        pBytesReturned: *mut DWORD,
    ) -> BOOL;
}
pub type WTS_STOP_REMOTE_CONTROL_SESSION_FN =
    ::std::option::Option<unsafe extern "C" fn(LogonId: ULONG) -> BOOL>;
pub type WTS_START_REMOTE_CONTROL_SESSION_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        pTargetServerName: LPWSTR,
        TargetLogonId: ULONG,
        HotkeyVk: BYTE,
        HotkeyModifiers: USHORT,
    ) -> BOOL,
>;
pub type WTS_START_REMOTE_CONTROL_SESSION_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        pTargetServerName: LPSTR,
        TargetLogonId: ULONG,
        HotkeyVk: BYTE,
        HotkeyModifiers: USHORT,
    ) -> BOOL,
>;
pub type WTS_START_REMOTE_CONTROL_SESSION_EX_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        pTargetServerName: LPWSTR,
        TargetLogonId: ULONG,
        HotkeyVk: BYTE,
        HotkeyModifiers: USHORT,
        flags: DWORD,
    ) -> BOOL,
>;
pub type WTS_START_REMOTE_CONTROL_SESSION_EX_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        pTargetServerName: LPSTR,
        TargetLogonId: ULONG,
        HotkeyVk: BYTE,
        HotkeyModifiers: USHORT,
        flags: DWORD,
    ) -> BOOL,
>;
pub type WTS_CONNECT_SESSION_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        LogonId: ULONG,
        TargetLogonId: ULONG,
        pPassword: PWSTR,
        bWait: BOOL,
    ) -> BOOL,
>;
pub type WTS_CONNECT_SESSION_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        LogonId: ULONG,
        TargetLogonId: ULONG,
        pPassword: PSTR,
        bWait: BOOL,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_SERVERS_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        pDomainName: LPWSTR,
        Reserved: DWORD,
        Version: DWORD,
        ppServerInfo: *mut PWTS_SERVER_INFOW,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_SERVERS_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        pDomainName: LPSTR,
        Reserved: DWORD,
        Version: DWORD,
        ppServerInfo: *mut PWTS_SERVER_INFOA,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_OPEN_SERVER_FN_W =
    ::std::option::Option<unsafe extern "C" fn(pServerName: LPWSTR) -> HANDLE>;
pub type WTS_OPEN_SERVER_FN_A =
    ::std::option::Option<unsafe extern "C" fn(pServerName: LPSTR) -> HANDLE>;
pub type WTS_OPEN_SERVER_EX_FN_W =
    ::std::option::Option<unsafe extern "C" fn(pServerName: LPWSTR) -> HANDLE>;
pub type WTS_OPEN_SERVER_EX_FN_A =
    ::std::option::Option<unsafe extern "C" fn(pServerName: LPSTR) -> HANDLE>;
pub type WTS_CLOSE_SERVER_FN = ::std::option::Option<unsafe extern "C" fn(hServer: HANDLE)>;
pub type WTS_ENUMERATE_SESSIONS_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        Reserved: DWORD,
        Version: DWORD,
        ppSessionInfo: *mut PWTS_SESSION_INFOW,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_SESSIONS_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        Reserved: DWORD,
        Version: DWORD,
        ppSessionInfo: *mut PWTS_SESSION_INFOA,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_SESSIONS_EX_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pLevel: *mut DWORD,
        Filter: DWORD,
        ppSessionInfo: *mut PWTS_SESSION_INFO_1W,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_SESSIONS_EX_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pLevel: *mut DWORD,
        Filter: DWORD,
        ppSessionInfo: *mut PWTS_SESSION_INFO_1A,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_PROCESSES_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        Reserved: DWORD,
        Version: DWORD,
        ppProcessInfo: *mut PWTS_PROCESS_INFOW,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_PROCESSES_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        Reserved: DWORD,
        Version: DWORD,
        ppProcessInfo: *mut PWTS_PROCESS_INFOA,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_TERMINATE_PROCESS_FN = ::std::option::Option<
    unsafe extern "C" fn(hServer: HANDLE, ProcessId: DWORD, ExitCode: DWORD) -> BOOL,
>;
pub type WTS_QUERY_SESSION_INFORMATION_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        SessionId: DWORD,
        WTSInfoClass: WTS_INFO_CLASS,
        ppBuffer: *mut LPWSTR,
        pBytesReturned: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_QUERY_SESSION_INFORMATION_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        SessionId: DWORD,
        WTSInfoClass: WTS_INFO_CLASS,
        ppBuffer: *mut LPSTR,
        pBytesReturned: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_QUERY_USER_CONFIG_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        pServerName: LPWSTR,
        pUserName: LPWSTR,
        WTSConfigClass: WTS_CONFIG_CLASS,
        ppBuffer: *mut LPWSTR,
        pBytesReturned: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_QUERY_USER_CONFIG_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        pServerName: LPSTR,
        pUserName: LPSTR,
        WTSConfigClass: WTS_CONFIG_CLASS,
        ppBuffer: *mut LPSTR,
        pBytesReturned: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_SET_USER_CONFIG_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        pServerName: LPWSTR,
        pUserName: LPWSTR,
        WTSConfigClass: WTS_CONFIG_CLASS,
        pBuffer: LPWSTR,
        DataLength: DWORD,
    ) -> BOOL,
>;
pub type WTS_SET_USER_CONFIG_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        pServerName: LPSTR,
        pUserName: LPSTR,
        WTSConfigClass: WTS_CONFIG_CLASS,
        pBuffer: LPSTR,
        DataLength: DWORD,
    ) -> BOOL,
>;
pub type WTS_SEND_MESSAGE_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        SessionId: DWORD,
        pTitle: LPWSTR,
        TitleLength: DWORD,
        pMessage: LPWSTR,
        MessageLength: DWORD,
        Style: DWORD,
        Timeout: DWORD,
        pResponse: *mut DWORD,
        bWait: BOOL,
    ) -> BOOL,
>;
pub type WTS_SEND_MESSAGE_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        SessionId: DWORD,
        pTitle: LPSTR,
        TitleLength: DWORD,
        pMessage: LPSTR,
        MessageLength: DWORD,
        Style: DWORD,
        Timeout: DWORD,
        pResponse: *mut DWORD,
        bWait: BOOL,
    ) -> BOOL,
>;
pub type WTS_DISCONNECT_SESSION_FN = ::std::option::Option<
    unsafe extern "C" fn(hServer: HANDLE, SessionId: DWORD, bWait: BOOL) -> BOOL,
>;
pub type WTS_LOGOFF_SESSION_FN = ::std::option::Option<
    unsafe extern "C" fn(hServer: HANDLE, SessionId: DWORD, bWait: BOOL) -> BOOL,
>;
pub type WTS_SHUTDOWN_SYSTEM_FN =
    ::std::option::Option<unsafe extern "C" fn(hServer: HANDLE, ShutdownFlag: DWORD) -> BOOL>;
pub type WTS_WAIT_SYSTEM_EVENT_FN = ::std::option::Option<
    unsafe extern "C" fn(hServer: HANDLE, EventMask: DWORD, pEventFlags: *mut DWORD) -> BOOL,
>;
pub type WTS_VIRTUAL_CHANNEL_OPEN_FN = ::std::option::Option<
    unsafe extern "C" fn(hServer: HANDLE, SessionId: DWORD, pVirtualName: LPSTR) -> HANDLE,
>;
pub type WTS_VIRTUAL_CHANNEL_OPEN_EX_FN = ::std::option::Option<
    unsafe extern "C" fn(SessionId: DWORD, pVirtualName: LPSTR, flags: DWORD) -> HANDLE,
>;
pub type WTS_VIRTUAL_CHANNEL_CLOSE_FN =
    ::std::option::Option<unsafe extern "C" fn(hChannelHandle: HANDLE) -> BOOL>;
pub type WTS_VIRTUAL_CHANNEL_READ_FN = ::std::option::Option<
    unsafe extern "C" fn(
        hChannelHandle: HANDLE,
        TimeOut: ULONG,
        Buffer: PCHAR,
        BufferSize: ULONG,
        pBytesRead: PULONG,
    ) -> BOOL,
>;
pub type WTS_VIRTUAL_CHANNEL_WRITE_FN = ::std::option::Option<
    unsafe extern "C" fn(
        hChannelHandle: HANDLE,
        Buffer: PCHAR,
        Length: ULONG,
        pBytesWritten: PULONG,
    ) -> BOOL,
>;
pub type WTS_VIRTUAL_CHANNEL_PURGE_INPUT_FN =
    ::std::option::Option<unsafe extern "C" fn(hChannelHandle: HANDLE) -> BOOL>;
pub type WTS_VIRTUAL_CHANNEL_PURGE_OUTPUT_FN =
    ::std::option::Option<unsafe extern "C" fn(hChannelHandle: HANDLE) -> BOOL>;
pub type WTS_VIRTUAL_CHANNEL_QUERY_FN = ::std::option::Option<
    unsafe extern "C" fn(
        hChannelHandle: HANDLE,
        WtsVirtualClass: WTS_VIRTUAL_CLASS,
        ppBuffer: *mut PVOID,
        pBytesReturned: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_FREE_MEMORY_FN = ::std::option::Option<unsafe extern "C" fn(pMemory: PVOID)>;
pub type WTS_REGISTER_SESSION_NOTIFICATION_FN =
    ::std::option::Option<unsafe extern "C" fn(hWnd: HWND, dwFlags: DWORD) -> BOOL>;
pub type WTS_UNREGISTER_SESSION_NOTIFICATION_FN =
    ::std::option::Option<unsafe extern "C" fn(hWnd: HWND) -> BOOL>;
pub type WTS_REGISTER_SESSION_NOTIFICATION_EX_FN = ::std::option::Option<
    unsafe extern "C" fn(hServer: HANDLE, hWnd: HWND, dwFlags: DWORD) -> BOOL,
>;
pub type WTS_UNREGISTER_SESSION_NOTIFICATION_EX_FN =
    ::std::option::Option<unsafe extern "C" fn(hServer: HANDLE, hWnd: HWND) -> BOOL>;
pub type WTS_QUERY_USER_TOKEN_FN =
    ::std::option::Option<unsafe extern "C" fn(SessionId: ULONG, phToken: PHANDLE) -> BOOL>;
pub type WTS_FREE_MEMORY_EX_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        WTSTypeClass: WTS_TYPE_CLASS,
        pMemory: PVOID,
        NumberOfEntries: ULONG,
    ) -> BOOL,
>;
pub type WTS_FREE_MEMORY_EX_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        WTSTypeClass: WTS_TYPE_CLASS,
        pMemory: PVOID,
        NumberOfEntries: ULONG,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_PROCESSES_EX_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pLevel: *mut DWORD,
        SessionId: DWORD,
        ppProcessInfo: *mut LPWSTR,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_PROCESSES_EX_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pLevel: *mut DWORD,
        SessionId: DWORD,
        ppProcessInfo: *mut LPSTR,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_LISTENERS_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListeners: PWTSLISTENERNAMEW,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_ENUMERATE_LISTENERS_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListeners: PWTSLISTENERNAMEA,
        pCount: *mut DWORD,
    ) -> BOOL,
>;
pub type WTS_QUERY_LISTENER_CONFIG_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPWSTR,
        pBuffer: PWTSLISTENERCONFIGW,
    ) -> BOOL,
>;
pub type WTS_QUERY_LISTENER_CONFIG_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPSTR,
        pBuffer: PWTSLISTENERCONFIGA,
    ) -> BOOL,
>;
pub type WTS_CREATE_LISTENER_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPWSTR,
        pBuffer: PWTSLISTENERCONFIGW,
        flag: DWORD,
    ) -> BOOL,
>;
pub type WTS_CREATE_LISTENER_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPSTR,
        pBuffer: PWTSLISTENERCONFIGA,
        flag: DWORD,
    ) -> BOOL,
>;
pub type WTS_SET_LISTENER_SECURITY_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPWSTR,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOL,
>;
pub type WTS_SET_LISTENER_SECURITY_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPSTR,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOL,
>;
pub type WTS_GET_LISTENER_SECURITY_FN_W = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPWSTR,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL,
>;
pub type WTS_GET_LISTENER_SECURITY_FN_A = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        pReserved: PVOID,
        Reserved: DWORD,
        pListenerName: LPSTR,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL,
>;
pub type WTS_ENABLE_CHILD_SESSIONS_FN =
    ::std::option::Option<unsafe extern "C" fn(bEnable: BOOL) -> BOOL>;
pub type WTS_IS_CHILD_SESSIONS_ENABLED_FN =
    ::std::option::Option<unsafe extern "C" fn(pbEnabled: PBOOL) -> BOOL>;
pub type WTS_GET_CHILD_SESSION_ID_FN =
    ::std::option::Option<unsafe extern "C" fn(pSessionId: PULONG) -> BOOL>;
pub type WTS_GET_ACTIVE_CONSOLE_SESSION_ID_FN =
    ::std::option::Option<unsafe extern "C" fn() -> DWORD>;
pub type WTS_LOGON_USER_FN = ::std::option::Option<
    unsafe extern "C" fn(
        hServer: HANDLE,
        username: LPCSTR,
        password: LPCSTR,
        domain: LPCSTR,
    ) -> BOOL,
>;
pub type WTS_LOGOFF_USER_FN = ::std::option::Option<unsafe extern "C" fn(hServer: HANDLE) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WtsApiFunctionTable {
    pub dwVersion: DWORD,
    pub dwFlags: DWORD,
    pub pStopRemoteControlSession: WTS_STOP_REMOTE_CONTROL_SESSION_FN,
    pub pStartRemoteControlSessionW: WTS_START_REMOTE_CONTROL_SESSION_FN_W,
    pub pStartRemoteControlSessionA: WTS_START_REMOTE_CONTROL_SESSION_FN_A,
    pub pConnectSessionW: WTS_CONNECT_SESSION_FN_W,
    pub pConnectSessionA: WTS_CONNECT_SESSION_FN_A,
    pub pEnumerateServersW: WTS_ENUMERATE_SERVERS_FN_W,
    pub pEnumerateServersA: WTS_ENUMERATE_SERVERS_FN_A,
    pub pOpenServerW: WTS_OPEN_SERVER_FN_W,
    pub pOpenServerA: WTS_OPEN_SERVER_FN_A,
    pub pOpenServerExW: WTS_OPEN_SERVER_EX_FN_W,
    pub pOpenServerExA: WTS_OPEN_SERVER_EX_FN_A,
    pub pCloseServer: WTS_CLOSE_SERVER_FN,
    pub pEnumerateSessionsW: WTS_ENUMERATE_SESSIONS_FN_W,
    pub pEnumerateSessionsA: WTS_ENUMERATE_SESSIONS_FN_A,
    pub pEnumerateSessionsExW: WTS_ENUMERATE_SESSIONS_EX_FN_W,
    pub pEnumerateSessionsExA: WTS_ENUMERATE_SESSIONS_EX_FN_A,
    pub pEnumerateProcessesW: WTS_ENUMERATE_PROCESSES_FN_W,
    pub pEnumerateProcessesA: WTS_ENUMERATE_PROCESSES_FN_A,
    pub pTerminateProcess: WTS_TERMINATE_PROCESS_FN,
    pub pQuerySessionInformationW: WTS_QUERY_SESSION_INFORMATION_FN_W,
    pub pQuerySessionInformationA: WTS_QUERY_SESSION_INFORMATION_FN_A,
    pub pQueryUserConfigW: WTS_QUERY_USER_CONFIG_FN_W,
    pub pQueryUserConfigA: WTS_QUERY_USER_CONFIG_FN_A,
    pub pSetUserConfigW: WTS_SET_USER_CONFIG_FN_W,
    pub pSetUserConfigA: WTS_SET_USER_CONFIG_FN_A,
    pub pSendMessageW: WTS_SEND_MESSAGE_FN_W,
    pub pSendMessageA: WTS_SEND_MESSAGE_FN_A,
    pub pDisconnectSession: WTS_DISCONNECT_SESSION_FN,
    pub pLogoffSession: WTS_LOGOFF_SESSION_FN,
    pub pShutdownSystem: WTS_SHUTDOWN_SYSTEM_FN,
    pub pWaitSystemEvent: WTS_WAIT_SYSTEM_EVENT_FN,
    pub pVirtualChannelOpen: WTS_VIRTUAL_CHANNEL_OPEN_FN,
    pub pVirtualChannelOpenEx: WTS_VIRTUAL_CHANNEL_OPEN_EX_FN,
    pub pVirtualChannelClose: WTS_VIRTUAL_CHANNEL_CLOSE_FN,
    pub pVirtualChannelRead: WTS_VIRTUAL_CHANNEL_READ_FN,
    pub pVirtualChannelWrite: WTS_VIRTUAL_CHANNEL_WRITE_FN,
    pub pVirtualChannelPurgeInput: WTS_VIRTUAL_CHANNEL_PURGE_INPUT_FN,
    pub pVirtualChannelPurgeOutput: WTS_VIRTUAL_CHANNEL_PURGE_OUTPUT_FN,
    pub pVirtualChannelQuery: WTS_VIRTUAL_CHANNEL_QUERY_FN,
    pub pFreeMemory: WTS_FREE_MEMORY_FN,
    pub pRegisterSessionNotification: WTS_REGISTER_SESSION_NOTIFICATION_FN,
    pub pUnRegisterSessionNotification: WTS_UNREGISTER_SESSION_NOTIFICATION_FN,
    pub pRegisterSessionNotificationEx: WTS_REGISTER_SESSION_NOTIFICATION_EX_FN,
    pub pUnRegisterSessionNotificationEx: WTS_UNREGISTER_SESSION_NOTIFICATION_EX_FN,
    pub pQueryUserToken: WTS_QUERY_USER_TOKEN_FN,
    pub pFreeMemoryExW: WTS_FREE_MEMORY_EX_FN_W,
    pub pFreeMemoryExA: WTS_FREE_MEMORY_EX_FN_A,
    pub pEnumerateProcessesExW: WTS_ENUMERATE_PROCESSES_EX_FN_W,
    pub pEnumerateProcessesExA: WTS_ENUMERATE_PROCESSES_EX_FN_A,
    pub pEnumerateListenersW: WTS_ENUMERATE_LISTENERS_FN_W,
    pub pEnumerateListenersA: WTS_ENUMERATE_LISTENERS_FN_A,
    pub pQueryListenerConfigW: WTS_QUERY_LISTENER_CONFIG_FN_W,
    pub pQueryListenerConfigA: WTS_QUERY_LISTENER_CONFIG_FN_A,
    pub pCreateListenerW: WTS_CREATE_LISTENER_FN_W,
    pub pCreateListenerA: WTS_CREATE_LISTENER_FN_A,
    pub pSetListenerSecurityW: WTS_SET_LISTENER_SECURITY_FN_W,
    pub pSetListenerSecurityA: WTS_SET_LISTENER_SECURITY_FN_A,
    pub pGetListenerSecurityW: WTS_GET_LISTENER_SECURITY_FN_W,
    pub pGetListenerSecurityA: WTS_GET_LISTENER_SECURITY_FN_A,
    pub pEnableChildSessions: WTS_ENABLE_CHILD_SESSIONS_FN,
    pub pIsChildSessionsEnabled: WTS_IS_CHILD_SESSIONS_ENABLED_FN,
    pub pGetChildSessionId: WTS_GET_CHILD_SESSION_ID_FN,
    pub pGetActiveConsoleSessionId: WTS_GET_ACTIVE_CONSOLE_SESSION_ID_FN,
    pub pLogonUser: WTS_LOGON_USER_FN,
    pub pLogoffUser: WTS_LOGOFF_USER_FN,
    pub pStartRemoteControlSessionExW: WTS_START_REMOTE_CONTROL_SESSION_EX_FN_W,
    pub pStartRemoteControlSessionExA: WTS_START_REMOTE_CONTROL_SESSION_EX_FN_A,
}
#[test]
fn bindgen_test_layout__WtsApiFunctionTable() {
    assert_eq!(
        ::std::mem::size_of::<_WtsApiFunctionTable>(),
        544usize,
        concat!("Size of: ", stringify!(_WtsApiFunctionTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_WtsApiFunctionTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_WtsApiFunctionTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WtsApiFunctionTable>())).dwVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(dwVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WtsApiFunctionTable>())).dwFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pStopRemoteControlSession as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pStopRemoteControlSession)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pStartRemoteControlSessionW as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pStartRemoteControlSessionW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pStartRemoteControlSessionA as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pStartRemoteControlSessionA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pConnectSessionW as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pConnectSessionW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pConnectSessionA as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pConnectSessionA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateServersW as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateServersW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateServersA as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateServersA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pOpenServerW as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pOpenServerW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pOpenServerA as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pOpenServerA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pOpenServerExW as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pOpenServerExW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pOpenServerExA as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pOpenServerExA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pCloseServer as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pCloseServer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateSessionsW as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateSessionsW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateSessionsA as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateSessionsA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateSessionsExW as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateSessionsExW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateSessionsExA as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateSessionsExA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateProcessesW as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateProcessesW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateProcessesA as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateProcessesA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pTerminateProcess as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pTerminateProcess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQuerySessionInformationW as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQuerySessionInformationW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQuerySessionInformationA as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQuerySessionInformationA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQueryUserConfigW as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQueryUserConfigW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQueryUserConfigA as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQueryUserConfigA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pSetUserConfigW as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pSetUserConfigW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pSetUserConfigA as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pSetUserConfigA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pSendMessageW as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pSendMessageW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pSendMessageA as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pSendMessageA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pDisconnectSession as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pDisconnectSession)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pLogoffSession as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pLogoffSession)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pShutdownSystem as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pShutdownSystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pWaitSystemEvent as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pWaitSystemEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelOpen as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelOpen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelOpenEx as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelOpenEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelClose as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelRead as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelRead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelWrite as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelWrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelPurgeInput as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelPurgeInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelPurgeOutput as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelPurgeOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pVirtualChannelQuery as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pVirtualChannelQuery)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pFreeMemory as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pFreeMemory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pRegisterSessionNotification
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pRegisterSessionNotification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pUnRegisterSessionNotification
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pUnRegisterSessionNotification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pRegisterSessionNotificationEx
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pRegisterSessionNotificationEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pUnRegisterSessionNotificationEx
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pUnRegisterSessionNotificationEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQueryUserToken as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQueryUserToken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pFreeMemoryExW as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pFreeMemoryExW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pFreeMemoryExA as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pFreeMemoryExA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateProcessesExW as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateProcessesExW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateProcessesExA as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateProcessesExA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateListenersW as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateListenersW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnumerateListenersA as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnumerateListenersA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQueryListenerConfigW as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQueryListenerConfigW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pQueryListenerConfigA as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pQueryListenerConfigA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pCreateListenerW as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pCreateListenerW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pCreateListenerA as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pCreateListenerA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pSetListenerSecurityW as *const _
                as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pSetListenerSecurityW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pSetListenerSecurityA as *const _
                as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pSetListenerSecurityA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pGetListenerSecurityW as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pGetListenerSecurityW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pGetListenerSecurityA as *const _
                as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pGetListenerSecurityA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pEnableChildSessions as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pEnableChildSessions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pIsChildSessionsEnabled as *const _
                as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pIsChildSessionsEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pGetChildSessionId as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pGetChildSessionId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pGetActiveConsoleSessionId as *const _
                as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pGetActiveConsoleSessionId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pLogonUser as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pLogonUser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pLogoffUser as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pLogoffUser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pStartRemoteControlSessionExW
                as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pStartRemoteControlSessionExW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WtsApiFunctionTable>())).pStartRemoteControlSessionExA
                as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_WtsApiFunctionTable),
            "::",
            stringify!(pStartRemoteControlSessionExA)
        )
    );
}
pub type WtsApiFunctionTable = _WtsApiFunctionTable;
pub type PWtsApiFunctionTable = *mut WtsApiFunctionTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PALETTE_ENTRY {
    pub red: BYTE,
    pub green: BYTE,
    pub blue: BYTE,
}
#[test]
fn bindgen_test_layout__PALETTE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_PALETTE_ENTRY>(),
        3usize,
        concat!("Size of: ", stringify!(_PALETTE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_PALETTE_ENTRY>(),
        1usize,
        concat!("Alignment of ", stringify!(_PALETTE_ENTRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PALETTE_ENTRY>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PALETTE_ENTRY),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PALETTE_ENTRY>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_PALETTE_ENTRY),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PALETTE_ENTRY>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_PALETTE_ENTRY),
            "::",
            stringify!(blue)
        )
    );
}
pub type PALETTE_ENTRY = _PALETTE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIME_ZONE_INFORMATION {
    pub Bias: LONG,
    pub StandardName: [WCHAR; 32usize],
    pub StandardDate: SYSTEMTIME,
    pub StandardBias: LONG,
    pub DaylightName: [WCHAR; 32usize],
    pub DaylightDate: SYSTEMTIME,
    pub DaylightBias: LONG,
}
#[test]
fn bindgen_test_layout__TIME_ZONE_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_TIME_ZONE_INFORMATION>(),
        172usize,
        concat!("Size of: ", stringify!(_TIME_ZONE_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_TIME_ZONE_INFORMATION>(),
        4usize,
        concat!("Alignment of ", stringify!(_TIME_ZONE_INFORMATION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).Bias as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(Bias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).StandardName as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(StandardName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).StandardDate as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(StandardDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).StandardBias as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(StandardBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).DaylightName as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(DaylightName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).DaylightDate as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(DaylightDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_ZONE_INFORMATION>())).DaylightBias as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_ZONE_INFORMATION),
            "::",
            stringify!(DaylightBias)
        )
    );
}
pub type TIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION;
pub type LPTIME_ZONE_INFORMATION = *mut _TIME_ZONE_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIME_DYNAMIC_ZONE_INFORMATION {
    pub Bias: LONG,
    pub StandardName: [WCHAR; 32usize],
    pub StandardDate: SYSTEMTIME,
    pub StandardBias: LONG,
    pub DaylightName: [WCHAR; 32usize],
    pub DaylightDate: SYSTEMTIME,
    pub DaylightBias: LONG,
    pub TimeZoneKeyName: [WCHAR; 128usize],
    pub DynamicDaylightTimeDisabled: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TIME_DYNAMIC_ZONE_INFORMATION() {
    assert_eq!(
        ::std::mem::size_of::<_TIME_DYNAMIC_ZONE_INFORMATION>(),
        432usize,
        concat!("Size of: ", stringify!(_TIME_DYNAMIC_ZONE_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_TIME_DYNAMIC_ZONE_INFORMATION>(),
        4usize,
        concat!("Alignment of ", stringify!(_TIME_DYNAMIC_ZONE_INFORMATION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).Bias as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(Bias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).StandardName as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(StandardName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).StandardDate as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(StandardDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).StandardBias as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(StandardBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).DaylightName as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(DaylightName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).DaylightDate as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(DaylightDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).DaylightBias as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(DaylightBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).TimeZoneKeyName as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(TimeZoneKeyName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TIME_DYNAMIC_ZONE_INFORMATION>())).DynamicDaylightTimeDisabled
                as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIME_DYNAMIC_ZONE_INFORMATION),
            "::",
            stringify!(DynamicDaylightTimeDisabled)
        )
    );
}
pub type PDYNAMIC_TIME_ZONE_INFORMATION = *mut _TIME_DYNAMIC_ZONE_INFORMATION;
extern "C" {
    pub fn GetTimeZoneInformation(lpTimeZoneInformation: LPTIME_ZONE_INFORMATION) -> DWORD;
}
extern "C" {
    pub fn GetDynamicTimeZoneInformation(
        pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION,
    ) -> DWORD;
}
extern "C" {
    pub fn GetTimeZoneInformationForYear(
        wYear: USHORT,
        pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION,
        ptzi: LPTIME_ZONE_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn GetDynamicTimeZoneInformationEffectiveYears(
        lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION,
        FirstYear: LPDWORD,
        LastYear: LPDWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARC_CS_PRIVATE_PACKET {
    pub cbLen: UINT32,
    pub version: UINT32,
    pub logonId: UINT32,
    pub securityVerifier: [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout_ARC_CS_PRIVATE_PACKET() {
    assert_eq!(
        ::std::mem::size_of::<ARC_CS_PRIVATE_PACKET>(),
        28usize,
        concat!("Size of: ", stringify!(ARC_CS_PRIVATE_PACKET))
    );
    assert_eq!(
        ::std::mem::align_of::<ARC_CS_PRIVATE_PACKET>(),
        4usize,
        concat!("Alignment of ", stringify!(ARC_CS_PRIVATE_PACKET))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ARC_CS_PRIVATE_PACKET>())).cbLen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_CS_PRIVATE_PACKET),
            "::",
            stringify!(cbLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ARC_CS_PRIVATE_PACKET>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_CS_PRIVATE_PACKET),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ARC_CS_PRIVATE_PACKET>())).logonId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_CS_PRIVATE_PACKET),
            "::",
            stringify!(logonId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ARC_CS_PRIVATE_PACKET>())).securityVerifier as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_CS_PRIVATE_PACKET),
            "::",
            stringify!(securityVerifier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARC_SC_PRIVATE_PACKET {
    pub cbLen: UINT32,
    pub version: UINT32,
    pub logonId: UINT32,
    pub arcRandomBits: [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout_ARC_SC_PRIVATE_PACKET() {
    assert_eq!(
        ::std::mem::size_of::<ARC_SC_PRIVATE_PACKET>(),
        28usize,
        concat!("Size of: ", stringify!(ARC_SC_PRIVATE_PACKET))
    );
    assert_eq!(
        ::std::mem::align_of::<ARC_SC_PRIVATE_PACKET>(),
        4usize,
        concat!("Alignment of ", stringify!(ARC_SC_PRIVATE_PACKET))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ARC_SC_PRIVATE_PACKET>())).cbLen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_SC_PRIVATE_PACKET),
            "::",
            stringify!(cbLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ARC_SC_PRIVATE_PACKET>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_SC_PRIVATE_PACKET),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ARC_SC_PRIVATE_PACKET>())).logonId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_SC_PRIVATE_PACKET),
            "::",
            stringify!(logonId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ARC_SC_PRIVATE_PACKET>())).arcRandomBits as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ARC_SC_PRIVATE_PACKET),
            "::",
            stringify!(arcRandomBits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_CertBlob {
    pub length: UINT32,
    pub data: *mut BYTE,
}
#[test]
fn bindgen_test_layout_rdp_CertBlob() {
    assert_eq!(
        ::std::mem::size_of::<rdp_CertBlob>(),
        16usize,
        concat!("Size of: ", stringify!(rdp_CertBlob))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_CertBlob>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_CertBlob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_CertBlob>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_CertBlob),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_CertBlob>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_CertBlob),
            "::",
            stringify!(data)
        )
    );
}
pub type rdpCertBlob = rdp_CertBlob;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_X509CertChain {
    pub count: UINT32,
    pub array: *mut rdpCertBlob,
}
#[test]
fn bindgen_test_layout_rdp_X509CertChain() {
    assert_eq!(
        ::std::mem::size_of::<rdp_X509CertChain>(),
        16usize,
        concat!("Size of: ", stringify!(rdp_X509CertChain))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_X509CertChain>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_X509CertChain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_X509CertChain>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_X509CertChain),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_X509CertChain>())).array as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_X509CertChain),
            "::",
            stringify!(array)
        )
    );
}
pub type rdpX509CertChain = rdp_X509CertChain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_CertInfo {
    pub Modulus: *mut BYTE,
    pub ModulusLength: DWORD,
    pub exponent: [BYTE; 4usize],
}
#[test]
fn bindgen_test_layout_rdp_CertInfo() {
    assert_eq!(
        ::std::mem::size_of::<rdp_CertInfo>(),
        16usize,
        concat!("Size of: ", stringify!(rdp_CertInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_CertInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_CertInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_CertInfo>())).Modulus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_CertInfo),
            "::",
            stringify!(Modulus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_CertInfo>())).ModulusLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_CertInfo),
            "::",
            stringify!(ModulusLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_CertInfo>())).exponent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_CertInfo),
            "::",
            stringify!(exponent)
        )
    );
}
pub type rdpCertInfo = rdp_CertInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_certificate {
    pub cert_info: rdpCertInfo,
    pub x509_cert_chain: *mut rdpX509CertChain,
}
#[test]
fn bindgen_test_layout_rdp_certificate() {
    assert_eq!(
        ::std::mem::size_of::<rdp_certificate>(),
        24usize,
        concat!("Size of: ", stringify!(rdp_certificate))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_certificate>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_certificate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_certificate>())).cert_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_certificate),
            "::",
            stringify!(cert_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_certificate>())).x509_cert_chain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_certificate),
            "::",
            stringify!(x509_cert_chain)
        )
    );
}
pub type rdpCertificate = rdp_certificate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_rsa_key {
    pub Modulus: *mut BYTE,
    pub ModulusLength: DWORD,
    pub PrivateExponent: *mut BYTE,
    pub PrivateExponentLength: DWORD,
    pub exponent: [BYTE; 4usize],
}
#[test]
fn bindgen_test_layout_rdp_rsa_key() {
    assert_eq!(
        ::std::mem::size_of::<rdp_rsa_key>(),
        32usize,
        concat!("Size of: ", stringify!(rdp_rsa_key))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_rsa_key>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_rsa_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_rsa_key>())).Modulus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_rsa_key),
            "::",
            stringify!(Modulus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_rsa_key>())).ModulusLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_rsa_key),
            "::",
            stringify!(ModulusLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_rsa_key>())).PrivateExponent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_rsa_key),
            "::",
            stringify!(PrivateExponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_rsa_key>())).PrivateExponentLength as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_rsa_key),
            "::",
            stringify!(PrivateExponentLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_rsa_key>())).exponent as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_rsa_key),
            "::",
            stringify!(exponent)
        )
    );
}
pub type rdpRsaKey = rdp_rsa_key;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ADDIN_ARGV {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ADDIN_ARGV() {
    assert_eq!(
        ::std::mem::size_of::<_ADDIN_ARGV>(),
        16usize,
        concat!("Size of: ", stringify!(_ADDIN_ARGV))
    );
    assert_eq!(
        ::std::mem::align_of::<_ADDIN_ARGV>(),
        8usize,
        concat!("Alignment of ", stringify!(_ADDIN_ARGV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ADDIN_ARGV>())).argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ADDIN_ARGV),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ADDIN_ARGV>())).argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ADDIN_ARGV),
            "::",
            stringify!(argv)
        )
    );
}
pub type ADDIN_ARGV = _ADDIN_ARGV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_ext_set {
    pub name: [::std::os::raw::c_char; 256usize],
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rdp_ext_set() {
    assert_eq!(
        ::std::mem::size_of::<rdp_ext_set>(),
        264usize,
        concat!("Size of: ", stringify!(rdp_ext_set))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_ext_set>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_ext_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_ext_set>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_ext_set),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_ext_set>())).data as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_ext_set),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_CACHE_V2_CELL_INFO {
    pub numEntries: UINT32,
    pub persistent: BOOL,
}
#[test]
fn bindgen_test_layout__BITMAP_CACHE_V2_CELL_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_CACHE_V2_CELL_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(_BITMAP_CACHE_V2_CELL_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_CACHE_V2_CELL_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(_BITMAP_CACHE_V2_CELL_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_CACHE_V2_CELL_INFO>())).numEntries as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_CACHE_V2_CELL_INFO),
            "::",
            stringify!(numEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_CACHE_V2_CELL_INFO>())).persistent as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_CACHE_V2_CELL_INFO),
            "::",
            stringify!(persistent)
        )
    );
}
pub type BITMAP_CACHE_V2_CELL_INFO = _BITMAP_CACHE_V2_CELL_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPH_CACHE_DEFINITION {
    pub cacheEntries: UINT16,
    pub cacheMaximumCellSize: UINT16,
}
#[test]
fn bindgen_test_layout__GLYPH_CACHE_DEFINITION() {
    assert_eq!(
        ::std::mem::size_of::<_GLYPH_CACHE_DEFINITION>(),
        4usize,
        concat!("Size of: ", stringify!(_GLYPH_CACHE_DEFINITION))
    );
    assert_eq!(
        ::std::mem::align_of::<_GLYPH_CACHE_DEFINITION>(),
        2usize,
        concat!("Alignment of ", stringify!(_GLYPH_CACHE_DEFINITION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GLYPH_CACHE_DEFINITION>())).cacheEntries as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_CACHE_DEFINITION),
            "::",
            stringify!(cacheEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_GLYPH_CACHE_DEFINITION>())).cacheMaximumCellSize as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_CACHE_DEFINITION),
            "::",
            stringify!(cacheMaximumCellSize)
        )
    );
}
pub type GLYPH_CACHE_DEFINITION = _GLYPH_CACHE_DEFINITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MONITOR_DEF {
    pub left: INT32,
    pub top: INT32,
    pub right: INT32,
    pub bottom: INT32,
    pub flags: UINT32,
}
#[test]
fn bindgen_test_layout__MONITOR_DEF() {
    assert_eq!(
        ::std::mem::size_of::<_MONITOR_DEF>(),
        20usize,
        concat!("Size of: ", stringify!(_MONITOR_DEF))
    );
    assert_eq!(
        ::std::mem::align_of::<_MONITOR_DEF>(),
        4usize,
        concat!("Alignment of ", stringify!(_MONITOR_DEF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MONITOR_DEF>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_DEF),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MONITOR_DEF>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_DEF),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MONITOR_DEF>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_DEF),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MONITOR_DEF>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_DEF),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MONITOR_DEF>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_DEF),
            "::",
            stringify!(flags)
        )
    );
}
pub type MONITOR_DEF = _MONITOR_DEF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MONITOR_ATTRIBUTES {
    pub physicalWidth: UINT32,
    pub physicalHeight: UINT32,
    pub orientation: UINT32,
    pub desktopScaleFactor: UINT32,
    pub deviceScaleFactor: UINT32,
}
#[test]
fn bindgen_test_layout__MONITOR_ATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<_MONITOR_ATTRIBUTES>(),
        20usize,
        concat!("Size of: ", stringify!(_MONITOR_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<_MONITOR_ATTRIBUTES>(),
        4usize,
        concat!("Alignment of ", stringify!(_MONITOR_ATTRIBUTES))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITOR_ATTRIBUTES>())).physicalWidth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_ATTRIBUTES),
            "::",
            stringify!(physicalWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITOR_ATTRIBUTES>())).physicalHeight as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_ATTRIBUTES),
            "::",
            stringify!(physicalHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MONITOR_ATTRIBUTES>())).orientation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_ATTRIBUTES),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITOR_ATTRIBUTES>())).desktopScaleFactor as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_ATTRIBUTES),
            "::",
            stringify!(desktopScaleFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITOR_ATTRIBUTES>())).deviceScaleFactor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITOR_ATTRIBUTES),
            "::",
            stringify!(deviceScaleFactor)
        )
    );
}
pub type MONITOR_ATTRIBUTES = _MONITOR_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_monitor {
    pub x: INT32,
    pub y: INT32,
    pub width: INT32,
    pub height: INT32,
    pub is_primary: UINT32,
    pub orig_screen: UINT32,
    pub attributes: MONITOR_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout_rdp_monitor() {
    assert_eq!(
        ::std::mem::size_of::<rdp_monitor>(),
        44usize,
        concat!("Size of: ", stringify!(rdp_monitor))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_monitor>(),
        4usize,
        concat!("Alignment of ", stringify!(rdp_monitor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).is_primary as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(is_primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).orig_screen as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(orig_screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_monitor>())).attributes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_monitor),
            "::",
            stringify!(attributes)
        )
    );
}
pub type rdpMonitor = rdp_monitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPDR_DEVICE {
    pub Id: UINT32,
    pub Type: UINT32,
    pub Name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__RDPDR_DEVICE() {
    assert_eq!(
        ::std::mem::size_of::<_RDPDR_DEVICE>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPDR_DEVICE))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPDR_DEVICE>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPDR_DEVICE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPDR_DEVICE>())).Id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPDR_DEVICE),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPDR_DEVICE>())).Type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPDR_DEVICE),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPDR_DEVICE>())).Name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPDR_DEVICE),
            "::",
            stringify!(Name)
        )
    );
}
pub type RDPDR_DEVICE = _RDPDR_DEVICE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_settings {
    #[doc = " WARNING: this data structure is carefully padded for ABI stability!"]
    #[doc = " Keeping this area clean is particularly challenging, so unless you are"]
    #[doc = " a trusted developer you should NOT take the liberty of adding your own"]
    #[doc = " options straight into the ABI stable zone. Instead, append them to the"]
    #[doc = " very end of this data structure, in the zone marked as ABI unstable."]
    pub instance: *mut ::std::os::raw::c_void,
    pub padding001: [UINT64; 15usize],
    pub ServerMode: BOOL,
    pub __bindgen_padding_0: u32,
    pub ShareId: UINT32,
    pub __bindgen_padding_1: u32,
    pub PduSource: UINT32,
    pub __bindgen_padding_2: u32,
    pub ServerPort: UINT32,
    pub ServerHostname: *mut ::std::os::raw::c_char,
    pub Username: *mut ::std::os::raw::c_char,
    pub Password: *mut ::std::os::raw::c_char,
    pub Domain: *mut ::std::os::raw::c_char,
    pub PasswordHash: *mut ::std::os::raw::c_char,
    pub WaitForOutputBufferFlush: BOOL,
    pub __bindgen_padding_3: u32,
    pub MaxTimeInCheckLoop: UINT32,
    pub AcceptedCert: *mut ::std::os::raw::c_char,
    pub AcceptedCertLength: UINT32,
    pub padding0064: [UINT64; 35usize],
    pub padding0128: [UINT64; 64usize],
    #[doc = " GCC User Data Blocks"]
    pub RdpVersion: UINT32,
    pub __bindgen_padding_4: u32,
    pub DesktopWidth: UINT32,
    pub __bindgen_padding_5: u32,
    pub DesktopHeight: UINT32,
    pub __bindgen_padding_6: u32,
    pub ColorDepth: UINT32,
    pub __bindgen_padding_7: u32,
    pub ConnectionType: UINT32,
    pub __bindgen_padding_8: u32,
    pub ClientBuild: UINT32,
    pub ClientHostname: *mut ::std::os::raw::c_char,
    pub ClientProductId: *mut ::std::os::raw::c_char,
    pub EarlyCapabilityFlags: UINT32,
    pub __bindgen_padding_9: u32,
    pub NetworkAutoDetect: BOOL,
    pub __bindgen_padding_10: u32,
    pub SupportAsymetricKeys: BOOL,
    pub __bindgen_padding_11: u32,
    pub SupportErrorInfoPdu: BOOL,
    pub __bindgen_padding_12: u32,
    pub SupportStatusInfoPdu: BOOL,
    pub __bindgen_padding_13: u32,
    pub SupportMonitorLayoutPdu: BOOL,
    pub __bindgen_padding_14: u32,
    pub SupportGraphicsPipeline: BOOL,
    pub __bindgen_padding_15: u32,
    pub SupportDynamicTimeZone: BOOL,
    pub __bindgen_padding_16: u32,
    pub SupportHeartbeatPdu: BOOL,
    pub __bindgen_padding_17: u32,
    pub DesktopPhysicalWidth: UINT32,
    pub __bindgen_padding_18: u32,
    pub DesktopPhysicalHeight: UINT32,
    pub __bindgen_padding_19: [u16; 2usize],
    pub DesktopOrientation: UINT16,
    pub __bindgen_padding_20: u32,
    pub DesktopScaleFactor: UINT32,
    pub __bindgen_padding_21: u32,
    pub DeviceScaleFactor: UINT32,
    pub padding0192: [UINT64; 42usize],
    pub UseRdpSecurityLayer: BOOL,
    pub __bindgen_padding_22: u32,
    pub EncryptionMethods: UINT32,
    pub __bindgen_padding_23: u32,
    pub ExtEncryptionMethods: UINT32,
    pub __bindgen_padding_24: u32,
    pub EncryptionLevel: UINT32,
    pub ServerRandom: *mut BYTE,
    pub ServerRandomLength: UINT32,
    pub ServerCertificate: *mut BYTE,
    pub ServerCertificateLength: UINT32,
    pub ClientRandom: *mut BYTE,
    pub ClientRandomLength: UINT32,
    pub padding0256: [UINT64; 54usize],
    pub ChannelCount: UINT32,
    pub __bindgen_padding_25: u32,
    pub ChannelDefArraySize: UINT32,
    pub ChannelDefArray: *mut CHANNEL_DEF,
    pub padding0320: [UINT64; 61usize],
    pub ClusterInfoFlags: UINT32,
    pub __bindgen_padding_26: u32,
    pub RedirectedSessionId: UINT32,
    pub __bindgen_padding_27: u32,
    pub ConsoleSession: BOOL,
    pub padding0384: [UINT64; 61usize],
    pub MonitorCount: UINT32,
    pub __bindgen_padding_28: u32,
    pub MonitorDefArraySize: UINT32,
    pub MonitorDefArray: *mut rdpMonitor,
    pub SpanMonitors: BOOL,
    pub __bindgen_padding_29: u32,
    pub UseMultimon: BOOL,
    pub __bindgen_padding_30: u32,
    pub ForceMultimon: BOOL,
    pub __bindgen_padding_31: u32,
    pub DesktopPosX: UINT32,
    pub __bindgen_padding_32: u32,
    pub DesktopPosY: UINT32,
    pub __bindgen_padding_33: u32,
    pub ListMonitors: BOOL,
    pub MonitorIds: *mut UINT32,
    pub NumMonitorIds: UINT32,
    pub __bindgen_padding_34: u32,
    pub MonitorLocalShiftX: UINT32,
    pub __bindgen_padding_35: u32,
    pub MonitorLocalShiftY: UINT32,
    pub __bindgen_padding_36: u32,
    pub HasMonitorAttributes: BOOL,
    pub padding0448: [UINT64; 50usize],
    pub padding0512: [UINT64; 64usize],
    pub MultitransportFlags: UINT32,
    pub __bindgen_padding_37: u32,
    pub SupportMultitransport: BOOL,
    pub padding0576: [UINT64; 62usize],
    pub padding0640: [UINT64; 64usize],
    pub AlternateShell: *mut ::std::os::raw::c_char,
    pub ShellWorkingDirectory: *mut ::std::os::raw::c_char,
    pub padding0704: [UINT64; 62usize],
    pub AutoLogonEnabled: BOOL,
    pub __bindgen_padding_38: u32,
    pub CompressionEnabled: BOOL,
    pub __bindgen_padding_39: u32,
    pub DisableCtrlAltDel: BOOL,
    pub __bindgen_padding_40: u32,
    pub EnableWindowsKey: BOOL,
    pub __bindgen_padding_41: u32,
    pub MaximizeShell: BOOL,
    pub __bindgen_padding_42: u32,
    pub LogonNotify: BOOL,
    pub __bindgen_padding_43: u32,
    pub LogonErrors: BOOL,
    pub __bindgen_padding_44: u32,
    pub MouseAttached: BOOL,
    pub __bindgen_padding_45: u32,
    pub MouseHasWheel: BOOL,
    pub __bindgen_padding_46: u32,
    pub RemoteConsoleAudio: BOOL,
    pub __bindgen_padding_47: u32,
    pub AudioPlayback: BOOL,
    pub __bindgen_padding_48: u32,
    pub AudioCapture: BOOL,
    pub __bindgen_padding_49: u32,
    pub VideoDisable: BOOL,
    pub __bindgen_padding_50: u32,
    pub PasswordIsSmartcardPin: BOOL,
    pub __bindgen_padding_51: u32,
    pub UsingSavedCredentials: BOOL,
    pub __bindgen_padding_52: u32,
    pub ForceEncryptedCsPdu: BOOL,
    pub __bindgen_padding_53: u32,
    pub HiDefRemoteApp: BOOL,
    pub __bindgen_padding_54: u32,
    pub CompressionLevel: UINT32,
    pub padding0768: [UINT64; 46usize],
    pub IPv6Enabled: BOOL,
    pub ClientAddress: *mut ::std::os::raw::c_char,
    pub ClientDir: *mut ::std::os::raw::c_char,
    pub padding0832: [UINT64; 61usize],
    pub AutoReconnectionEnabled: BOOL,
    pub __bindgen_padding_55: u32,
    pub AutoReconnectMaxRetries: UINT32,
    pub ClientAutoReconnectCookie: *mut ARC_CS_PRIVATE_PACKET,
    pub ServerAutoReconnectCookie: *mut ARC_SC_PRIVATE_PACKET,
    pub PrintReconnectCookie: BOOL,
    pub padding0896: [UINT64; 59usize],
    pub ClientTimeZone: *mut TIME_ZONE_INFORMATION,
    pub DynamicDSTTimeZoneKeyName: *mut ::std::os::raw::c_char,
    pub DynamicDaylightTimeDisabled: BOOL,
    pub padding0960: [UINT64; 61usize],
    pub PerformanceFlags: UINT32,
    pub __bindgen_padding_56: u32,
    pub AllowFontSmoothing: BOOL,
    pub __bindgen_padding_57: u32,
    pub DisableWallpaper: BOOL,
    pub __bindgen_padding_58: u32,
    pub DisableFullWindowDrag: BOOL,
    pub __bindgen_padding_59: u32,
    pub DisableMenuAnims: BOOL,
    pub __bindgen_padding_60: u32,
    pub DisableThemes: BOOL,
    pub __bindgen_padding_61: u32,
    pub DisableCursorShadow: BOOL,
    pub __bindgen_padding_62: u32,
    pub DisableCursorBlinking: BOOL,
    pub __bindgen_padding_63: u32,
    pub AllowDesktopComposition: BOOL,
    pub padding1024: [UINT64; 55usize],
    pub RemoteAssistanceMode: BOOL,
    pub RemoteAssistanceSessionId: *mut ::std::os::raw::c_char,
    pub RemoteAssistancePassStub: *mut ::std::os::raw::c_char,
    pub RemoteAssistancePassword: *mut ::std::os::raw::c_char,
    pub RemoteAssistanceRCTicket: *mut ::std::os::raw::c_char,
    pub EncomspVirtualChannel: BOOL,
    pub __bindgen_padding_64: u32,
    pub RemdeskVirtualChannel: BOOL,
    pub __bindgen_padding_65: u32,
    pub LyncRdpMode: BOOL,
    pub __bindgen_padding_66: u32,
    pub RemoteAssistanceRequestControl: BOOL,
    pub padding1088: [UINT64; 55usize],
    #[doc = " X.224 Connection Request/Confirm"]
    pub TlsSecurity: BOOL,
    pub __bindgen_padding_67: u32,
    pub NlaSecurity: BOOL,
    pub __bindgen_padding_68: u32,
    pub RdpSecurity: BOOL,
    pub __bindgen_padding_69: u32,
    pub ExtSecurity: BOOL,
    pub __bindgen_padding_70: u32,
    pub Authentication: BOOL,
    pub __bindgen_padding_71: u32,
    pub RequestedProtocols: UINT32,
    pub __bindgen_padding_72: u32,
    pub SelectedProtocol: UINT32,
    pub __bindgen_padding_73: u32,
    pub NegotiationFlags: UINT32,
    pub __bindgen_padding_74: u32,
    pub NegotiateSecurityLayer: BOOL,
    pub __bindgen_padding_75: u32,
    pub RestrictedAdminModeRequired: BOOL,
    pub AuthenticationServiceClass: *mut ::std::os::raw::c_char,
    pub DisableCredentialsDelegation: BOOL,
    pub __bindgen_padding_76: u32,
    pub AuthenticationLevel: UINT32,
    pub AllowedTlsCiphers: *mut ::std::os::raw::c_char,
    pub VmConnectMode: BOOL,
    pub NtlmSamFile: *mut ::std::os::raw::c_char,
    pub FIPSMode: BOOL,
    pub __bindgen_padding_77: u32,
    pub TlsSecLevel: UINT32,
    pub padding1152: [UINT64; 46usize],
    pub MstscCookieMode: BOOL,
    pub __bindgen_padding_78: u32,
    pub CookieMaxLength: UINT32,
    pub __bindgen_padding_79: u32,
    pub PreconnectionId: UINT32,
    pub PreconnectionBlob: *mut ::std::os::raw::c_char,
    pub SendPreconnectionPdu: BOOL,
    pub padding1216: [UINT64; 59usize],
    pub RedirectionFlags: UINT32,
    pub TargetNetAddress: *mut ::std::os::raw::c_char,
    pub LoadBalanceInfo: *mut BYTE,
    pub LoadBalanceInfoLength: UINT32,
    pub RedirectionUsername: *mut ::std::os::raw::c_char,
    pub RedirectionDomain: *mut ::std::os::raw::c_char,
    pub RedirectionPassword: *mut BYTE,
    pub RedirectionPasswordLength: UINT32,
    pub RedirectionTargetFQDN: *mut ::std::os::raw::c_char,
    pub RedirectionTargetNetBiosName: *mut ::std::os::raw::c_char,
    pub RedirectionTsvUrl: *mut BYTE,
    pub RedirectionTsvUrlLength: UINT32,
    pub __bindgen_padding_80: u32,
    pub TargetNetAddressCount: UINT32,
    pub TargetNetAddresses: *mut *mut ::std::os::raw::c_char,
    pub TargetNetPorts: *mut UINT32,
    pub RedirectionAcceptedCert: *mut ::std::os::raw::c_char,
    pub RedirectionAcceptedCertLength: UINT32,
    pub __bindgen_padding_81: u32,
    pub RedirectionPreferType: UINT32,
    pub padding1280: [UINT64; 46usize],
    #[doc = " Security"]
    pub Password51: *mut BYTE,
    pub Password51Length: UINT32,
    pub __bindgen_padding_82: u32,
    pub SmartcardLogon: BOOL,
    pub __bindgen_padding_83: u32,
    pub PromptForCredentials: BOOL,
    pub padding1344: [UINT64; 60usize],
    pub KerberosKdc: *mut ::std::os::raw::c_char,
    pub KerberosRealm: *mut ::std::os::raw::c_char,
    pub padding1408: [UINT64; 62usize],
    pub IgnoreCertificate: BOOL,
    pub CertificateName: *mut ::std::os::raw::c_char,
    pub CertificateFile: *mut ::std::os::raw::c_char,
    pub PrivateKeyFile: *mut ::std::os::raw::c_char,
    pub RdpKeyFile: *mut ::std::os::raw::c_char,
    pub RdpServerRsaKey: *mut rdpRsaKey,
    pub RdpServerCertificate: *mut rdpCertificate,
    pub ExternalCertificateManagement: BOOL,
    pub CertificateContent: *mut ::std::os::raw::c_char,
    pub PrivateKeyContent: *mut ::std::os::raw::c_char,
    pub RdpKeyContent: *mut ::std::os::raw::c_char,
    pub AutoAcceptCertificate: BOOL,
    pub __bindgen_padding_84: u32,
    pub AutoDenyCertificate: BOOL,
    pub CertificateAcceptedFingerprints: *mut ::std::os::raw::c_char,
    pub padding1472: [UINT64; 50usize],
    pub padding1536: [UINT64; 64usize],
    #[doc = " User Interface"]
    pub Workarea: BOOL,
    pub __bindgen_padding_85: u32,
    pub Fullscreen: BOOL,
    pub __bindgen_padding_86: u32,
    pub PercentScreen: UINT32,
    pub __bindgen_padding_87: u32,
    pub GrabKeyboard: BOOL,
    pub __bindgen_padding_88: u32,
    pub Decorations: BOOL,
    pub __bindgen_padding_89: u32,
    pub MouseMotion: BOOL,
    pub WindowTitle: *mut ::std::os::raw::c_char,
    pub ParentWindowId: UINT64,
    pub AsyncInput: BOOL,
    pub __bindgen_padding_90: u32,
    pub AsyncUpdate: BOOL,
    pub __bindgen_padding_91: u32,
    pub AsyncChannels: BOOL,
    pub padding1548: [UINT64; 1usize],
    pub ToggleFullscreen: BOOL,
    pub WmClass: *mut ::std::os::raw::c_char,
    pub EmbeddedWindow: BOOL,
    pub __bindgen_padding_92: u32,
    pub SmartSizing: BOOL,
    pub __bindgen_padding_93: u32,
    pub XPan: INT32,
    pub __bindgen_padding_94: u32,
    pub YPan: INT32,
    pub __bindgen_padding_95: u32,
    pub SmartSizingWidth: UINT32,
    pub __bindgen_padding_96: u32,
    pub SmartSizingHeight: UINT32,
    pub __bindgen_padding_97: u32,
    pub PercentScreenUseWidth: BOOL,
    pub __bindgen_padding_98: u32,
    pub PercentScreenUseHeight: BOOL,
    pub __bindgen_padding_99: u32,
    pub DynamicResolutionUpdate: BOOL,
    pub padding1601: [UINT64; 42usize],
    pub SoftwareGdi: BOOL,
    pub __bindgen_padding_100: u32,
    pub LocalConnection: BOOL,
    pub __bindgen_padding_101: u32,
    pub AuthenticationOnly: BOOL,
    pub __bindgen_padding_102: u32,
    pub CredentialsFromStdin: BOOL,
    pub __bindgen_padding_103: u32,
    pub UnmapButtons: BOOL,
    pub __bindgen_padding_104: u32,
    pub OldLicenseBehaviour: BOOL,
    pub padding1664: [UINT64; 57usize],
    pub ComputerName: *mut ::std::os::raw::c_char,
    pub padding1728: [UINT64; 63usize],
    pub ConnectionFile: *mut ::std::os::raw::c_char,
    pub AssistanceFile: *mut ::std::os::raw::c_char,
    pub padding1792: [UINT64; 62usize],
    pub HomePath: *mut ::std::os::raw::c_char,
    pub ConfigPath: *mut ::std::os::raw::c_char,
    pub CurrentPath: *mut ::std::os::raw::c_char,
    pub padding1856: [UINT64; 61usize],
    pub DumpRemoteFx: BOOL,
    pub __bindgen_padding_105: u32,
    pub PlayRemoteFx: BOOL,
    pub DumpRemoteFxFile: *mut ::std::os::raw::c_char,
    pub PlayRemoteFxFile: *mut ::std::os::raw::c_char,
    pub padding1920: [UINT64; 60usize],
    pub padding1984: [UINT64; 64usize],
    #[doc = " Gateway"]
    pub GatewayUsageMethod: UINT32,
    pub __bindgen_padding_106: u32,
    pub GatewayPort: UINT32,
    pub GatewayHostname: *mut ::std::os::raw::c_char,
    pub GatewayUsername: *mut ::std::os::raw::c_char,
    pub GatewayPassword: *mut ::std::os::raw::c_char,
    pub GatewayDomain: *mut ::std::os::raw::c_char,
    pub GatewayCredentialsSource: UINT32,
    pub __bindgen_padding_107: u32,
    pub GatewayUseSameCredentials: BOOL,
    pub __bindgen_padding_108: u32,
    pub GatewayEnabled: BOOL,
    pub __bindgen_padding_109: u32,
    pub GatewayBypassLocal: BOOL,
    pub __bindgen_padding_110: u32,
    pub GatewayRpcTransport: BOOL,
    pub __bindgen_padding_111: u32,
    pub GatewayHttpTransport: BOOL,
    pub __bindgen_padding_112: u32,
    pub GatewayUdpTransport: BOOL,
    pub GatewayAccessToken: *mut ::std::os::raw::c_char,
    pub GatewayAcceptedCert: *mut ::std::os::raw::c_char,
    pub GatewayAcceptedCertLength: UINT32,
    pub __bindgen_padding_113: u32,
    pub GatewayHttpUseWebsockets: BOOL,
    pub padding2015: [UINT64; 14usize],
    pub ProxyType: UINT32,
    pub ProxyHostname: *mut ::std::os::raw::c_char,
    pub ProxyPort: UINT16,
    pub ProxyUsername: *mut ::std::os::raw::c_char,
    pub ProxyPassword: *mut ::std::os::raw::c_char,
    pub padding2112: [UINT64; 92usize],
    #[doc = " RemoteApp"]
    pub RemoteApplicationMode: BOOL,
    pub RemoteApplicationName: *mut ::std::os::raw::c_char,
    pub RemoteApplicationIcon: *mut ::std::os::raw::c_char,
    pub RemoteApplicationProgram: *mut ::std::os::raw::c_char,
    pub RemoteApplicationFile: *mut ::std::os::raw::c_char,
    pub RemoteApplicationGuid: *mut ::std::os::raw::c_char,
    pub RemoteApplicationCmdLine: *mut ::std::os::raw::c_char,
    pub RemoteApplicationExpandCmdLine: UINT32,
    pub __bindgen_padding_114: u32,
    pub RemoteApplicationExpandWorkingDir: UINT32,
    pub __bindgen_padding_115: u32,
    pub DisableRemoteAppCapsCheck: BOOL,
    pub __bindgen_padding_116: u32,
    pub RemoteAppNumIconCaches: UINT32,
    pub __bindgen_padding_117: u32,
    pub RemoteAppNumIconCacheEntries: UINT32,
    pub __bindgen_padding_118: u32,
    pub RemoteAppLanguageBarSupported: BOOL,
    pub __bindgen_padding_119: u32,
    pub RemoteWndSupportLevel: UINT32,
    pub __bindgen_padding_120: u32,
    pub RemoteApplicationSupportLevel: UINT32,
    pub __bindgen_padding_121: u32,
    pub RemoteApplicationSupportMask: UINT32,
    pub RemoteApplicationWorkingDir: *mut ::std::os::raw::c_char,
    pub padding2176: [UINT64; 47usize],
    pub padding2240: [UINT64; 64usize],
    #[doc = " Mandatory Capabilities"]
    pub ReceivedCapabilities: *mut BYTE,
    pub ReceivedCapabilitiesSize: UINT32,
    pub padding2304: [UINT64; 62usize],
    pub OsMajorType: UINT32,
    pub __bindgen_padding_122: u32,
    pub OsMinorType: UINT32,
    pub __bindgen_padding_123: u32,
    pub RefreshRect: BOOL,
    pub __bindgen_padding_124: u32,
    pub SuppressOutput: BOOL,
    pub __bindgen_padding_125: u32,
    pub FastPathOutput: BOOL,
    pub __bindgen_padding_126: u32,
    pub SaltedChecksum: BOOL,
    pub __bindgen_padding_127: u32,
    pub LongCredentialsSupported: BOOL,
    pub __bindgen_padding_128: u32,
    pub NoBitmapCompressionHeader: BOOL,
    pub __bindgen_padding_129: u32,
    pub BitmapCompressionDisabled: BOOL,
    pub padding2368: [UINT64; 55usize],
    pub DesktopResize: BOOL,
    pub __bindgen_padding_130: u32,
    pub DrawAllowDynamicColorFidelity: BOOL,
    pub __bindgen_padding_131: u32,
    pub DrawAllowColorSubsampling: BOOL,
    pub __bindgen_padding_132: u32,
    pub DrawAllowSkipAlpha: BOOL,
    pub padding2432: [UINT64; 60usize],
    pub OrderSupport: *mut BYTE,
    pub BitmapCacheV3Enabled: BOOL,
    pub __bindgen_padding_133: u32,
    pub AltSecFrameMarkerSupport: BOOL,
    pub __bindgen_padding_134: u32,
    pub AllowUnanouncedOrdersFromServer: BOOL,
    pub padding2497: [UINT64; 61usize],
    pub BitmapCacheEnabled: BOOL,
    pub __bindgen_padding_135: u32,
    pub BitmapCacheVersion: UINT32,
    pub __bindgen_padding_136: u32,
    pub AllowCacheWaitingList: BOOL,
    pub __bindgen_padding_137: u32,
    pub BitmapCachePersistEnabled: BOOL,
    pub __bindgen_padding_138: u32,
    pub BitmapCacheV2NumCells: UINT32,
    pub BitmapCacheV2CellInfo: *mut BITMAP_CACHE_V2_CELL_INFO,
    pub padding2560: [UINT64; 57usize],
    pub ColorPointerFlag: BOOL,
    pub __bindgen_padding_139: u32,
    pub PointerCacheSize: UINT32,
    pub padding2624: [UINT64; 60usize],
    pub KeyboardRemappingList: *mut ::std::os::raw::c_char,
    pub KeyboardCodePage: UINT32,
    pub __bindgen_padding_140: u32,
    pub KeyboardLayout: UINT32,
    pub __bindgen_padding_141: u32,
    pub KeyboardType: UINT32,
    pub __bindgen_padding_142: u32,
    pub KeyboardSubType: UINT32,
    pub __bindgen_padding_143: u32,
    pub KeyboardFunctionKey: UINT32,
    pub ImeFileName: *mut ::std::os::raw::c_char,
    pub UnicodeInput: BOOL,
    pub __bindgen_padding_144: u32,
    pub FastPathInput: BOOL,
    pub __bindgen_padding_145: u32,
    pub MultiTouchInput: BOOL,
    pub __bindgen_padding_146: u32,
    pub MultiTouchGestures: BOOL,
    pub __bindgen_padding_147: u32,
    pub KeyboardHook: UINT32,
    pub __bindgen_padding_148: u32,
    pub HasHorizontalWheel: BOOL,
    pub __bindgen_padding_149: u32,
    pub HasExtendedMouseEvent: BOOL,
    pub padding2688: [UINT64; 52usize],
    pub BrushSupportLevel: UINT32,
    pub padding2752: [UINT64; 63usize],
    pub GlyphSupportLevel: UINT32,
    pub GlyphCache: *mut GLYPH_CACHE_DEFINITION,
    pub FragCache: *mut GLYPH_CACHE_DEFINITION,
    pub padding2816: [UINT64; 61usize],
    pub OffscreenSupportLevel: UINT32,
    pub __bindgen_padding_150: u32,
    pub OffscreenCacheSize: UINT32,
    pub __bindgen_padding_151: u32,
    pub OffscreenCacheEntries: UINT32,
    pub padding2880: [UINT64; 61usize],
    pub VirtualChannelCompressionFlags: UINT32,
    pub __bindgen_padding_152: u32,
    pub VirtualChannelChunkSize: UINT32,
    pub padding2944: [UINT64; 62usize],
    pub SoundBeepsEnabled: BOOL,
    pub padding3008: [UINT64; 63usize],
    pub padding3072: [UINT64; 64usize],
    #[doc = " Optional Capabilities"]
    pub padding3136: [UINT64; 64usize],
    pub padding3200: [UINT64; 64usize],
    pub padding3264: [UINT64; 64usize],
    pub padding3328: [UINT64; 64usize],
    pub MultifragMaxRequestSize: UINT32,
    pub padding3392: [UINT64; 63usize],
    pub LargePointerFlag: UINT32,
    pub padding3456: [UINT64; 63usize],
    pub CompDeskSupportLevel: UINT32,
    pub padding3520: [UINT64; 63usize],
    pub SurfaceCommandsEnabled: BOOL,
    pub __bindgen_padding_153: u32,
    pub FrameMarkerCommandEnabled: BOOL,
    pub __bindgen_padding_154: u32,
    pub SurfaceFrameMarkerEnabled: BOOL,
    pub padding3584: [UINT64; 61usize],
    pub padding3648: [UINT64; 64usize],
    pub RemoteFxOnly: BOOL,
    pub __bindgen_padding_155: u32,
    pub RemoteFxCodec: BOOL,
    pub __bindgen_padding_156: u32,
    pub RemoteFxCodecId: UINT32,
    pub __bindgen_padding_157: u32,
    pub RemoteFxCodecMode: UINT32,
    pub __bindgen_padding_158: u32,
    pub RemoteFxImageCodec: BOOL,
    pub __bindgen_padding_159: u32,
    pub RemoteFxCaptureFlags: UINT32,
    pub padding3712: [UINT64; 58usize],
    pub NSCodec: BOOL,
    pub __bindgen_padding_160: u32,
    pub NSCodecId: UINT32,
    pub __bindgen_padding_161: u32,
    pub FrameAcknowledge: UINT32,
    pub __bindgen_padding_162: u32,
    pub NSCodecColorLossLevel: UINT32,
    pub __bindgen_padding_163: u32,
    pub NSCodecAllowSubsampling: BOOL,
    pub __bindgen_padding_164: u32,
    pub NSCodecAllowDynamicColorFidelity: BOOL,
    pub padding3776: [UINT64; 58usize],
    pub JpegCodec: BOOL,
    pub __bindgen_padding_165: u32,
    pub JpegCodecId: UINT32,
    pub __bindgen_padding_166: u32,
    pub JpegQuality: UINT32,
    pub padding3840: [UINT64; 61usize],
    pub GfxThinClient: BOOL,
    pub __bindgen_padding_167: u32,
    pub GfxSmallCache: BOOL,
    pub __bindgen_padding_168: u32,
    pub GfxProgressive: BOOL,
    pub __bindgen_padding_169: u32,
    pub GfxProgressiveV2: BOOL,
    pub __bindgen_padding_170: u32,
    pub GfxH264: BOOL,
    pub __bindgen_padding_171: u32,
    pub GfxAVC444: BOOL,
    pub __bindgen_padding_172: u32,
    pub GfxSendQoeAck: BOOL,
    pub __bindgen_padding_173: u32,
    pub GfxAVC444v2: BOOL,
    pub __bindgen_padding_174: u32,
    pub GfxCapsFilter: UINT32,
    pub padding3904: [UINT64; 55usize],
    #[doc = " Caches"]
    pub BitmapCacheV3CodecId: UINT32,
    pub padding3968: [UINT64; 63usize],
    pub DrawNineGridEnabled: BOOL,
    pub __bindgen_padding_175: u32,
    pub DrawNineGridCacheSize: UINT32,
    pub __bindgen_padding_176: u32,
    pub DrawNineGridCacheEntries: UINT32,
    pub padding4032: [UINT64; 61usize],
    pub DrawGdiPlusEnabled: BOOL,
    pub __bindgen_padding_177: u32,
    pub DrawGdiPlusCacheEnabled: BOOL,
    pub padding4096: [UINT64; 62usize],
    pub padding4160: [UINT64; 64usize],
    #[doc = " Device Redirection"]
    pub DeviceRedirection: BOOL,
    pub __bindgen_padding_178: u32,
    pub DeviceCount: UINT32,
    pub __bindgen_padding_179: u32,
    pub DeviceArraySize: UINT32,
    pub DeviceArray: *mut *mut RDPDR_DEVICE,
    pub padding4288: [UINT64; 124usize],
    pub RedirectDrives: BOOL,
    pub __bindgen_padding_180: u32,
    pub RedirectHomeDrive: BOOL,
    pub DrivesToRedirect: *mut ::std::os::raw::c_char,
    pub padding4416: [UINT64; 125usize],
    pub RedirectSmartCards: BOOL,
    pub padding4544: [UINT64; 127usize],
    pub RedirectPrinters: BOOL,
    pub padding4672: [UINT64; 127usize],
    pub RedirectSerialPorts: BOOL,
    pub __bindgen_padding_181: u32,
    pub RedirectParallelPorts: BOOL,
    pub __bindgen_padding_182: u32,
    pub PreferIPv6OverIPv4: BOOL,
    pub padding4800: [UINT64; 125usize],
    #[doc = " Other Redirection"]
    pub RedirectClipboard: BOOL,
    pub padding4928: [UINT64; 127usize],
    #[doc = " Static Virtual Channels"]
    pub StaticChannelCount: UINT32,
    pub __bindgen_padding_183: u32,
    pub StaticChannelArraySize: UINT32,
    pub StaticChannelArray: *mut *mut ADDIN_ARGV,
    pub padding5056: [UINT64; 125usize],
    #[doc = " Dynamic Virtual Channels"]
    pub DynamicChannelCount: UINT32,
    pub __bindgen_padding_184: u32,
    pub DynamicChannelArraySize: UINT32,
    pub DynamicChannelArray: *mut *mut ADDIN_ARGV,
    pub SupportDynamicChannels: BOOL,
    pub padding5184: [UINT64; 124usize],
    pub SupportEchoChannel: BOOL,
    pub __bindgen_padding_185: u32,
    pub SupportDisplayControl: BOOL,
    pub __bindgen_padding_186: u32,
    pub SupportGeometryTracking: BOOL,
    pub __bindgen_padding_187: u32,
    pub SupportSSHAgentChannel: BOOL,
    pub __bindgen_padding_188: u32,
    pub SupportVideoOptimized: BOOL,
    pub RDP2TCPArgs: *mut ::std::os::raw::c_char,
    pub TcpKeepAlive: BOOL,
    pub __bindgen_padding_189: u32,
    pub TcpKeepAliveRetries: UINT32,
    pub __bindgen_padding_190: u32,
    pub TcpKeepAliveDelay: UINT32,
    pub __bindgen_padding_191: u32,
    pub TcpKeepAliveInterval: UINT32,
    pub __bindgen_padding_192: u32,
    pub TcpAckTimeout: UINT32,
    pub padding5312: [UINT64; 117usize],
    #[doc = " WARNING: End of ABI stable zone!"]
    #[doc = ""]
    #[doc = " The zone below this point is ABI unstable, and"]
    #[doc = " is therefore potentially subject to ABI breakage."]
    pub num_extensions: INT32,
    pub extensions: [rdp_ext_set; 16usize],
    pub SettingsModified: *mut BYTE,
    pub ActionScript: *mut ::std::os::raw::c_char,
    pub Floatbar: DWORD,
    pub XSelectionAtom: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rdp_settings() {
    assert_eq!(
        ::std::mem::size_of::<rdp_settings>(),
        46760usize,
        concat!("Size of: ", stringify!(rdp_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_settings>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).instance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding001 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding001)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ServerMode as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ShareId as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ShareId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PduSource as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PduSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ServerPort as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ServerHostname as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerHostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Username as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Password as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Domain as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PasswordHash as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PasswordHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).WaitForOutputBufferFlush as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(WaitForOutputBufferFlush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MaxTimeInCheckLoop as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MaxTimeInCheckLoop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AcceptedCert as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AcceptedCert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AcceptedCertLength as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AcceptedCertLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0064 as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0064)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0128 as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0128)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RdpVersion as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RdpVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopWidth as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopHeight as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ColorDepth as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ColorDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ConnectionType as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ConnectionType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientBuild as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientBuild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientHostname as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientHostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientProductId as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientProductId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).EarlyCapabilityFlags as *const _ as usize
        },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(EarlyCapabilityFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NetworkAutoDetect as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NetworkAutoDetect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportAsymetricKeys as *const _ as usize
        },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportAsymetricKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportErrorInfoPdu as *const _ as usize
        },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportErrorInfoPdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportStatusInfoPdu as *const _ as usize
        },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportStatusInfoPdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportMonitorLayoutPdu as *const _ as usize
        },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportMonitorLayoutPdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportGraphicsPipeline as *const _ as usize
        },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportGraphicsPipeline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportDynamicTimeZone as *const _ as usize
        },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportDynamicTimeZone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportHeartbeatPdu as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportHeartbeatPdu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DesktopPhysicalWidth as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopPhysicalWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DesktopPhysicalHeight as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopPhysicalHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopOrientation as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopOrientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopScaleFactor as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopScaleFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DeviceScaleFactor as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DeviceScaleFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0192 as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0192)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).UseRdpSecurityLayer as *const _ as usize
        },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(UseRdpSecurityLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).EncryptionMethods as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(EncryptionMethods)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ExtEncryptionMethods as *const _ as usize
        },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ExtEncryptionMethods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).EncryptionLevel as *const _ as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(EncryptionLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ServerRandom as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerRandom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ServerRandomLength as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerRandomLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ServerCertificate as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ServerCertificateLength as *const _ as usize
        },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerCertificateLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientRandom as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientRandom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientRandomLength as *const _ as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientRandomLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0256 as *const _ as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0256)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ChannelCount as *const _ as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ChannelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ChannelDefArraySize as *const _ as usize
        },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ChannelDefArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ChannelDefArray as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ChannelDefArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0320 as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0320)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClusterInfoFlags as *const _ as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClusterInfoFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectedSessionId as *const _ as usize
        },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectedSessionId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ConsoleSession as *const _ as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ConsoleSession)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0384 as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0384)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MonitorCount as *const _ as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MonitorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).MonitorDefArraySize as *const _ as usize
        },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MonitorDefArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MonitorDefArray as *const _ as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MonitorDefArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SpanMonitors as *const _ as usize },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SpanMonitors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).UseMultimon as *const _ as usize },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(UseMultimon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ForceMultimon as *const _ as usize },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ForceMultimon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopPosX as *const _ as usize },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopPosX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopPosY as *const _ as usize },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopPosY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ListMonitors as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ListMonitors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MonitorIds as *const _ as usize },
        3144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MonitorIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NumMonitorIds as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NumMonitorIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MonitorLocalShiftX as *const _ as usize },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MonitorLocalShiftX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MonitorLocalShiftY as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MonitorLocalShiftY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).HasMonitorAttributes as *const _ as usize
        },
        3176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(HasMonitorAttributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0448 as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0448)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0512 as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0512)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).MultitransportFlags as *const _ as usize
        },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MultitransportFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportMultitransport as *const _ as usize
        },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportMultitransport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0576 as *const _ as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0576)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0640 as *const _ as usize },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0640)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AlternateShell as *const _ as usize },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AlternateShell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ShellWorkingDirectory as *const _ as usize
        },
        5128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ShellWorkingDirectory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0704 as *const _ as usize },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0704)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AutoLogonEnabled as *const _ as usize },
        5632usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AutoLogonEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CompressionEnabled as *const _ as usize },
        5640usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CompressionEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DisableCtrlAltDel as *const _ as usize },
        5648usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableCtrlAltDel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).EnableWindowsKey as *const _ as usize },
        5656usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(EnableWindowsKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MaximizeShell as *const _ as usize },
        5664usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MaximizeShell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).LogonNotify as *const _ as usize },
        5672usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LogonNotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).LogonErrors as *const _ as usize },
        5680usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LogonErrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MouseAttached as *const _ as usize },
        5688usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MouseAttached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MouseHasWheel as *const _ as usize },
        5696usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MouseHasWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RemoteConsoleAudio as *const _ as usize },
        5704usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteConsoleAudio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AudioPlayback as *const _ as usize },
        5712usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AudioPlayback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AudioCapture as *const _ as usize },
        5720usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AudioCapture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).VideoDisable as *const _ as usize },
        5728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(VideoDisable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).PasswordIsSmartcardPin as *const _ as usize
        },
        5736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PasswordIsSmartcardPin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).UsingSavedCredentials as *const _ as usize
        },
        5744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(UsingSavedCredentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ForceEncryptedCsPdu as *const _ as usize
        },
        5752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ForceEncryptedCsPdu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).HiDefRemoteApp as *const _ as usize },
        5760usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(HiDefRemoteApp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CompressionLevel as *const _ as usize },
        5768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CompressionLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0768 as *const _ as usize },
        5776usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0768)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).IPv6Enabled as *const _ as usize },
        6144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(IPv6Enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientAddress as *const _ as usize },
        6152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientDir as *const _ as usize },
        6160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0832 as *const _ as usize },
        6168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0832)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AutoReconnectionEnabled as *const _ as usize
        },
        6656usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AutoReconnectionEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AutoReconnectMaxRetries as *const _ as usize
        },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AutoReconnectMaxRetries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ClientAutoReconnectCookie as *const _ as usize
        },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientAutoReconnectCookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ServerAutoReconnectCookie as *const _ as usize
        },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ServerAutoReconnectCookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).PrintReconnectCookie as *const _ as usize
        },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PrintReconnectCookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0896 as *const _ as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0896)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ClientTimeZone as *const _ as usize },
        7168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ClientTimeZone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DynamicDSTTimeZoneKeyName as *const _ as usize
        },
        7176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DynamicDSTTimeZoneKeyName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DynamicDaylightTimeDisabled as *const _
                as usize
        },
        7184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DynamicDaylightTimeDisabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding0960 as *const _ as usize },
        7192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding0960)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PerformanceFlags as *const _ as usize },
        7680usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PerformanceFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AllowFontSmoothing as *const _ as usize },
        7688usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AllowFontSmoothing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DisableWallpaper as *const _ as usize },
        7696usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableWallpaper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DisableFullWindowDrag as *const _ as usize
        },
        7704usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableFullWindowDrag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DisableMenuAnims as *const _ as usize },
        7712usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableMenuAnims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DisableThemes as *const _ as usize },
        7720usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableThemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DisableCursorShadow as *const _ as usize
        },
        7728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableCursorShadow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DisableCursorBlinking as *const _ as usize
        },
        7736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableCursorBlinking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AllowDesktopComposition as *const _ as usize
        },
        7744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AllowDesktopComposition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1024 as *const _ as usize },
        7752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1024)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAssistanceMode as *const _ as usize
        },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAssistanceMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAssistanceSessionId as *const _ as usize
        },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAssistanceSessionId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAssistancePassStub as *const _ as usize
        },
        8208usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAssistancePassStub)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAssistancePassword as *const _ as usize
        },
        8216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAssistancePassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAssistanceRCTicket as *const _ as usize
        },
        8224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAssistanceRCTicket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).EncomspVirtualChannel as *const _ as usize
        },
        8232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(EncomspVirtualChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemdeskVirtualChannel as *const _ as usize
        },
        8240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemdeskVirtualChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).LyncRdpMode as *const _ as usize },
        8248usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LyncRdpMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAssistanceRequestControl as *const _
                as usize
        },
        8256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAssistanceRequestControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1088 as *const _ as usize },
        8264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1088)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TlsSecurity as *const _ as usize },
        8704usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TlsSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NlaSecurity as *const _ as usize },
        8712usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NlaSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RdpSecurity as *const _ as usize },
        8720usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RdpSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ExtSecurity as *const _ as usize },
        8728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ExtSecurity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Authentication as *const _ as usize },
        8736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Authentication)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RequestedProtocols as *const _ as usize },
        8744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RequestedProtocols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SelectedProtocol as *const _ as usize },
        8752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SelectedProtocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NegotiationFlags as *const _ as usize },
        8760usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NegotiationFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).NegotiateSecurityLayer as *const _ as usize
        },
        8768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NegotiateSecurityLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RestrictedAdminModeRequired as *const _
                as usize
        },
        8776usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RestrictedAdminModeRequired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AuthenticationServiceClass as *const _ as usize
        },
        8784usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AuthenticationServiceClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DisableCredentialsDelegation as *const _
                as usize
        },
        8792usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableCredentialsDelegation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AuthenticationLevel as *const _ as usize
        },
        8800usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AuthenticationLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AllowedTlsCiphers as *const _ as usize },
        8808usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AllowedTlsCiphers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).VmConnectMode as *const _ as usize },
        8816usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(VmConnectMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NtlmSamFile as *const _ as usize },
        8824usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NtlmSamFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).FIPSMode as *const _ as usize },
        8832usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(FIPSMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TlsSecLevel as *const _ as usize },
        8840usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TlsSecLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1152 as *const _ as usize },
        8848usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1152)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MstscCookieMode as *const _ as usize },
        9216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MstscCookieMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CookieMaxLength as *const _ as usize },
        9224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CookieMaxLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PreconnectionId as *const _ as usize },
        9232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PreconnectionId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PreconnectionBlob as *const _ as usize },
        9240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PreconnectionBlob)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SendPreconnectionPdu as *const _ as usize
        },
        9248usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SendPreconnectionPdu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1216 as *const _ as usize },
        9256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1216)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectionFlags as *const _ as usize },
        9728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TargetNetAddress as *const _ as usize },
        9736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TargetNetAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).LoadBalanceInfo as *const _ as usize },
        9744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LoadBalanceInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).LoadBalanceInfoLength as *const _ as usize
        },
        9752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LoadBalanceInfoLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionUsername as *const _ as usize
        },
        9760usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionUsername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectionDomain as *const _ as usize },
        9768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionPassword as *const _ as usize
        },
        9776usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionPasswordLength as *const _ as usize
        },
        9784usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionPasswordLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionTargetFQDN as *const _ as usize
        },
        9792usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionTargetFQDN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionTargetNetBiosName as *const _
                as usize
        },
        9800usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionTargetNetBiosName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectionTsvUrl as *const _ as usize },
        9808usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionTsvUrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionTsvUrlLength as *const _ as usize
        },
        9816usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionTsvUrlLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).TargetNetAddressCount as *const _ as usize
        },
        9824usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TargetNetAddressCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TargetNetAddresses as *const _ as usize },
        9832usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TargetNetAddresses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TargetNetPorts as *const _ as usize },
        9840usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TargetNetPorts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionAcceptedCert as *const _ as usize
        },
        9848usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionAcceptedCert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionAcceptedCertLength as *const _
                as usize
        },
        9856usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionAcceptedCertLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectionPreferType as *const _ as usize
        },
        9864usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectionPreferType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1280 as *const _ as usize },
        9872usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1280)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Password51 as *const _ as usize },
        10240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Password51)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Password51Length as *const _ as usize },
        10248usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Password51Length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SmartcardLogon as *const _ as usize },
        10256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SmartcardLogon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).PromptForCredentials as *const _ as usize
        },
        10264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PromptForCredentials)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1344 as *const _ as usize },
        10272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1344)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KerberosKdc as *const _ as usize },
        10752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KerberosKdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KerberosRealm as *const _ as usize },
        10760usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KerberosRealm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1408 as *const _ as usize },
        10768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1408)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).IgnoreCertificate as *const _ as usize },
        11264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(IgnoreCertificate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CertificateName as *const _ as usize },
        11272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CertificateName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CertificateFile as *const _ as usize },
        11280usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CertificateFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PrivateKeyFile as *const _ as usize },
        11288usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PrivateKeyFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RdpKeyFile as *const _ as usize },
        11296usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RdpKeyFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RdpServerRsaKey as *const _ as usize },
        11304usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RdpServerRsaKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RdpServerCertificate as *const _ as usize
        },
        11312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RdpServerCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ExternalCertificateManagement as *const _
                as usize
        },
        11320usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ExternalCertificateManagement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CertificateContent as *const _ as usize },
        11328usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CertificateContent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PrivateKeyContent as *const _ as usize },
        11336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PrivateKeyContent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RdpKeyContent as *const _ as usize },
        11344usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RdpKeyContent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AutoAcceptCertificate as *const _ as usize
        },
        11352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AutoAcceptCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AutoDenyCertificate as *const _ as usize
        },
        11360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AutoDenyCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).CertificateAcceptedFingerprints as *const _
                as usize
        },
        11368usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CertificateAcceptedFingerprints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1472 as *const _ as usize },
        11376usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1472)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1536 as *const _ as usize },
        11776usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1536)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Workarea as *const _ as usize },
        12288usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Workarea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Fullscreen as *const _ as usize },
        12296usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Fullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PercentScreen as *const _ as usize },
        12304usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PercentScreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GrabKeyboard as *const _ as usize },
        12312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GrabKeyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Decorations as *const _ as usize },
        12320usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Decorations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MouseMotion as *const _ as usize },
        12328usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MouseMotion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).WindowTitle as *const _ as usize },
        12336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(WindowTitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ParentWindowId as *const _ as usize },
        12344usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ParentWindowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AsyncInput as *const _ as usize },
        12352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AsyncInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AsyncUpdate as *const _ as usize },
        12360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AsyncUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AsyncChannels as *const _ as usize },
        12368usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AsyncChannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1548 as *const _ as usize },
        12376usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1548)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ToggleFullscreen as *const _ as usize },
        12384usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ToggleFullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).WmClass as *const _ as usize },
        12392usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(WmClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).EmbeddedWindow as *const _ as usize },
        12400usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(EmbeddedWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SmartSizing as *const _ as usize },
        12408usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SmartSizing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).XPan as *const _ as usize },
        12416usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(XPan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).YPan as *const _ as usize },
        12424usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(YPan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SmartSizingWidth as *const _ as usize },
        12432usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SmartSizingWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SmartSizingHeight as *const _ as usize },
        12440usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SmartSizingHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).PercentScreenUseWidth as *const _ as usize
        },
        12448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PercentScreenUseWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).PercentScreenUseHeight as *const _ as usize
        },
        12456usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PercentScreenUseHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DynamicResolutionUpdate as *const _ as usize
        },
        12464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DynamicResolutionUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1601 as *const _ as usize },
        12472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1601)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SoftwareGdi as *const _ as usize },
        12808usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SoftwareGdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).LocalConnection as *const _ as usize },
        12816usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LocalConnection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AuthenticationOnly as *const _ as usize },
        12824usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AuthenticationOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).CredentialsFromStdin as *const _ as usize
        },
        12832usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CredentialsFromStdin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).UnmapButtons as *const _ as usize },
        12840usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(UnmapButtons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).OldLicenseBehaviour as *const _ as usize
        },
        12848usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OldLicenseBehaviour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1664 as *const _ as usize },
        12856usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1664)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ComputerName as *const _ as usize },
        13312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ComputerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1728 as *const _ as usize },
        13320usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1728)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ConnectionFile as *const _ as usize },
        13824usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ConnectionFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).AssistanceFile as *const _ as usize },
        13832usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AssistanceFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1792 as *const _ as usize },
        13840usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1792)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).HomePath as *const _ as usize },
        14336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(HomePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ConfigPath as *const _ as usize },
        14344usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ConfigPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).CurrentPath as *const _ as usize },
        14352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CurrentPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1856 as *const _ as usize },
        14360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1856)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DumpRemoteFx as *const _ as usize },
        14848usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DumpRemoteFx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PlayRemoteFx as *const _ as usize },
        14856usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PlayRemoteFx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DumpRemoteFxFile as *const _ as usize },
        14864usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DumpRemoteFxFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PlayRemoteFxFile as *const _ as usize },
        14872usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PlayRemoteFxFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1920 as *const _ as usize },
        14880usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1920)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding1984 as *const _ as usize },
        15360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding1984)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayUsageMethod as *const _ as usize },
        15872usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayUsageMethod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayPort as *const _ as usize },
        15880usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayHostname as *const _ as usize },
        15888usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayHostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayUsername as *const _ as usize },
        15896usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayUsername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayPassword as *const _ as usize },
        15904usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayPassword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayDomain as *const _ as usize },
        15912usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayCredentialsSource as *const _ as usize
        },
        15920usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayCredentialsSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayUseSameCredentials as *const _ as usize
        },
        15928usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayUseSameCredentials)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayEnabled as *const _ as usize },
        15936usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayBypassLocal as *const _ as usize },
        15944usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayBypassLocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayRpcTransport as *const _ as usize
        },
        15952usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayRpcTransport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayHttpTransport as *const _ as usize
        },
        15960usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayHttpTransport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayUdpTransport as *const _ as usize
        },
        15968usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayUdpTransport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GatewayAccessToken as *const _ as usize },
        15976usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayAccessToken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayAcceptedCert as *const _ as usize
        },
        15984usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayAcceptedCert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayAcceptedCertLength as *const _ as usize
        },
        15992usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayAcceptedCertLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).GatewayHttpUseWebsockets as *const _ as usize
        },
        16000usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GatewayHttpUseWebsockets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2015 as *const _ as usize },
        16008usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2015)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ProxyType as *const _ as usize },
        16120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ProxyType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ProxyHostname as *const _ as usize },
        16128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ProxyHostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ProxyPort as *const _ as usize },
        16136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ProxyPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ProxyUsername as *const _ as usize },
        16144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ProxyUsername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ProxyPassword as *const _ as usize },
        16152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ProxyPassword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2112 as *const _ as usize },
        16160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2112)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationMode as *const _ as usize
        },
        16896usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationName as *const _ as usize
        },
        16904usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationIcon as *const _ as usize
        },
        16912usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationIcon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationProgram as *const _ as usize
        },
        16920usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationProgram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationFile as *const _ as usize
        },
        16928usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationFile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationGuid as *const _ as usize
        },
        16936usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationGuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationCmdLine as *const _ as usize
        },
        16944usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationCmdLine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationExpandCmdLine as *const _
                as usize
        },
        16952usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationExpandCmdLine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationExpandWorkingDir as *const _
                as usize
        },
        16960usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationExpandWorkingDir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DisableRemoteAppCapsCheck as *const _ as usize
        },
        16968usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DisableRemoteAppCapsCheck)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAppNumIconCaches as *const _ as usize
        },
        16976usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAppNumIconCaches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAppNumIconCacheEntries as *const _
                as usize
        },
        16984usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAppNumIconCacheEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteAppLanguageBarSupported as *const _
                as usize
        },
        16992usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteAppLanguageBarSupported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteWndSupportLevel as *const _ as usize
        },
        17000usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteWndSupportLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationSupportLevel as *const _
                as usize
        },
        17008usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationSupportLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationSupportMask as *const _
                as usize
        },
        17016usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationSupportMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteApplicationWorkingDir as *const _
                as usize
        },
        17024usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteApplicationWorkingDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2176 as *const _ as usize },
        17032usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2176)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2240 as *const _ as usize },
        17408usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2240)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ReceivedCapabilities as *const _ as usize
        },
        17920usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ReceivedCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).ReceivedCapabilitiesSize as *const _ as usize
        },
        17928usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ReceivedCapabilitiesSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2304 as *const _ as usize },
        17936usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2304)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).OsMajorType as *const _ as usize },
        18432usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OsMajorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).OsMinorType as *const _ as usize },
        18440usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OsMinorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RefreshRect as *const _ as usize },
        18448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RefreshRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SuppressOutput as *const _ as usize },
        18456usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SuppressOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).FastPathOutput as *const _ as usize },
        18464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(FastPathOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SaltedChecksum as *const _ as usize },
        18472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SaltedChecksum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).LongCredentialsSupported as *const _ as usize
        },
        18480usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LongCredentialsSupported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).NoBitmapCompressionHeader as *const _ as usize
        },
        18488usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NoBitmapCompressionHeader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).BitmapCompressionDisabled as *const _ as usize
        },
        18496usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCompressionDisabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2368 as *const _ as usize },
        18504usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2368)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DesktopResize as *const _ as usize },
        18944usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DesktopResize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DrawAllowDynamicColorFidelity as *const _
                as usize
        },
        18952usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawAllowDynamicColorFidelity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DrawAllowColorSubsampling as *const _ as usize
        },
        18960usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawAllowColorSubsampling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DrawAllowSkipAlpha as *const _ as usize },
        18968usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawAllowSkipAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2432 as *const _ as usize },
        18976usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2432)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).OrderSupport as *const _ as usize },
        19456usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OrderSupport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).BitmapCacheV3Enabled as *const _ as usize
        },
        19464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCacheV3Enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AltSecFrameMarkerSupport as *const _ as usize
        },
        19472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AltSecFrameMarkerSupport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AllowUnanouncedOrdersFromServer as *const _
                as usize
        },
        19480usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AllowUnanouncedOrdersFromServer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2497 as *const _ as usize },
        19488usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2497)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).BitmapCacheEnabled as *const _ as usize },
        19976usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCacheEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).BitmapCacheVersion as *const _ as usize },
        19984usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCacheVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).AllowCacheWaitingList as *const _ as usize
        },
        19992usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(AllowCacheWaitingList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).BitmapCachePersistEnabled as *const _ as usize
        },
        20000usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCachePersistEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).BitmapCacheV2NumCells as *const _ as usize
        },
        20008usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCacheV2NumCells)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).BitmapCacheV2CellInfo as *const _ as usize
        },
        20016usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCacheV2CellInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2560 as *const _ as usize },
        20024usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2560)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ColorPointerFlag as *const _ as usize },
        20480usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ColorPointerFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PointerCacheSize as *const _ as usize },
        20488usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PointerCacheSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2624 as *const _ as usize },
        20496usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2624)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).KeyboardRemappingList as *const _ as usize
        },
        20976usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardRemappingList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KeyboardCodePage as *const _ as usize },
        20984usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardCodePage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KeyboardLayout as *const _ as usize },
        20992usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KeyboardType as *const _ as usize },
        21000usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KeyboardSubType as *const _ as usize },
        21008usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardSubType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).KeyboardFunctionKey as *const _ as usize
        },
        21016usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardFunctionKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ImeFileName as *const _ as usize },
        21024usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ImeFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).UnicodeInput as *const _ as usize },
        21032usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(UnicodeInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).FastPathInput as *const _ as usize },
        21040usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(FastPathInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MultiTouchInput as *const _ as usize },
        21048usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MultiTouchInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).MultiTouchGestures as *const _ as usize },
        21056usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MultiTouchGestures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).KeyboardHook as *const _ as usize },
        21064usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(KeyboardHook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).HasHorizontalWheel as *const _ as usize },
        21072usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(HasHorizontalWheel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).HasExtendedMouseEvent as *const _ as usize
        },
        21080usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(HasExtendedMouseEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2688 as *const _ as usize },
        21088usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2688)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).BrushSupportLevel as *const _ as usize },
        21504usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BrushSupportLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2752 as *const _ as usize },
        21512usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2752)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GlyphSupportLevel as *const _ as usize },
        22016usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GlyphSupportLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GlyphCache as *const _ as usize },
        22024usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GlyphCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).FragCache as *const _ as usize },
        22032usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(FragCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2816 as *const _ as usize },
        22040usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2816)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).OffscreenSupportLevel as *const _ as usize
        },
        22528usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OffscreenSupportLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).OffscreenCacheSize as *const _ as usize },
        22536usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OffscreenCacheSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).OffscreenCacheEntries as *const _ as usize
        },
        22544usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(OffscreenCacheEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2880 as *const _ as usize },
        22552usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2880)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).VirtualChannelCompressionFlags as *const _
                as usize
        },
        23040usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(VirtualChannelCompressionFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).VirtualChannelChunkSize as *const _ as usize
        },
        23048usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(VirtualChannelChunkSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding2944 as *const _ as usize },
        23056usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding2944)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SoundBeepsEnabled as *const _ as usize },
        23552usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SoundBeepsEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3008 as *const _ as usize },
        23560usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3008)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3072 as *const _ as usize },
        24064usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3072)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3136 as *const _ as usize },
        24576usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3136)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3200 as *const _ as usize },
        25088usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3200)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3264 as *const _ as usize },
        25600usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3264)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3328 as *const _ as usize },
        26112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3328)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).MultifragMaxRequestSize as *const _ as usize
        },
        26624usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(MultifragMaxRequestSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3392 as *const _ as usize },
        26632usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3392)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).LargePointerFlag as *const _ as usize },
        27136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(LargePointerFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3456 as *const _ as usize },
        27144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3456)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).CompDeskSupportLevel as *const _ as usize
        },
        27648usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(CompDeskSupportLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3520 as *const _ as usize },
        27656usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3520)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SurfaceCommandsEnabled as *const _ as usize
        },
        28160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SurfaceCommandsEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).FrameMarkerCommandEnabled as *const _ as usize
        },
        28168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(FrameMarkerCommandEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SurfaceFrameMarkerEnabled as *const _ as usize
        },
        28176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SurfaceFrameMarkerEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3584 as *const _ as usize },
        28184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3584)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3648 as *const _ as usize },
        28672usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3648)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RemoteFxOnly as *const _ as usize },
        29184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteFxOnly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RemoteFxCodec as *const _ as usize },
        29192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteFxCodec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RemoteFxCodecId as *const _ as usize },
        29200usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteFxCodecId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RemoteFxCodecMode as *const _ as usize },
        29208usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteFxCodecMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RemoteFxImageCodec as *const _ as usize },
        29216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteFxImageCodec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RemoteFxCaptureFlags as *const _ as usize
        },
        29224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RemoteFxCaptureFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3712 as *const _ as usize },
        29232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3712)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NSCodec as *const _ as usize },
        29696usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NSCodec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).NSCodecId as *const _ as usize },
        29704usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NSCodecId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).FrameAcknowledge as *const _ as usize },
        29712usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(FrameAcknowledge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).NSCodecColorLossLevel as *const _ as usize
        },
        29720usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NSCodecColorLossLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).NSCodecAllowSubsampling as *const _ as usize
        },
        29728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NSCodecAllowSubsampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).NSCodecAllowDynamicColorFidelity as *const _
                as usize
        },
        29736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(NSCodecAllowDynamicColorFidelity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3776 as *const _ as usize },
        29744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3776)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).JpegCodec as *const _ as usize },
        30208usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(JpegCodec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).JpegCodecId as *const _ as usize },
        30216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(JpegCodecId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).JpegQuality as *const _ as usize },
        30224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(JpegQuality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3840 as *const _ as usize },
        30232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3840)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxThinClient as *const _ as usize },
        30720usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxThinClient)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxSmallCache as *const _ as usize },
        30728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxSmallCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxProgressive as *const _ as usize },
        30736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxProgressive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxProgressiveV2 as *const _ as usize },
        30744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxProgressiveV2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxH264 as *const _ as usize },
        30752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxH264)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxAVC444 as *const _ as usize },
        30760usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxAVC444)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxSendQoeAck as *const _ as usize },
        30768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxSendQoeAck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxAVC444v2 as *const _ as usize },
        30776usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxAVC444v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).GfxCapsFilter as *const _ as usize },
        30784usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(GfxCapsFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3904 as *const _ as usize },
        30792usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3904)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).BitmapCacheV3CodecId as *const _ as usize
        },
        31232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(BitmapCacheV3CodecId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding3968 as *const _ as usize },
        31240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding3968)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DrawNineGridEnabled as *const _ as usize
        },
        31744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawNineGridEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DrawNineGridCacheSize as *const _ as usize
        },
        31752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawNineGridCacheSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DrawNineGridCacheEntries as *const _ as usize
        },
        31760usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawNineGridCacheEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4032 as *const _ as usize },
        31768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4032)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DrawGdiPlusEnabled as *const _ as usize },
        32256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawGdiPlusEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DrawGdiPlusCacheEnabled as *const _ as usize
        },
        32264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrawGdiPlusCacheEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4096 as *const _ as usize },
        32272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4096)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4160 as *const _ as usize },
        32768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4160)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DeviceRedirection as *const _ as usize },
        33280usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DeviceRedirection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DeviceCount as *const _ as usize },
        33288usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DeviceCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DeviceArraySize as *const _ as usize },
        33296usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DeviceArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DeviceArray as *const _ as usize },
        33304usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DeviceArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4288 as *const _ as usize },
        33312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4288)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectDrives as *const _ as usize },
        34304usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectDrives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectHomeDrive as *const _ as usize },
        34312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectHomeDrive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).DrivesToRedirect as *const _ as usize },
        34320usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DrivesToRedirect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4416 as *const _ as usize },
        34328usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4416)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectSmartCards as *const _ as usize },
        35328usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectSmartCards)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4544 as *const _ as usize },
        35336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4544)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectPrinters as *const _ as usize },
        36352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectPrinters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4672 as *const _ as usize },
        36360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4672)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectSerialPorts as *const _ as usize
        },
        37376usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectSerialPorts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).RedirectParallelPorts as *const _ as usize
        },
        37384usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectParallelPorts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).PreferIPv6OverIPv4 as *const _ as usize },
        37392usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(PreferIPv6OverIPv4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4800 as *const _ as usize },
        37400usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4800)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RedirectClipboard as *const _ as usize },
        38400usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RedirectClipboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding4928 as *const _ as usize },
        38408usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding4928)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).StaticChannelCount as *const _ as usize },
        39424usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(StaticChannelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).StaticChannelArraySize as *const _ as usize
        },
        39432usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(StaticChannelArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).StaticChannelArray as *const _ as usize },
        39440usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(StaticChannelArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding5056 as *const _ as usize },
        39448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding5056)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DynamicChannelCount as *const _ as usize
        },
        40448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DynamicChannelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DynamicChannelArraySize as *const _ as usize
        },
        40456usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DynamicChannelArraySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).DynamicChannelArray as *const _ as usize
        },
        40464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(DynamicChannelArray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportDynamicChannels as *const _ as usize
        },
        40472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportDynamicChannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding5184 as *const _ as usize },
        40480usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding5184)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SupportEchoChannel as *const _ as usize },
        41472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportEchoChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportDisplayControl as *const _ as usize
        },
        41480usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportDisplayControl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportGeometryTracking as *const _ as usize
        },
        41488usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportGeometryTracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportSSHAgentChannel as *const _ as usize
        },
        41496usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportSSHAgentChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).SupportVideoOptimized as *const _ as usize
        },
        41504usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SupportVideoOptimized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).RDP2TCPArgs as *const _ as usize },
        41512usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(RDP2TCPArgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TcpKeepAlive as *const _ as usize },
        41520usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TcpKeepAlive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).TcpKeepAliveRetries as *const _ as usize
        },
        41528usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TcpKeepAliveRetries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TcpKeepAliveDelay as *const _ as usize },
        41536usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TcpKeepAliveDelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_settings>())).TcpKeepAliveInterval as *const _ as usize
        },
        41544usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TcpKeepAliveInterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).TcpAckTimeout as *const _ as usize },
        41552usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(TcpAckTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).padding5312 as *const _ as usize },
        41560usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(padding5312)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).num_extensions as *const _ as usize },
        42496usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(num_extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).extensions as *const _ as usize },
        42504usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).SettingsModified as *const _ as usize },
        46728usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(SettingsModified)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).ActionScript as *const _ as usize },
        46736usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(ActionScript)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).Floatbar as *const _ as usize },
        46744usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(Floatbar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_settings>())).XSelectionAtom as *const _ as usize },
        46752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_settings),
            "::",
            stringify!(XSelectionAtom)
        )
    );
}
pub type rdpSettings = rdp_settings;
extern "C" {
    pub fn freerdp_settings_new(flags: DWORD) -> *mut rdpSettings;
}
extern "C" {
    pub fn freerdp_settings_clone(settings: *const rdpSettings) -> *mut rdpSettings;
}
extern "C" {
    pub fn freerdp_settings_copy(dst: *mut rdpSettings, src: *const rdpSettings) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_free(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_addin_set_argument(
        args: *mut ADDIN_ARGV,
        argument: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_addin_replace_argument(
        args: *mut ADDIN_ARGV,
        previous: *mut ::std::os::raw::c_char,
        argument: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_addin_set_argument_value(
        args: *mut ADDIN_ARGV,
        option: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_addin_replace_argument_value(
        args: *mut ADDIN_ARGV,
        previous: *mut ::std::os::raw::c_char,
        option: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_device_collection_add(
        settings: *mut rdpSettings,
        device: *mut RDPDR_DEVICE,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_device_collection_find(
        settings: *mut rdpSettings,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RDPDR_DEVICE;
}
extern "C" {
    pub fn freerdp_device_collection_find_type(
        settings: *mut rdpSettings,
        type_: UINT32,
    ) -> *mut RDPDR_DEVICE;
}
extern "C" {
    pub fn freerdp_device_clone(device: *mut RDPDR_DEVICE) -> *mut RDPDR_DEVICE;
}
extern "C" {
    pub fn freerdp_device_collection_free(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_static_channel_collection_add(
        settings: *mut rdpSettings,
        channel: *mut ADDIN_ARGV,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_static_channel_collection_find(
        settings: *mut rdpSettings,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ADDIN_ARGV;
}
extern "C" {
    pub fn freerdp_static_channel_clone(channel: *mut ADDIN_ARGV) -> *mut ADDIN_ARGV;
}
extern "C" {
    pub fn freerdp_static_channel_collection_free(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_dynamic_channel_collection_add(
        settings: *mut rdpSettings,
        channel: *mut ADDIN_ARGV,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_dynamic_channel_collection_find(
        settings: *mut rdpSettings,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ADDIN_ARGV;
}
extern "C" {
    pub fn freerdp_dynamic_channel_clone(channel: *mut ADDIN_ARGV) -> *mut ADDIN_ARGV;
}
extern "C" {
    pub fn freerdp_dynamic_channel_collection_free(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_target_net_addresses_free(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_performance_flags_make(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_performance_flags_split(settings: *mut rdpSettings);
}
extern "C" {
    pub fn freerdp_set_gateway_usage_method(
        settings: *mut rdpSettings,
        GatewayUsageMethod: UINT32,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_update_gateway_usage_method(
        settings: *mut rdpSettings,
        GatewayEnabled: UINT32,
        GatewayBypassLocal: UINT32,
    );
}
extern "C" {
    pub fn freerdp_get_param_bool(settings: *const rdpSettings, id: ::std::os::raw::c_int) -> BOOL;
}
extern "C" {
    pub fn freerdp_set_param_bool(
        settings: *mut rdpSettings,
        id: ::std::os::raw::c_int,
        param: BOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_get_param_int(
        settings: *const rdpSettings,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_set_param_int(
        settings: *mut rdpSettings,
        id: ::std::os::raw::c_int,
        param: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_get_param_uint32(
        settings: *const rdpSettings,
        id: ::std::os::raw::c_int,
    ) -> UINT32;
}
extern "C" {
    pub fn freerdp_set_param_uint32(
        settings: *mut rdpSettings,
        id: ::std::os::raw::c_int,
        param: UINT32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_get_param_uint64(
        settings: *const rdpSettings,
        id: ::std::os::raw::c_int,
    ) -> UINT64;
}
extern "C" {
    pub fn freerdp_set_param_uint64(
        settings: *mut rdpSettings,
        id: ::std::os::raw::c_int,
        param: UINT64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_get_param_string(
        settings: *const rdpSettings,
        id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_set_param_string(
        settings: *mut rdpSettings,
        id: ::std::os::raw::c_int,
        param: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_settings_get_bool(settings: *const rdpSettings, id: size_t) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_set_bool(settings: *mut rdpSettings, id: size_t, param: BOOL) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_int16(settings: *const rdpSettings, id: size_t) -> INT16;
}
extern "C" {
    pub fn freerdp_settings_set_int16(settings: *mut rdpSettings, id: size_t, param: INT16)
        -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_uint16(settings: *const rdpSettings, id: size_t) -> UINT16;
}
extern "C" {
    pub fn freerdp_settings_set_uint16(
        settings: *mut rdpSettings,
        id: size_t,
        param: UINT16,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_int32(settings: *const rdpSettings, id: size_t) -> INT32;
}
extern "C" {
    pub fn freerdp_settings_set_int32(settings: *mut rdpSettings, id: size_t, param: INT32)
        -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_uint32(settings: *const rdpSettings, id: size_t) -> UINT32;
}
extern "C" {
    pub fn freerdp_settings_set_uint32(
        settings: *mut rdpSettings,
        id: size_t,
        param: UINT32,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_int64(settings: *const rdpSettings, id: size_t) -> INT64;
}
extern "C" {
    pub fn freerdp_settings_set_int64(settings: *mut rdpSettings, id: size_t, param: INT64)
        -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_uint64(settings: *const rdpSettings, id: size_t) -> UINT64;
}
extern "C" {
    pub fn freerdp_settings_set_uint64(
        settings: *mut rdpSettings,
        id: size_t,
        param: UINT64,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_string(
        settings: *const rdpSettings,
        id: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_settings_set_string(
        settings: *mut rdpSettings,
        id: size_t,
        param: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_pointer(
        settings: *const rdpSettings,
        id: size_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn freerdp_settings_set_value_for_name(
        settings: *mut rdpSettings,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_settings_get_key_for_name(value: *const ::std::os::raw::c_char) -> SSIZE_T;
}
extern "C" {
    pub fn freerdp_settings_get_type_for_name(value: *const ::std::os::raw::c_char) -> SSIZE_T;
}
extern "C" {
    pub fn freerdp_settings_get_type_for_key(key: size_t) -> SSIZE_T;
}
extern "C" {
    pub fn freerdp_settings_get_name_for_key(key: size_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDP_RECT {
    pub x: INT16,
    pub y: INT16,
    pub width: INT16,
    pub height: INT16,
}
#[test]
fn bindgen_test_layout__RDP_RECT() {
    assert_eq!(
        ::std::mem::size_of::<_RDP_RECT>(),
        8usize,
        concat!("Size of: ", stringify!(_RDP_RECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDP_RECT>(),
        2usize,
        concat!("Alignment of ", stringify!(_RDP_RECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_RECT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_RECT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_RECT>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_RECT),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_RECT>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_RECT),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_RECT>())).height as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_RECT),
            "::",
            stringify!(height)
        )
    );
}
pub type RDP_RECT = _RDP_RECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RECTANGLE_16 {
    pub left: UINT16,
    pub top: UINT16,
    pub right: UINT16,
    pub bottom: UINT16,
}
#[test]
fn bindgen_test_layout__RECTANGLE_16() {
    assert_eq!(
        ::std::mem::size_of::<_RECTANGLE_16>(),
        8usize,
        concat!("Size of: ", stringify!(_RECTANGLE_16))
    );
    assert_eq!(
        ::std::mem::align_of::<_RECTANGLE_16>(),
        2usize,
        concat!("Alignment of ", stringify!(_RECTANGLE_16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RECTANGLE_16>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RECTANGLE_16),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RECTANGLE_16>())).top as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RECTANGLE_16),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RECTANGLE_16>())).right as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RECTANGLE_16),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RECTANGLE_16>())).bottom as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RECTANGLE_16),
            "::",
            stringify!(bottom)
        )
    );
}
pub type RECTANGLE_16 = _RECTANGLE_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
extern "C" {
    pub fn GetLine(
        lineptr: *mut *mut ::std::os::raw::c_char,
        size: *mut size_t,
        stream: *mut FILE,
    ) -> INT64;
}
extern "C" {
    pub fn GetProcessHeap() -> HANDLE;
}
extern "C" {
    pub fn GetSecurityDescriptorLength(pSecurityDescriptor: PSECURITY_DESCRIPTOR) -> DWORD;
}
extern "C" {
    pub fn GetSecurityDescriptorControl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pControl: PSECURITY_DESCRIPTOR_CONTROL,
        lpdwRevision: LPDWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn GetSecurityDescriptorDacl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpbDaclPresent: LPBOOL,
        pDacl: *mut PACL,
        lpbDaclDefaulted: LPBOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn GetSecurityDescriptorGroup(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pGroup: *mut PSID,
        lpbGroupDefaulted: LPBOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn GetSecurityDescriptorOwner(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pOwner: *mut PSID,
        lpbOwnerDefaulted: LPBOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn GetSecurityDescriptorRMControl(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        RMControl: PUCHAR,
    ) -> DWORD;
}
extern "C" {
    pub fn GetSecurityDescriptorSacl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpbSaclPresent: LPBOOL,
        pSacl: *mut PACL,
        lpbSaclDefaulted: LPBOOL,
    ) -> BOOL;
}
extern "C" {
    pub fn CloseHandle(hObject: HANDLE) -> BOOL;
}
extern "C" {
    pub fn GetHandleInformation(hObject: HANDLE, lpdwFlags: LPDWORD) -> BOOL;
}
extern "C" {
    pub fn CreateMutexA(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        bInitialOwner: BOOL,
        lpName: LPCSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateMutexW(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        bInitialOwner: BOOL,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateMutexExA(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateMutexExW(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateSemaphoreA(
        lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
        lInitialCount: LONG,
        lMaximumCount: LONG,
        lpName: LPCSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateSemaphoreW(
        lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
        lInitialCount: LONG,
        lMaximumCount: LONG,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateEventA(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        lpName: LPCSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateEventW(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateEventExA(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateEventExW(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CRITICAL_SECTION {
    pub DebugInfo: PVOID,
    pub LockCount: LONG,
    pub RecursionCount: LONG,
    pub OwningThread: HANDLE,
    pub LockSemaphore: HANDLE,
    pub SpinCount: ULONG_PTR,
}
#[test]
fn bindgen_test_layout__RTL_CRITICAL_SECTION() {
    assert_eq!(
        ::std::mem::size_of::<_RTL_CRITICAL_SECTION>(),
        40usize,
        concat!("Size of: ", stringify!(_RTL_CRITICAL_SECTION))
    );
    assert_eq!(
        ::std::mem::align_of::<_RTL_CRITICAL_SECTION>(),
        8usize,
        concat!("Alignment of ", stringify!(_RTL_CRITICAL_SECTION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RTL_CRITICAL_SECTION>())).DebugInfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CRITICAL_SECTION),
            "::",
            stringify!(DebugInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RTL_CRITICAL_SECTION>())).LockCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CRITICAL_SECTION),
            "::",
            stringify!(LockCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RTL_CRITICAL_SECTION>())).RecursionCount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CRITICAL_SECTION),
            "::",
            stringify!(RecursionCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RTL_CRITICAL_SECTION>())).OwningThread as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CRITICAL_SECTION),
            "::",
            stringify!(OwningThread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RTL_CRITICAL_SECTION>())).LockSemaphore as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CRITICAL_SECTION),
            "::",
            stringify!(LockSemaphore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RTL_CRITICAL_SECTION>())).SpinCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_CRITICAL_SECTION),
            "::",
            stringify!(SpinCount)
        )
    );
}
pub type RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION;
pub type CRITICAL_SECTION = RTL_CRITICAL_SECTION;
extern "C" {
    pub fn WaitOnAddress(
        Address: *mut ::std::os::raw::c_void,
        CompareAddress: PVOID,
        AddressSize: SIZE_T,
        dwMilliseconds: DWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;
}
extern "C" {
    pub fn WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL)
        -> DWORD;
}
extern "C" {
    pub fn WaitForMultipleObjects(
        nCount: DWORD,
        lpHandles: *const HANDLE,
        bWaitAll: BOOL,
        dwMilliseconds: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn WaitForMultipleObjectsEx(
        nCount: DWORD,
        lpHandles: *const HANDLE,
        bWaitAll: BOOL,
        dwMilliseconds: DWORD,
        bAlertable: BOOL,
    ) -> DWORD;
}
extern "C" {
    pub fn CreateWaitableTimerA(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        lpTimerName: LPCSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateWaitableTimerW(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        lpTimerName: LPCWSTR,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateWaitableTimerExA(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        lpTimerName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateWaitableTimerExW(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        lpTimerName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
pub type WAITORTIMERCALLBACK =
    ::std::option::Option<unsafe extern "C" fn(lpParameter: PVOID, TimerOrWaitFired: BOOLEAN)>;
extern "C" {
    pub fn CreateTimerQueue() -> HANDLE;
}
extern "C" {
    pub fn CreateTimerQueueTimer(
        phNewTimer: PHANDLE,
        TimerQueue: HANDLE,
        Callback: WAITORTIMERCALLBACK,
        Parameter: PVOID,
        DueTime: DWORD,
        Period: DWORD,
        Flags: ULONG,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateFileDescriptorEventW(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        FileDescriptor: ::std::os::raw::c_int,
        mode: ULONG,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateFileDescriptorEventA(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        FileDescriptor: ::std::os::raw::c_int,
        mode: ULONG,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateWaitObjectEvent(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        pObject: *mut ::std::os::raw::c_void,
    ) -> HANDLE;
}
extern "C" {
    pub fn GetEventFileDescriptor(hEvent: HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetEventWaitObject(hEvent: HANDLE) -> *mut ::std::os::raw::c_void;
}
pub type wStreamPool = _wStreamPool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wStream {
    pub buffer: *mut BYTE,
    pub pointer: *mut BYTE,
    pub length: size_t,
    pub capacity: size_t,
    pub count: DWORD,
    pub pool: *mut wStreamPool,
    pub isAllocatedStream: BOOL,
    pub isOwner: BOOL,
}
#[test]
fn bindgen_test_layout__wStream() {
    assert_eq!(
        ::std::mem::size_of::<_wStream>(),
        56usize,
        concat!("Size of: ", stringify!(_wStream))
    );
    assert_eq!(
        ::std::mem::align_of::<_wStream>(),
        8usize,
        concat!("Alignment of ", stringify!(_wStream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).pointer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).capacity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).pool as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).isAllocatedStream as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(isAllocatedStream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStream>())).isOwner as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStream),
            "::",
            stringify!(isOwner)
        )
    );
}
pub type wStream = _wStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wStreamPool {
    pub aSize: ::std::os::raw::c_int,
    pub aCapacity: ::std::os::raw::c_int,
    pub aArray: *mut *mut wStream,
    pub uSize: ::std::os::raw::c_int,
    pub uCapacity: ::std::os::raw::c_int,
    pub uArray: *mut *mut wStream,
    pub lock: CRITICAL_SECTION,
    pub synchronized: BOOL,
    pub defaultSize: size_t,
}
#[test]
fn bindgen_test_layout__wStreamPool() {
    assert_eq!(
        ::std::mem::size_of::<_wStreamPool>(),
        88usize,
        concat!("Size of: ", stringify!(_wStreamPool))
    );
    assert_eq!(
        ::std::mem::align_of::<_wStreamPool>(),
        8usize,
        concat!("Alignment of ", stringify!(_wStreamPool))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).aSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(aSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).aCapacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(aCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).aArray as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(aArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).uSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(uSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).uCapacity as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(uCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).uArray as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(uArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).lock as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).synchronized as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(synchronized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wStreamPool>())).defaultSize as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_wStreamPool),
            "::",
            stringify!(defaultSize)
        )
    );
}
pub type OBJECT_NEW_FN = ::std::option::Option<
    unsafe extern "C" fn(val: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type OBJECT_INIT_FN =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void)>;
pub type OBJECT_UNINIT_FN =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void)>;
pub type OBJECT_FREE_FN =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void)>;
pub type OBJECT_EQUALS_FN = ::std::option::Option<
    unsafe extern "C" fn(
        objA: *const ::std::os::raw::c_void,
        objB: *const ::std::os::raw::c_void,
    ) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wObject {
    pub fnObjectNew: OBJECT_NEW_FN,
    pub fnObjectInit: OBJECT_INIT_FN,
    pub fnObjectUninit: OBJECT_UNINIT_FN,
    pub fnObjectFree: OBJECT_FREE_FN,
    pub fnObjectEquals: OBJECT_EQUALS_FN,
}
#[test]
fn bindgen_test_layout__wObject() {
    assert_eq!(
        ::std::mem::size_of::<_wObject>(),
        40usize,
        concat!("Size of: ", stringify!(_wObject))
    );
    assert_eq!(
        ::std::mem::align_of::<_wObject>(),
        8usize,
        concat!("Alignment of ", stringify!(_wObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wObject>())).fnObjectNew as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wObject),
            "::",
            stringify!(fnObjectNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wObject>())).fnObjectInit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wObject),
            "::",
            stringify!(fnObjectInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wObject>())).fnObjectUninit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wObject),
            "::",
            stringify!(fnObjectUninit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wObject>())).fnObjectFree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wObject),
            "::",
            stringify!(fnObjectFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wObject>())).fnObjectEquals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wObject),
            "::",
            stringify!(fnObjectEquals)
        )
    );
}
pub type wObject = _wObject;
pub type wListDictionaryItem = _wListDictionaryItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wListDictionaryItem {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut wListDictionaryItem,
}
#[test]
fn bindgen_test_layout__wListDictionaryItem() {
    assert_eq!(
        ::std::mem::size_of::<_wListDictionaryItem>(),
        24usize,
        concat!("Size of: ", stringify!(_wListDictionaryItem))
    );
    assert_eq!(
        ::std::mem::align_of::<_wListDictionaryItem>(),
        8usize,
        concat!("Alignment of ", stringify!(_wListDictionaryItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionaryItem>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionaryItem),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionaryItem>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionaryItem),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionaryItem>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionaryItem),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wListDictionary {
    pub synchronized: BOOL,
    pub lock: CRITICAL_SECTION,
    pub head: *mut wListDictionaryItem,
    pub objectKey: wObject,
    pub objectValue: wObject,
}
#[test]
fn bindgen_test_layout__wListDictionary() {
    assert_eq!(
        ::std::mem::size_of::<_wListDictionary>(),
        136usize,
        concat!("Size of: ", stringify!(_wListDictionary))
    );
    assert_eq!(
        ::std::mem::align_of::<_wListDictionary>(),
        8usize,
        concat!("Alignment of ", stringify!(_wListDictionary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionary>())).synchronized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionary),
            "::",
            stringify!(synchronized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionary>())).lock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionary),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionary>())).head as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionary),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionary>())).objectKey as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionary),
            "::",
            stringify!(objectKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wListDictionary>())).objectValue as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_wListDictionary),
            "::",
            stringify!(objectValue)
        )
    );
}
pub type wListDictionary = _wListDictionary;
pub type wKeyValuePair = _wKeyValuePair;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wKeyValuePair {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut wKeyValuePair,
}
#[test]
fn bindgen_test_layout__wKeyValuePair() {
    assert_eq!(
        ::std::mem::size_of::<_wKeyValuePair>(),
        24usize,
        concat!("Size of: ", stringify!(_wKeyValuePair))
    );
    assert_eq!(
        ::std::mem::align_of::<_wKeyValuePair>(),
        8usize,
        concat!("Alignment of ", stringify!(_wKeyValuePair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wKeyValuePair>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wKeyValuePair),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wKeyValuePair>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wKeyValuePair),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wKeyValuePair>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wKeyValuePair),
            "::",
            stringify!(next)
        )
    );
}
pub type HASH_TABLE_HASH_FN =
    ::std::option::Option<unsafe extern "C" fn(key: *mut ::std::os::raw::c_void) -> UINT32>;
pub type HASH_TABLE_KEY_COMPARE_FN = ::std::option::Option<
    unsafe extern "C" fn(
        key1: *mut ::std::os::raw::c_void,
        key2: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type HASH_TABLE_VALUE_COMPARE_FN = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *mut ::std::os::raw::c_void,
        value2: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type HASH_TABLE_KEY_CLONE_FN = ::std::option::Option<
    unsafe extern "C" fn(key: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HASH_TABLE_VALUE_CLONE_FN = ::std::option::Option<
    unsafe extern "C" fn(value: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HASH_TABLE_KEY_FREE_FN =
    ::std::option::Option<unsafe extern "C" fn(key: *mut ::std::os::raw::c_void)>;
pub type HASH_TABLE_VALUE_FREE_FN =
    ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wHashTable {
    pub synchronized: BOOL,
    pub lock: CRITICAL_SECTION,
    pub numOfBuckets: ::std::os::raw::c_int,
    pub numOfElements: ::std::os::raw::c_int,
    pub idealRatio: f32,
    pub lowerRehashThreshold: f32,
    pub upperRehashThreshold: f32,
    pub bucketArray: *mut *mut wKeyValuePair,
    pub hash: HASH_TABLE_HASH_FN,
    pub keyCompare: HASH_TABLE_KEY_COMPARE_FN,
    pub valueCompare: HASH_TABLE_VALUE_COMPARE_FN,
    pub keyClone: HASH_TABLE_KEY_CLONE_FN,
    pub valueClone: HASH_TABLE_VALUE_CLONE_FN,
    pub keyFree: HASH_TABLE_KEY_FREE_FN,
    pub valueFree: HASH_TABLE_VALUE_FREE_FN,
}
#[test]
fn bindgen_test_layout__wHashTable() {
    assert_eq!(
        ::std::mem::size_of::<_wHashTable>(),
        136usize,
        concat!("Size of: ", stringify!(_wHashTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_wHashTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_wHashTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).synchronized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(synchronized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).lock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).numOfBuckets as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(numOfBuckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).numOfElements as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(numOfElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).idealRatio as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(idealRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_wHashTable>())).lowerRehashThreshold as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(lowerRehashThreshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_wHashTable>())).upperRehashThreshold as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(upperRehashThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).bucketArray as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(bucketArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).hash as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).keyCompare as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(keyCompare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).valueCompare as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(valueCompare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).keyClone as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(keyClone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).valueClone as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(valueClone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).keyFree as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(keyFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wHashTable>())).valueFree as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_wHashTable),
            "::",
            stringify!(valueFree)
        )
    );
}
pub type wHashTable = _wHashTable;
pub type wMessage = _wMessage;
pub type MESSAGE_FREE_FN = ::std::option::Option<unsafe extern "C" fn(message: *mut wMessage)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wMessage {
    pub id: UINT32,
    pub context: *mut ::std::os::raw::c_void,
    pub wParam: *mut ::std::os::raw::c_void,
    pub lParam: *mut ::std::os::raw::c_void,
    pub time: UINT64,
    pub Free: MESSAGE_FREE_FN,
}
#[test]
fn bindgen_test_layout__wMessage() {
    assert_eq!(
        ::std::mem::size_of::<_wMessage>(),
        48usize,
        concat!("Size of: ", stringify!(_wMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<_wMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(_wMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessage>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessage),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessage>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessage),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessage>())).wParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessage),
            "::",
            stringify!(wParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessage>())).lParam as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessage),
            "::",
            stringify!(lParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessage>())).time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessage),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessage>())).Free as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessage),
            "::",
            stringify!(Free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wMessageQueue {
    pub head: ::std::os::raw::c_int,
    pub tail: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_int,
    pub array: *mut wMessage,
    pub lock: CRITICAL_SECTION,
    pub event: HANDLE,
    pub object: wObject,
}
#[test]
fn bindgen_test_layout__wMessageQueue() {
    assert_eq!(
        ::std::mem::size_of::<_wMessageQueue>(),
        112usize,
        concat!("Size of: ", stringify!(_wMessageQueue))
    );
    assert_eq!(
        ::std::mem::align_of::<_wMessageQueue>(),
        8usize,
        concat!("Alignment of ", stringify!(_wMessageQueue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).tail as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).capacity as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).array as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).lock as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).event as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wMessageQueue>())).object as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_wMessageQueue),
            "::",
            stringify!(object)
        )
    );
}
pub type wMessageQueue = _wMessageQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wEventArgs {
    pub Size: DWORD,
    pub Sender: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__wEventArgs() {
    assert_eq!(
        ::std::mem::size_of::<_wEventArgs>(),
        16usize,
        concat!("Size of: ", stringify!(_wEventArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<_wEventArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(_wEventArgs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wEventArgs>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wEventArgs),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wEventArgs>())).Sender as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wEventArgs),
            "::",
            stringify!(Sender)
        )
    );
}
pub type wEventArgs = _wEventArgs;
pub type pEventHandler = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, e: *mut wEventArgs),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wEventType {
    pub EventName: *const ::std::os::raw::c_char,
    pub EventArgs: wEventArgs,
    pub EventHandlerCount: ::std::os::raw::c_int,
    pub EventHandlers: [pEventHandler; 32usize],
}
#[test]
fn bindgen_test_layout__wEventType() {
    assert_eq!(
        ::std::mem::size_of::<_wEventType>(),
        288usize,
        concat!("Size of: ", stringify!(_wEventType))
    );
    assert_eq!(
        ::std::mem::align_of::<_wEventType>(),
        8usize,
        concat!("Alignment of ", stringify!(_wEventType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wEventType>())).EventName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wEventType),
            "::",
            stringify!(EventName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wEventType>())).EventArgs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wEventType),
            "::",
            stringify!(EventArgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wEventType>())).EventHandlerCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wEventType),
            "::",
            stringify!(EventHandlerCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wEventType>())).EventHandlers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wEventType),
            "::",
            stringify!(EventHandlers)
        )
    );
}
pub type wEventType = _wEventType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wPubSub {
    pub lock: CRITICAL_SECTION,
    pub synchronized: BOOL,
    pub size: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub events: *mut wEventType,
}
#[test]
fn bindgen_test_layout__wPubSub() {
    assert_eq!(
        ::std::mem::size_of::<_wPubSub>(),
        64usize,
        concat!("Size of: ", stringify!(_wPubSub))
    );
    assert_eq!(
        ::std::mem::align_of::<_wPubSub>(),
        8usize,
        concat!("Alignment of ", stringify!(_wPubSub))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wPubSub>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wPubSub),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wPubSub>())).synchronized as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_wPubSub),
            "::",
            stringify!(synchronized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wPubSub>())).size as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_wPubSub),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wPubSub>())).count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_wPubSub),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wPubSub>())).events as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_wPubSub),
            "::",
            stringify!(events)
        )
    );
}
pub type wPubSub = _wPubSub;
extern "C" {
    pub fn PubSub_Lock(pubSub: *mut wPubSub);
}
extern "C" {
    pub fn PubSub_Unlock(pubSub: *mut wPubSub);
}
extern "C" {
    pub fn PubSub_GetEventTypes(
        pubSub: *mut wPubSub,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut wEventType;
}
extern "C" {
    pub fn PubSub_AddEventTypes(
        pubSub: *mut wPubSub,
        events: *mut wEventType,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn PubSub_FindEventType(
        pubSub: *mut wPubSub,
        EventName: *const ::std::os::raw::c_char,
    ) -> *mut wEventType;
}
extern "C" {
    pub fn PubSub_Subscribe(
        pubSub: *mut wPubSub,
        EventName: *const ::std::os::raw::c_char,
        EventHandler: pEventHandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PubSub_Unsubscribe(
        pubSub: *mut wPubSub,
        EventName: *const ::std::os::raw::c_char,
        EventHandler: pEventHandler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PubSub_OnEvent(
        pubSub: *mut wPubSub,
        EventName: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        e: *mut wEventArgs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PubSub_New(synchronized: BOOL) -> *mut wPubSub;
}
extern "C" {
    pub fn PubSub_Free(pubSub: *mut wPubSub);
}
extern "C" {
    pub fn freerdp_get_error_info_string(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_info_name(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_info_category(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_base_string(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_base_name(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_base_category(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_connect_string(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_connect_name(code: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_error_connect_category(code: UINT32) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOA {
    pub cb: DWORD,
    pub lpReserved: LPSTR,
    pub lpDesktop: LPSTR,
    pub lpTitle: LPSTR,
    pub dwX: DWORD,
    pub dwY: DWORD,
    pub dwXSize: DWORD,
    pub dwYSize: DWORD,
    pub dwXCountChars: DWORD,
    pub dwYCountChars: DWORD,
    pub dwFillAttribute: DWORD,
    pub dwFlags: DWORD,
    pub wShowWindow: WORD,
    pub cbReserved2: WORD,
    pub lpReserved2: LPBYTE,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
#[test]
fn bindgen_test_layout__STARTUPINFOA() {
    assert_eq!(
        ::std::mem::size_of::<_STARTUPINFOA>(),
        104usize,
        concat!("Size of: ", stringify!(_STARTUPINFOA))
    );
    assert_eq!(
        ::std::mem::align_of::<_STARTUPINFOA>(),
        8usize,
        concat!("Alignment of ", stringify!(_STARTUPINFOA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).lpReserved as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(lpReserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).lpDesktop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(lpDesktop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).lpTitle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(lpTitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwX as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwY as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwXSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwXSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwYSize as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwYSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwXCountChars as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwXCountChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwYCountChars as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwYCountChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwFillAttribute as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwFillAttribute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).dwFlags as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).wShowWindow as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(wShowWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).cbReserved2 as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(cbReserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).lpReserved2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(lpReserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).hStdInput as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(hStdInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).hStdOutput as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(hStdOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOA>())).hStdError as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOA),
            "::",
            stringify!(hStdError)
        )
    );
}
pub type LPSTARTUPINFOA = *mut _STARTUPINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOW {
    pub cb: DWORD,
    pub lpReserved: LPWSTR,
    pub lpDesktop: LPWSTR,
    pub lpTitle: LPWSTR,
    pub dwX: DWORD,
    pub dwY: DWORD,
    pub dwXSize: DWORD,
    pub dwYSize: DWORD,
    pub dwXCountChars: DWORD,
    pub dwYCountChars: DWORD,
    pub dwFillAttribute: DWORD,
    pub dwFlags: DWORD,
    pub wShowWindow: WORD,
    pub cbReserved2: WORD,
    pub lpReserved2: LPBYTE,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
#[test]
fn bindgen_test_layout__STARTUPINFOW() {
    assert_eq!(
        ::std::mem::size_of::<_STARTUPINFOW>(),
        104usize,
        concat!("Size of: ", stringify!(_STARTUPINFOW))
    );
    assert_eq!(
        ::std::mem::align_of::<_STARTUPINFOW>(),
        8usize,
        concat!("Alignment of ", stringify!(_STARTUPINFOW))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).lpReserved as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(lpReserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).lpDesktop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(lpDesktop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).lpTitle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(lpTitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwX as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwY as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwXSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwXSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwYSize as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwYSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwXCountChars as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwXCountChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwYCountChars as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwYCountChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwFillAttribute as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwFillAttribute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).dwFlags as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).wShowWindow as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(wShowWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).cbReserved2 as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(cbReserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).lpReserved2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(lpReserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).hStdInput as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(hStdInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).hStdOutput as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(hStdOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_STARTUPINFOW>())).hStdError as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_STARTUPINFOW),
            "::",
            stringify!(hStdError)
        )
    );
}
pub type LPSTARTUPINFOW = *mut _STARTUPINFOW;
extern "C" {
    pub fn CreateProcessA(
        lpApplicationName: LPCSTR,
        lpCommandLine: LPSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCSTR,
        lpStartupInfo: LPSTARTUPINFOA,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessW(
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessAsUserA(
        hToken: HANDLE,
        lpApplicationName: LPCSTR,
        lpCommandLine: LPSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCSTR,
        lpStartupInfo: LPSTARTUPINFOA,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessAsUserW(
        hToken: HANDLE,
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessWithLogonA(
        lpUsername: LPCSTR,
        lpDomain: LPCSTR,
        lpPassword: LPCSTR,
        dwLogonFlags: DWORD,
        lpApplicationName: LPCSTR,
        lpCommandLine: LPSTR,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCSTR,
        lpStartupInfo: LPSTARTUPINFOA,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessWithLogonW(
        lpUsername: LPCWSTR,
        lpDomain: LPCWSTR,
        lpPassword: LPCWSTR,
        dwLogonFlags: DWORD,
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessWithTokenA(
        hToken: HANDLE,
        dwLogonFlags: DWORD,
        lpApplicationName: LPCSTR,
        lpCommandLine: LPSTR,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCSTR,
        lpStartupInfo: LPSTARTUPINFOA,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn CreateProcessWithTokenW(
        hToken: HANDLE,
        dwLogonFlags: DWORD,
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
extern "C" {
    pub fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD) -> BOOL;
}
extern "C" {
    pub fn GetCurrentProcessId() -> DWORD;
}
extern "C" {
    pub fn CreateThread(
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        dwStackSize: SIZE_T,
        lpStartAddress: LPTHREAD_START_ROUTINE,
        lpParameter: LPVOID,
        dwCreationFlags: DWORD,
        lpThreadId: LPDWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn CreateRemoteThread(
        hProcess: HANDLE,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        dwStackSize: SIZE_T,
        lpStartAddress: LPTHREAD_START_ROUTINE,
        lpParameter: LPVOID,
        dwCreationFlags: DWORD,
        lpThreadId: LPDWORD,
    ) -> HANDLE;
}
extern "C" {
    pub fn GetExitCodeThread(hThread: HANDLE, lpExitCode: LPDWORD) -> BOOL;
}
extern "C" {
    pub fn GetCurrentThreadId() -> DWORD;
}
extern "C" {
    pub fn GetCurrentProcessorNumber() -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wLogLayout {
    _unused: [u8; 0],
}
pub type wLogLayout = _wLogLayout;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wLogAppender {
    _unused: [u8; 0],
}
pub type wLogAppender = _wLogAppender;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wLog {
    _unused: [u8; 0],
}
pub type wLog = _wLog;
extern "C" {
    pub fn WLog_PrintMessage(
        log: *mut wLog,
        type_: DWORD,
        level: DWORD,
        line: DWORD,
        file: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        ...
    ) -> BOOL;
}
extern "C" {
    pub fn WLog_PrintMessageVA(
        log: *mut wLog,
        type_: DWORD,
        level: DWORD,
        line: DWORD,
        file: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> BOOL;
}
extern "C" {
    pub fn WLog_GetRoot() -> *mut wLog;
}
extern "C" {
    pub fn WLog_Get(name: LPCSTR) -> *mut wLog;
}
extern "C" {
    pub fn WLog_GetLogLevel(log: *mut wLog) -> DWORD;
}
extern "C" {
    pub fn WLog_IsLevelActive(_log: *mut wLog, _log_level: DWORD) -> BOOL;
}
extern "C" {
    pub fn WLog_SetLogLevel(log: *mut wLog, logLevel: DWORD) -> BOOL;
}
extern "C" {
    pub fn WLog_SetStringLogLevel(log: *mut wLog, level: LPCSTR) -> BOOL;
}
extern "C" {
    pub fn WLog_AddStringLogFilters(filter: LPCSTR) -> BOOL;
}
extern "C" {
    pub fn WLog_SetLogAppenderType(log: *mut wLog, logAppenderType: DWORD) -> BOOL;
}
extern "C" {
    pub fn WLog_GetLogAppender(log: *mut wLog) -> *mut wLogAppender;
}
extern "C" {
    pub fn WLog_OpenAppender(log: *mut wLog) -> BOOL;
}
extern "C" {
    pub fn WLog_CloseAppender(log: *mut wLog) -> BOOL;
}
extern "C" {
    pub fn WLog_ConfigureAppender(
        appender: *mut wLogAppender,
        setting: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> BOOL;
}
extern "C" {
    pub fn WLog_GetLogLayout(log: *mut wLog) -> *mut wLogLayout;
}
extern "C" {
    pub fn WLog_Layout_SetPrefixFormat(
        log: *mut wLog,
        layout: *mut wLogLayout,
        format: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn WLog_Init() -> BOOL;
}
extern "C" {
    pub fn WLog_Uninit() -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gdi_palette {
    pub format: UINT32,
    pub palette: [UINT32; 256usize],
}
#[test]
fn bindgen_test_layout_gdi_palette() {
    assert_eq!(
        ::std::mem::size_of::<gdi_palette>(),
        1028usize,
        concat!("Size of: ", stringify!(gdi_palette))
    );
    assert_eq!(
        ::std::mem::align_of::<gdi_palette>(),
        4usize,
        concat!("Alignment of ", stringify!(gdi_palette))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gdi_palette>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gdi_palette),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gdi_palette>())).palette as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gdi_palette),
            "::",
            stringify!(palette)
        )
    );
}
pub type gdiPalette = gdi_palette;
extern "C" {
    #[doc = " @param nWidth    width to copy in pixels"]
    #[doc = " @param nHeight   height to copy in pixels"]
    #[doc = " @param data      source buffer, must be (nWidth + 7) / 8 bytes long"]
    #[doc = ""]
    #[doc = " @return          A buffer allocated with _aligned_malloc(width * height, 16)"]
    #[doc = "                  if successufl, NULL otherwise."]
    pub fn freerdp_glyph_convert(width: UINT32, height: UINT32, data: *const BYTE) -> *mut BYTE;
}
extern "C" {
    #[doc = " @param pDstData  destination buffer"]
    #[doc = " @param DstFormat destination buffer format"]
    #[doc = " @param nDstStep  destination buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXDst     destination buffer offset x"]
    #[doc = " @param nYDst     destination buffer offset y"]
    #[doc = " @param nWidth    width to copy in pixels"]
    #[doc = " @param nHeight   height to copy in pixels"]
    #[doc = " @param pSrcData  source buffer, must be (nWidth + 7) / 8 bytes long"]
    #[doc = " @param backColor The background color in internal representation format"]
    #[doc = " @param foreColor The foreground color in internal representation format"]
    #[doc = " @param palette   palette to use (only used for 8 bit color!)"]
    #[doc = ""]
    #[doc = " @return          TRUE if success, FALSE otherwise"]
    pub fn freerdp_image_copy_from_monochrome(
        pDstData: *mut BYTE,
        DstFormat: UINT32,
        nDstStep: UINT32,
        nXDst: UINT32,
        nYDst: UINT32,
        nWidth: UINT32,
        nHeight: UINT32,
        pSrcData: *const BYTE,
        backColor: UINT32,
        foreColor: UINT32,
        palette: *const gdiPalette,
    ) -> BOOL;
}
extern "C" {
    #[doc = " @param pDstData      destination buffer"]
    #[doc = " @param DstFormat     destination buffer format"]
    #[doc = " @param nDstStep      destination buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXDst         destination buffer offset x"]
    #[doc = " @param nYDst         destination buffer offset y"]
    #[doc = " @param nWidth        width to copy in pixels"]
    #[doc = " @param nHeight       height to copy in pixels"]
    #[doc = " @param bitsColor     icon's image data buffer"]
    #[doc = " @param cbBitsColor   length of the image data buffer in bytes"]
    #[doc = " @param bitsMask      icon's 1bpp image mask buffer"]
    #[doc = " @param cbBitsMask    length of the image mask buffer in bytes"]
    #[doc = " @param colorTable    icon's image color table"]
    #[doc = " @param cbBitsColor   length of the image color table buffer in bytes"]
    #[doc = " @param bpp           color image data bits per pixel"]
    #[doc = ""]
    #[doc = " @return              TRUE if success, FALSE otherwise"]
    pub fn freerdp_image_copy_from_icon_data(
        pDstData: *mut BYTE,
        DstFormat: UINT32,
        nDstStep: UINT32,
        nXDst: UINT32,
        nYDst: UINT32,
        nWidth: UINT16,
        nHeight: UINT16,
        bitsColor: *const BYTE,
        cbBitsColor: UINT16,
        bitsMask: *const BYTE,
        cbBitsMask: UINT16,
        colorTable: *const BYTE,
        cbColorTable: UINT16,
        bpp: UINT32,
    ) -> BOOL;
}
extern "C" {
    #[doc = " @param pDstData      destination buffer"]
    #[doc = " @param DstFormat     destination buffer format"]
    #[doc = " @param nDstStep      destination buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXDst         destination buffer offset x"]
    #[doc = " @param nYDst         destination buffer offset y"]
    #[doc = " @param nWidth        width to copy in pixels"]
    #[doc = " @param nHeight       height to copy in pixels"]
    #[doc = " @param xorMask       XOR mask buffer"]
    #[doc = " @param xorMaskLength XOR mask length in bytes"]
    #[doc = " @param andMask       AND mask buffer"]
    #[doc = " @param andMaskLength AND mask length in bytes"]
    #[doc = " @param xorBpp        XOR bits per pixel"]
    #[doc = " @param palette       palette to use (only used for 8 bit color!)"]
    #[doc = ""]
    #[doc = " @return              TRUE if success, FALSE otherwise"]
    pub fn freerdp_image_copy_from_pointer_data(
        pDstData: *mut BYTE,
        DstFormat: UINT32,
        nDstStep: UINT32,
        nXDst: UINT32,
        nYDst: UINT32,
        nWidth: UINT32,
        nHeight: UINT32,
        xorMask: *const BYTE,
        xorMaskLength: UINT32,
        andMask: *const BYTE,
        andMaskLength: UINT32,
        xorBpp: UINT32,
        palette: *const gdiPalette,
    ) -> BOOL;
}
extern "C" {
    #[doc = " @param pDstData  destination buffer"]
    #[doc = " @param DstFormat destination buffer format"]
    #[doc = " @param nDstStep  destination buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXDst     destination buffer offset x"]
    #[doc = " @param nYDst     destination buffer offset y"]
    #[doc = " @param nWidth    width to copy in pixels"]
    #[doc = " @param nHeight   height to copy in pixels"]
    #[doc = " @param pSrcData  source buffer"]
    #[doc = " @param SrcFormat source buffer format"]
    #[doc = " @param nSrcStep  source buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXSrc     source buffer x offset in pixels"]
    #[doc = " @param nYSrc     source buffer y offset in pixels"]
    #[doc = " @param palette   palette to use (only used for 8 bit color!)"]
    #[doc = " @param flags     Image flipping flags FREERDP_FLIP_NONE et al"]
    #[doc = ""]
    #[doc = " @return          TRUE if success, FALSE otherwise"]
    pub fn freerdp_image_copy(
        pDstData: *mut BYTE,
        DstFormat: DWORD,
        nDstStep: UINT32,
        nXDst: UINT32,
        nYDst: UINT32,
        nWidth: UINT32,
        nHeight: UINT32,
        pSrcData: *const BYTE,
        SrcFormat: DWORD,
        nSrcStep: UINT32,
        nXSrc: UINT32,
        nYSrc: UINT32,
        palette: *const gdiPalette,
        flags: UINT32,
    ) -> BOOL;
}
extern "C" {
    #[doc = " @param pDstData   destination buffer"]
    #[doc = " @param DstFormat  destination buffer format"]
    #[doc = " @param nDstStep   destination buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXDst      destination buffer offset x"]
    #[doc = " @param nYDst      destination buffer offset y"]
    #[doc = " @param nDstWidth  width of destination in pixels"]
    #[doc = " @param nDstHeight height of destination in pixels"]
    #[doc = " @param pSrcData   source buffer"]
    #[doc = " @param SrcFormat  source buffer format"]
    #[doc = " @param nSrcStep   source buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXSrc      source buffer x offset in pixels"]
    #[doc = " @param nYSrc      source buffer y offset in pixels"]
    #[doc = " @param nSrcWidth  width of source in pixels"]
    #[doc = " @param nSrcHeight height of source in pixels"]
    #[doc = ""]
    #[doc = " @return          TRUE if success, FALSE otherwise"]
    pub fn freerdp_image_scale(
        pDstData: *mut BYTE,
        DstFormat: DWORD,
        nDstStep: UINT32,
        nXDst: UINT32,
        nYDst: UINT32,
        nDstWidth: UINT32,
        nDstHeight: UINT32,
        pSrcData: *const BYTE,
        SrcFormat: DWORD,
        nSrcStep: UINT32,
        nXSrc: UINT32,
        nYSrc: UINT32,
        nSrcWidth: UINT32,
        nSrcHeight: UINT32,
    ) -> BOOL;
}
extern "C" {
    #[doc = " @param pDstData  destionation buffer"]
    #[doc = " @param DstFormat destionation buffer format"]
    #[doc = " @param nDstStep  destionation buffer stride (line in bytes) 0 for default"]
    #[doc = " @param nXDst     destination buffer offset x"]
    #[doc = " @param nYDst     destination buffer offset y"]
    #[doc = " @param nWidth    width to copy in pixels"]
    #[doc = " @param nHeight   height to copy in pixels"]
    #[doc = " @param color     Pixel color in DstFormat (internal representation format,"]
    #[doc = "                  use FreeRDPGetColor to create)"]
    #[doc = ""]
    #[doc = " @return          TRUE if success, FALSE otherwise"]
    pub fn freerdp_image_fill(
        pDstData: *mut BYTE,
        DstFormat: DWORD,
        nDstStep: UINT32,
        nXDst: UINT32,
        nYDst: UINT32,
        nWidth: UINT32,
        nHeight: UINT32,
        color: UINT32,
    ) -> BOOL;
}
pub type RFX_RECT = _RFX_RECT;
pub type RFX_TILE = _RFX_TILE;
pub type RFX_MESSAGE = _RFX_MESSAGE;
pub type RFX_CONTEXT = _RFX_CONTEXT;
pub const _RLGR_MODE_RLGR1: _RLGR_MODE = 0;
pub const _RLGR_MODE_RLGR3: _RLGR_MODE = 1;
pub type _RLGR_MODE = ::std::os::raw::c_uint;
pub use self::_RLGR_MODE as RLGR_MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RFX_RECT {
    pub x: UINT16,
    pub y: UINT16,
    pub width: UINT16,
    pub height: UINT16,
}
#[test]
fn bindgen_test_layout__RFX_RECT() {
    assert_eq!(
        ::std::mem::size_of::<_RFX_RECT>(),
        8usize,
        concat!("Size of: ", stringify!(_RFX_RECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_RFX_RECT>(),
        2usize,
        concat!("Alignment of ", stringify!(_RFX_RECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_RECT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_RECT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_RECT>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_RECT),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_RECT>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_RECT),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_RECT>())).height as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_RECT),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RFX_TILE {
    pub x: UINT16,
    pub y: UINT16,
    pub width: UINT32,
    pub height: UINT32,
    pub data: *mut BYTE,
    pub scanline: UINT32,
    pub allocated: BOOL,
    pub quantIdxY: BYTE,
    pub quantIdxCb: BYTE,
    pub quantIdxCr: BYTE,
    pub xIdx: UINT16,
    pub yIdx: UINT16,
    pub YLen: UINT16,
    pub CbLen: UINT16,
    pub CrLen: UINT16,
    pub YData: *mut BYTE,
    pub CbData: *mut BYTE,
    pub CrData: *mut BYTE,
    pub YCbCrData: *mut BYTE,
}
#[test]
fn bindgen_test_layout__RFX_TILE() {
    assert_eq!(
        ::std::mem::size_of::<_RFX_TILE>(),
        80usize,
        concat!("Size of: ", stringify!(_RFX_TILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_RFX_TILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_RFX_TILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).scanline as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).allocated as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).quantIdxY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(quantIdxY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).quantIdxCb as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(quantIdxCb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).quantIdxCr as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(quantIdxCr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).xIdx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(xIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).yIdx as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(yIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).YLen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(YLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).CbLen as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(CbLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).CrLen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(CrLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).YData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(YData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).CbData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(CbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).CrData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(CrData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_TILE>())).YCbCrData as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_TILE),
            "::",
            stringify!(YCbCrData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RFX_MESSAGE {
    pub frameIdx: UINT32,
    #[doc = " The rects array represents the updated region of the frame. The UI"]
    #[doc = " requires to clip drawing destination base on the union of the rects."]
    pub numRects: UINT16,
    pub rects: *mut RFX_RECT,
    pub freeRects: BOOL,
    #[doc = " The tiles array represents the actual frame data. Each tile is always"]
    #[doc = " 64x64. Note that only pixels inside the updated region (represented as"]
    #[doc = " rects described above) are valid. Pixels outside of the region may"]
    #[doc = " contain arbitrary data."]
    pub numTiles: UINT16,
    pub tiles: *mut *mut RFX_TILE,
    pub numQuant: UINT16,
    pub quantVals: *mut UINT32,
    pub tilesDataSize: UINT32,
    pub freeArray: BOOL,
}
#[test]
fn bindgen_test_layout__RFX_MESSAGE() {
    assert_eq!(
        ::std::mem::size_of::<_RFX_MESSAGE>(),
        56usize,
        concat!("Size of: ", stringify!(_RFX_MESSAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_RFX_MESSAGE>(),
        8usize,
        concat!("Alignment of ", stringify!(_RFX_MESSAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).frameIdx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(frameIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).numRects as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(numRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).rects as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(rects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).freeRects as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(freeRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).numTiles as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(numTiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).tiles as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(tiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).numQuant as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(numQuant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).quantVals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(quantVals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).tilesDataSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(tilesDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_MESSAGE>())).freeArray as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_MESSAGE),
            "::",
            stringify!(freeArray)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RFX_CONTEXT_PRIV {
    _unused: [u8; 0],
}
pub type RFX_CONTEXT_PRIV = _RFX_CONTEXT_PRIV;
pub const _RFX_STATE_RFX_STATE_INITIAL: _RFX_STATE = 0;
pub const _RFX_STATE_RFX_STATE_SERVER_UNINITIALIZED: _RFX_STATE = 1;
pub const _RFX_STATE_RFX_STATE_SEND_HEADERS: _RFX_STATE = 2;
pub const _RFX_STATE_RFX_STATE_SEND_FRAME_DATA: _RFX_STATE = 3;
pub const _RFX_STATE_RFX_STATE_FRAME_DATA_SENT: _RFX_STATE = 4;
pub const _RFX_STATE_RFX_STATE_FINAL: _RFX_STATE = 5;
pub type _RFX_STATE = ::std::os::raw::c_uint;
pub use self::_RFX_STATE as RFX_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RFX_CONTEXT {
    pub state: RFX_STATE,
    pub encoder: BOOL,
    pub flags: UINT16,
    pub properties: UINT16,
    pub width: UINT16,
    pub height: UINT16,
    pub mode: RLGR_MODE,
    pub version: UINT32,
    pub codec_id: UINT32,
    pub codec_version: UINT32,
    pub pixel_format: UINT32,
    pub bits_per_pixel: BYTE,
    pub palette: *const BYTE,
    pub frameIdx: UINT32,
    pub numQuant: BYTE,
    pub quants: *mut UINT32,
    pub quantIdxY: BYTE,
    pub quantIdxCb: BYTE,
    pub quantIdxCr: BYTE,
    pub decodedHeaderBlocks: UINT32,
    pub expectedDataBlockType: UINT16,
    pub currentMessage: RFX_MESSAGE,
    pub quantization_decode: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut INT16, quantization_values: *const UINT32),
    >,
    pub quantization_encode: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut INT16, quantization_values: *const UINT32),
    >,
    pub dwt_2d_decode:
        ::std::option::Option<unsafe extern "C" fn(buffer: *mut INT16, dwt_buffer: *mut INT16)>,
    pub dwt_2d_encode:
        ::std::option::Option<unsafe extern "C" fn(buffer: *mut INT16, dwt_buffer: *mut INT16)>,
    pub rlgr_decode: ::std::option::Option<
        unsafe extern "C" fn(
            mode: RLGR_MODE,
            data: *const BYTE,
            data_size: UINT32,
            buffer: *mut INT16,
            buffer_size: UINT32,
        ) -> ::std::os::raw::c_int,
    >,
    pub rlgr_encode: ::std::option::Option<
        unsafe extern "C" fn(
            mode: RLGR_MODE,
            data: *const INT16,
            data_size: UINT32,
            buffer: *mut BYTE,
            buffer_size: UINT32,
        ) -> ::std::os::raw::c_int,
    >,
    pub priv_: *mut RFX_CONTEXT_PRIV,
}
#[test]
fn bindgen_test_layout__RFX_CONTEXT() {
    assert_eq!(
        ::std::mem::size_of::<_RFX_CONTEXT>(),
        192usize,
        concat!("Size of: ", stringify!(_RFX_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_RFX_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_RFX_CONTEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).encoder as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(encoder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).properties as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).height as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).version as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).codec_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(codec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).codec_version as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(codec_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).pixel_format as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).bits_per_pixel as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(bits_per_pixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).palette as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).frameIdx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(frameIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).numQuant as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(numQuant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).quants as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(quants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).quantIdxY as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(quantIdxY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).quantIdxCb as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(quantIdxCb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).quantIdxCr as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(quantIdxCr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RFX_CONTEXT>())).decodedHeaderBlocks as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(decodedHeaderBlocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RFX_CONTEXT>())).expectedDataBlockType as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(expectedDataBlockType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).currentMessage as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(currentMessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RFX_CONTEXT>())).quantization_decode as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(quantization_decode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RFX_CONTEXT>())).quantization_encode as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(quantization_encode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).dwt_2d_decode as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(dwt_2d_decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).dwt_2d_encode as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(dwt_2d_encode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).rlgr_decode as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(rlgr_decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).rlgr_encode as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(rlgr_encode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RFX_CONTEXT>())).priv_ as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RFX_CONTEXT),
            "::",
            stringify!(priv_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSC_CONTEXT {
    _unused: [u8; 0],
}
pub type NSC_CONTEXT = _NSC_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FREERDP_ADDIN {
    pub dwFlags: DWORD,
    pub cName: [CHAR; 16usize],
    pub cType: [CHAR; 16usize],
    pub cSubsystem: [CHAR; 16usize],
}
#[test]
fn bindgen_test_layout__FREERDP_ADDIN() {
    assert_eq!(
        ::std::mem::size_of::<_FREERDP_ADDIN>(),
        52usize,
        concat!("Size of: ", stringify!(_FREERDP_ADDIN))
    );
    assert_eq!(
        ::std::mem::align_of::<_FREERDP_ADDIN>(),
        4usize,
        concat!("Alignment of ", stringify!(_FREERDP_ADDIN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_ADDIN>())).dwFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_ADDIN),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_ADDIN>())).cName as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_ADDIN),
            "::",
            stringify!(cName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_ADDIN>())).cType as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_ADDIN),
            "::",
            stringify!(cType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_ADDIN>())).cSubsystem as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_ADDIN),
            "::",
            stringify!(cSubsystem)
        )
    );
}
pub type FREERDP_ADDIN = _FREERDP_ADDIN;
pub type FREERDP_LOAD_CHANNEL_ADDIN_ENTRY_FN = ::std::option::Option<
    unsafe extern "C" fn(
        pszName: LPCSTR,
        pszSubsystem: LPCSTR,
        pszType: LPCSTR,
        dwFlags: DWORD,
    ) -> PVIRTUALCHANNELENTRY,
>;
extern "C" {
    pub fn freerdp_get_library_install_path() -> LPSTR;
}
extern "C" {
    pub fn freerdp_get_dynamic_addin_install_path() -> LPSTR;
}
extern "C" {
    pub fn freerdp_register_addin_provider(
        provider: FREERDP_LOAD_CHANNEL_ADDIN_ENTRY_FN,
        dwFlags: DWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_load_dynamic_addin(
        pszFileName: LPCSTR,
        pszPath: LPCSTR,
        pszEntryName: LPCSTR,
    ) -> PVIRTUALCHANNELENTRY;
}
extern "C" {
    pub fn freerdp_load_dynamic_channel_addin_entry(
        pszName: LPCSTR,
        pszSubsystem: LPCSTR,
        pszType: LPCSTR,
        dwFlags: DWORD,
    ) -> PVIRTUALCHANNELENTRY;
}
extern "C" {
    pub fn freerdp_load_channel_addin_entry(
        pszName: LPCSTR,
        pszSubsystem: LPCSTR,
        pszType: LPCSTR,
        dwFlags: DWORD,
    ) -> PVIRTUALCHANNELENTRY;
}
#[doc = " Common Data Types"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_POINT16 {
    pub x: UINT16,
    pub y: UINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_POINT16() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_POINT16>(),
        4usize,
        concat!("Size of: ", stringify!(_RDPGFX_POINT16))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_POINT16>(),
        2usize,
        concat!("Alignment of ", stringify!(_RDPGFX_POINT16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_POINT16>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_POINT16),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_POINT16>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_POINT16),
            "::",
            stringify!(y)
        )
    );
}
pub type RDPGFX_POINT16 = _RDPGFX_POINT16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_COLOR32 {
    pub B: BYTE,
    pub G: BYTE,
    pub R: BYTE,
    pub XA: BYTE,
}
#[test]
fn bindgen_test_layout__RDPGFX_COLOR32() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_COLOR32>(),
        4usize,
        concat!("Size of: ", stringify!(_RDPGFX_COLOR32))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_COLOR32>(),
        1usize,
        concat!("Alignment of ", stringify!(_RDPGFX_COLOR32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_COLOR32>())).B as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_COLOR32),
            "::",
            stringify!(B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_COLOR32>())).G as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_COLOR32),
            "::",
            stringify!(G)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_COLOR32>())).R as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_COLOR32),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_COLOR32>())).XA as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_COLOR32),
            "::",
            stringify!(XA)
        )
    );
}
pub type RDPGFX_COLOR32 = _RDPGFX_COLOR32;
pub type RDPGFX_PIXELFORMAT = BYTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CAPSET {
    pub version: UINT32,
    pub length: UINT32,
    pub flags: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_CAPSET() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CAPSET>(),
        12usize,
        concat!("Size of: ", stringify!(_RDPGFX_CAPSET))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CAPSET>(),
        4usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CAPSET))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_CAPSET>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CAPSET),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_CAPSET>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CAPSET),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_CAPSET>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CAPSET),
            "::",
            stringify!(flags)
        )
    );
}
pub type RDPGFX_CAPSET = _RDPGFX_CAPSET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_SURFACE_COMMAND {
    pub surfaceId: UINT32,
    pub codecId: UINT32,
    pub contextId: UINT32,
    pub format: UINT32,
    pub left: UINT32,
    pub top: UINT32,
    pub right: UINT32,
    pub bottom: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub length: UINT32,
    pub data: *mut BYTE,
    pub extra: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__RDPGFX_SURFACE_COMMAND() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_SURFACE_COMMAND>(),
        64usize,
        concat!("Size of: ", stringify!(_RDPGFX_SURFACE_COMMAND))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_SURFACE_COMMAND>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_SURFACE_COMMAND))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).surfaceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).codecId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(codecId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).contextId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(contextId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).top as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).bottom as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).height as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).length as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_SURFACE_COMMAND>())).extra as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_COMMAND),
            "::",
            stringify!(extra)
        )
    );
}
pub type RDPGFX_SURFACE_COMMAND = _RDPGFX_SURFACE_COMMAND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_DELETE_ENCODING_CONTEXT_PDU {
    pub surfaceId: UINT16,
    pub codecContextId: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_DELETE_ENCODING_CONTEXT_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_DELETE_ENCODING_CONTEXT_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_RDPGFX_DELETE_ENCODING_CONTEXT_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_DELETE_ENCODING_CONTEXT_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_RDPGFX_DELETE_ENCODING_CONTEXT_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_DELETE_ENCODING_CONTEXT_PDU>())).surfaceId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_DELETE_ENCODING_CONTEXT_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_DELETE_ENCODING_CONTEXT_PDU>())).codecContextId
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_DELETE_ENCODING_CONTEXT_PDU),
            "::",
            stringify!(codecContextId)
        )
    );
}
pub type RDPGFX_DELETE_ENCODING_CONTEXT_PDU = _RDPGFX_DELETE_ENCODING_CONTEXT_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_SOLID_FILL_PDU {
    pub surfaceId: UINT16,
    pub fillPixel: RDPGFX_COLOR32,
    pub fillRectCount: UINT16,
    pub fillRects: *mut RECTANGLE_16,
}
#[test]
fn bindgen_test_layout__RDPGFX_SOLID_FILL_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_SOLID_FILL_PDU>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPGFX_SOLID_FILL_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_SOLID_FILL_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_SOLID_FILL_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SOLID_FILL_PDU>())).surfaceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SOLID_FILL_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SOLID_FILL_PDU>())).fillPixel as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SOLID_FILL_PDU),
            "::",
            stringify!(fillPixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SOLID_FILL_PDU>())).fillRectCount as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SOLID_FILL_PDU),
            "::",
            stringify!(fillRectCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SOLID_FILL_PDU>())).fillRects as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SOLID_FILL_PDU),
            "::",
            stringify!(fillRects)
        )
    );
}
pub type RDPGFX_SOLID_FILL_PDU = _RDPGFX_SOLID_FILL_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_SURFACE_TO_SURFACE_PDU {
    pub surfaceIdSrc: UINT16,
    pub surfaceIdDest: UINT16,
    pub rectSrc: RECTANGLE_16,
    pub destPtsCount: UINT16,
    pub destPts: *mut RDPGFX_POINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_SURFACE_TO_SURFACE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_SURFACE_TO_SURFACE_PDU>(),
        24usize,
        concat!("Size of: ", stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_SURFACE_TO_SURFACE_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_SURFACE_PDU>())).surfaceIdSrc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU),
            "::",
            stringify!(surfaceIdSrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_SURFACE_PDU>())).surfaceIdDest as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU),
            "::",
            stringify!(surfaceIdDest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_SURFACE_PDU>())).rectSrc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU),
            "::",
            stringify!(rectSrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_SURFACE_PDU>())).destPtsCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU),
            "::",
            stringify!(destPtsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_SURFACE_PDU>())).destPts as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_SURFACE_PDU),
            "::",
            stringify!(destPts)
        )
    );
}
pub type RDPGFX_SURFACE_TO_SURFACE_PDU = _RDPGFX_SURFACE_TO_SURFACE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_SURFACE_TO_CACHE_PDU {
    pub surfaceId: UINT16,
    pub cacheKey: UINT64,
    pub cacheSlot: UINT16,
    pub rectSrc: RECTANGLE_16,
}
#[test]
fn bindgen_test_layout__RDPGFX_SURFACE_TO_CACHE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_SURFACE_TO_CACHE_PDU>(),
        32usize,
        concat!("Size of: ", stringify!(_RDPGFX_SURFACE_TO_CACHE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_SURFACE_TO_CACHE_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_SURFACE_TO_CACHE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_CACHE_PDU>())).surfaceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_CACHE_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_CACHE_PDU>())).cacheKey as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_CACHE_PDU),
            "::",
            stringify!(cacheKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_CACHE_PDU>())).cacheSlot as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_CACHE_PDU),
            "::",
            stringify!(cacheSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_SURFACE_TO_CACHE_PDU>())).rectSrc as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_SURFACE_TO_CACHE_PDU),
            "::",
            stringify!(rectSrc)
        )
    );
}
pub type RDPGFX_SURFACE_TO_CACHE_PDU = _RDPGFX_SURFACE_TO_CACHE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CACHE_TO_SURFACE_PDU {
    pub cacheSlot: UINT16,
    pub surfaceId: UINT16,
    pub destPtsCount: UINT16,
    pub destPts: *mut RDPGFX_POINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_CACHE_TO_SURFACE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CACHE_TO_SURFACE_PDU>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPGFX_CACHE_TO_SURFACE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CACHE_TO_SURFACE_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CACHE_TO_SURFACE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_TO_SURFACE_PDU>())).cacheSlot as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_TO_SURFACE_PDU),
            "::",
            stringify!(cacheSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_TO_SURFACE_PDU>())).surfaceId as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_TO_SURFACE_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_TO_SURFACE_PDU>())).destPtsCount as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_TO_SURFACE_PDU),
            "::",
            stringify!(destPtsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_TO_SURFACE_PDU>())).destPts as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_TO_SURFACE_PDU),
            "::",
            stringify!(destPts)
        )
    );
}
pub type RDPGFX_CACHE_TO_SURFACE_PDU = _RDPGFX_CACHE_TO_SURFACE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_EVICT_CACHE_ENTRY_PDU {
    pub cacheSlot: UINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_EVICT_CACHE_ENTRY_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_EVICT_CACHE_ENTRY_PDU>(),
        2usize,
        concat!("Size of: ", stringify!(_RDPGFX_EVICT_CACHE_ENTRY_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_EVICT_CACHE_ENTRY_PDU>(),
        2usize,
        concat!("Alignment of ", stringify!(_RDPGFX_EVICT_CACHE_ENTRY_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_EVICT_CACHE_ENTRY_PDU>())).cacheSlot as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_EVICT_CACHE_ENTRY_PDU),
            "::",
            stringify!(cacheSlot)
        )
    );
}
pub type RDPGFX_EVICT_CACHE_ENTRY_PDU = _RDPGFX_EVICT_CACHE_ENTRY_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CREATE_SURFACE_PDU {
    pub surfaceId: UINT16,
    pub width: UINT16,
    pub height: UINT16,
    pub pixelFormat: RDPGFX_PIXELFORMAT,
}
#[test]
fn bindgen_test_layout__RDPGFX_CREATE_SURFACE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CREATE_SURFACE_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_RDPGFX_CREATE_SURFACE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CREATE_SURFACE_PDU>(),
        2usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CREATE_SURFACE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CREATE_SURFACE_PDU>())).surfaceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CREATE_SURFACE_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CREATE_SURFACE_PDU>())).width as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CREATE_SURFACE_PDU),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CREATE_SURFACE_PDU>())).height as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CREATE_SURFACE_PDU),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CREATE_SURFACE_PDU>())).pixelFormat as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CREATE_SURFACE_PDU),
            "::",
            stringify!(pixelFormat)
        )
    );
}
pub type RDPGFX_CREATE_SURFACE_PDU = _RDPGFX_CREATE_SURFACE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_DELETE_SURFACE_PDU {
    pub surfaceId: UINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_DELETE_SURFACE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_DELETE_SURFACE_PDU>(),
        2usize,
        concat!("Size of: ", stringify!(_RDPGFX_DELETE_SURFACE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_DELETE_SURFACE_PDU>(),
        2usize,
        concat!("Alignment of ", stringify!(_RDPGFX_DELETE_SURFACE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_DELETE_SURFACE_PDU>())).surfaceId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_DELETE_SURFACE_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
}
pub type RDPGFX_DELETE_SURFACE_PDU = _RDPGFX_DELETE_SURFACE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_START_FRAME_PDU {
    pub timestamp: UINT32,
    pub frameId: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_START_FRAME_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_START_FRAME_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_RDPGFX_START_FRAME_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_START_FRAME_PDU>(),
        4usize,
        concat!("Alignment of ", stringify!(_RDPGFX_START_FRAME_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_START_FRAME_PDU>())).timestamp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_START_FRAME_PDU),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_START_FRAME_PDU>())).frameId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_START_FRAME_PDU),
            "::",
            stringify!(frameId)
        )
    );
}
pub type RDPGFX_START_FRAME_PDU = _RDPGFX_START_FRAME_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_END_FRAME_PDU {
    pub frameId: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_END_FRAME_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_END_FRAME_PDU>(),
        4usize,
        concat!("Size of: ", stringify!(_RDPGFX_END_FRAME_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_END_FRAME_PDU>(),
        4usize,
        concat!("Alignment of ", stringify!(_RDPGFX_END_FRAME_PDU))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPGFX_END_FRAME_PDU>())).frameId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_END_FRAME_PDU),
            "::",
            stringify!(frameId)
        )
    );
}
pub type RDPGFX_END_FRAME_PDU = _RDPGFX_END_FRAME_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_FRAME_ACKNOWLEDGE_PDU {
    pub queueDepth: UINT32,
    pub frameId: UINT32,
    pub totalFramesDecoded: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_FRAME_ACKNOWLEDGE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_FRAME_ACKNOWLEDGE_PDU>(),
        12usize,
        concat!("Size of: ", stringify!(_RDPGFX_FRAME_ACKNOWLEDGE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_FRAME_ACKNOWLEDGE_PDU>(),
        4usize,
        concat!("Alignment of ", stringify!(_RDPGFX_FRAME_ACKNOWLEDGE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_FRAME_ACKNOWLEDGE_PDU>())).queueDepth as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(queueDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_FRAME_ACKNOWLEDGE_PDU>())).frameId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(frameId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_FRAME_ACKNOWLEDGE_PDU>())).totalFramesDecoded as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(totalFramesDecoded)
        )
    );
}
pub type RDPGFX_FRAME_ACKNOWLEDGE_PDU = _RDPGFX_FRAME_ACKNOWLEDGE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_RESET_GRAPHICS_PDU {
    pub width: UINT32,
    pub height: UINT32,
    pub monitorCount: UINT32,
    pub monitorDefArray: *mut MONITOR_DEF,
}
#[test]
fn bindgen_test_layout__RDPGFX_RESET_GRAPHICS_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_RESET_GRAPHICS_PDU>(),
        24usize,
        concat!("Size of: ", stringify!(_RDPGFX_RESET_GRAPHICS_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_RESET_GRAPHICS_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_RESET_GRAPHICS_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_RESET_GRAPHICS_PDU>())).width as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_RESET_GRAPHICS_PDU),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_RESET_GRAPHICS_PDU>())).height as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_RESET_GRAPHICS_PDU),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_RESET_GRAPHICS_PDU>())).monitorCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_RESET_GRAPHICS_PDU),
            "::",
            stringify!(monitorCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_RESET_GRAPHICS_PDU>())).monitorDefArray as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_RESET_GRAPHICS_PDU),
            "::",
            stringify!(monitorDefArray)
        )
    );
}
pub type RDPGFX_RESET_GRAPHICS_PDU = _RDPGFX_RESET_GRAPHICS_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU {
    pub surfaceId: UINT16,
    pub reserved: UINT16,
    pub outputOriginX: UINT32,
    pub outputOriginY: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU>(),
        12usize,
        concat!("Size of: ", stringify!(_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU>())).surfaceId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU>())).reserved as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU>())).outputOriginX as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU),
            "::",
            stringify!(outputOriginX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU>())).outputOriginY as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU),
            "::",
            stringify!(outputOriginY)
        )
    );
}
pub type RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU = _RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU {
    pub surfaceId: UINT16,
    pub reserved: UINT16,
    pub outputOriginX: UINT32,
    pub outputOriginY: UINT32,
    pub targetWidth: UINT32,
    pub targetHeight: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>())).surfaceId
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>())).reserved
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>())).outputOriginX
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU),
            "::",
            stringify!(outputOriginX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>())).outputOriginY
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU),
            "::",
            stringify!(outputOriginY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>())).targetWidth
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU),
            "::",
            stringify!(targetWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU>())).targetHeight
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU),
            "::",
            stringify!(targetHeight)
        )
    );
}
pub type RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU = _RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CACHE_ENTRY_METADATA {
    pub cacheKey: UINT64,
    pub bitmapLength: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_CACHE_ENTRY_METADATA() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CACHE_ENTRY_METADATA>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPGFX_CACHE_ENTRY_METADATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CACHE_ENTRY_METADATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CACHE_ENTRY_METADATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_ENTRY_METADATA>())).cacheKey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_ENTRY_METADATA),
            "::",
            stringify!(cacheKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_ENTRY_METADATA>())).bitmapLength as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_ENTRY_METADATA),
            "::",
            stringify!(bitmapLength)
        )
    );
}
pub type RDPGFX_CACHE_ENTRY_METADATA = _RDPGFX_CACHE_ENTRY_METADATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CACHE_IMPORT_OFFER_PDU {
    pub cacheEntriesCount: UINT16,
    pub cacheEntries: *mut RDPGFX_CACHE_ENTRY_METADATA,
}
#[test]
fn bindgen_test_layout__RDPGFX_CACHE_IMPORT_OFFER_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CACHE_IMPORT_OFFER_PDU>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPGFX_CACHE_IMPORT_OFFER_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CACHE_IMPORT_OFFER_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CACHE_IMPORT_OFFER_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_IMPORT_OFFER_PDU>())).cacheEntriesCount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_IMPORT_OFFER_PDU),
            "::",
            stringify!(cacheEntriesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_IMPORT_OFFER_PDU>())).cacheEntries as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_IMPORT_OFFER_PDU),
            "::",
            stringify!(cacheEntries)
        )
    );
}
pub type RDPGFX_CACHE_IMPORT_OFFER_PDU = _RDPGFX_CACHE_IMPORT_OFFER_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CACHE_IMPORT_REPLY_PDU {
    pub importedEntriesCount: UINT16,
    pub cacheSlots: *mut UINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_CACHE_IMPORT_REPLY_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CACHE_IMPORT_REPLY_PDU>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPGFX_CACHE_IMPORT_REPLY_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CACHE_IMPORT_REPLY_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CACHE_IMPORT_REPLY_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_IMPORT_REPLY_PDU>())).importedEntriesCount
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_IMPORT_REPLY_PDU),
            "::",
            stringify!(importedEntriesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CACHE_IMPORT_REPLY_PDU>())).cacheSlots as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CACHE_IMPORT_REPLY_PDU),
            "::",
            stringify!(cacheSlots)
        )
    );
}
pub type RDPGFX_CACHE_IMPORT_REPLY_PDU = _RDPGFX_CACHE_IMPORT_REPLY_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CAPS_ADVERTISE_PDU {
    pub capsSetCount: UINT16,
    pub capsSets: *mut RDPGFX_CAPSET,
}
#[test]
fn bindgen_test_layout__RDPGFX_CAPS_ADVERTISE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CAPS_ADVERTISE_PDU>(),
        16usize,
        concat!("Size of: ", stringify!(_RDPGFX_CAPS_ADVERTISE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CAPS_ADVERTISE_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CAPS_ADVERTISE_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CAPS_ADVERTISE_PDU>())).capsSetCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CAPS_ADVERTISE_PDU),
            "::",
            stringify!(capsSetCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CAPS_ADVERTISE_PDU>())).capsSets as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CAPS_ADVERTISE_PDU),
            "::",
            stringify!(capsSets)
        )
    );
}
pub type RDPGFX_CAPS_ADVERTISE_PDU = _RDPGFX_CAPS_ADVERTISE_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_CAPS_CONFIRM_PDU {
    pub capsSet: *mut RDPGFX_CAPSET,
}
#[test]
fn bindgen_test_layout__RDPGFX_CAPS_CONFIRM_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_CAPS_CONFIRM_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_RDPGFX_CAPS_CONFIRM_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_CAPS_CONFIRM_PDU>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDPGFX_CAPS_CONFIRM_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_CAPS_CONFIRM_PDU>())).capsSet as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_CAPS_CONFIRM_PDU),
            "::",
            stringify!(capsSet)
        )
    );
}
pub type RDPGFX_CAPS_CONFIRM_PDU = _RDPGFX_CAPS_CONFIRM_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_MAP_SURFACE_TO_WINDOW_PDU {
    pub surfaceId: UINT16,
    pub windowId: UINT64,
    pub mappedWidth: UINT32,
    pub mappedHeight: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_MAP_SURFACE_TO_WINDOW_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU>(),
        24usize,
        concat!("Size of: ", stringify!(_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU>())).surfaceId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU>())).windowId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU>())).mappedWidth as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU),
            "::",
            stringify!(mappedWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU>())).mappedHeight as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_WINDOW_PDU),
            "::",
            stringify!(mappedHeight)
        )
    );
}
pub type RDPGFX_MAP_SURFACE_TO_WINDOW_PDU = _RDPGFX_MAP_SURFACE_TO_WINDOW_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU {
    pub surfaceId: UINT16,
    pub windowId: UINT64,
    pub mappedWidth: UINT32,
    pub mappedHeight: UINT32,
    pub targetWidth: UINT32,
    pub targetHeight: UINT32,
}
#[test]
fn bindgen_test_layout__RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>())).surfaceId
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU),
            "::",
            stringify!(surfaceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>())).windowId
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>())).mappedWidth
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU),
            "::",
            stringify!(mappedWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>())).mappedHeight
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU),
            "::",
            stringify!(mappedHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>())).targetWidth
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU),
            "::",
            stringify!(targetWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU>())).targetHeight
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU),
            "::",
            stringify!(targetHeight)
        )
    );
}
pub type RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU = _RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU {
    pub frameId: UINT32,
    pub timestamp: UINT32,
    pub timeDiffSE: UINT16,
    pub timeDiffEDR: UINT16,
}
#[test]
fn bindgen_test_layout__RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU>(),
        12usize,
        concat!("Size of: ", stringify!(_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU>())).frameId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(frameId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU>())).timestamp as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU>())).timeDiffSE as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(timeDiffSE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU>())).timeDiffEDR as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU),
            "::",
            stringify!(timeDiffEDR)
        )
    );
}
pub type RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU = _RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU;
pub type H264_CONTEXT = _H264_CONTEXT;
pub type pfnH264SubsystemInit =
    ::std::option::Option<unsafe extern "C" fn(h264: *mut H264_CONTEXT) -> BOOL>;
pub type pfnH264SubsystemUninit =
    ::std::option::Option<unsafe extern "C" fn(h264: *mut H264_CONTEXT)>;
pub type pfnH264SubsystemDecompress = ::std::option::Option<
    unsafe extern "C" fn(
        h264: *mut H264_CONTEXT,
        pSrcData: *const BYTE,
        SrcSize: UINT32,
    ) -> ::std::os::raw::c_int,
>;
pub type pfnH264SubsystemCompress = ::std::option::Option<
    unsafe extern "C" fn(
        h264: *mut H264_CONTEXT,
        pSrcYuv: *mut *const BYTE,
        pStride: *const UINT32,
        ppDstData: *mut *mut BYTE,
        pDstSize: *mut UINT32,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _H264_CONTEXT_SUBSYSTEM {
    pub name: *const ::std::os::raw::c_char,
    pub Init: pfnH264SubsystemInit,
    pub Uninit: pfnH264SubsystemUninit,
    pub Decompress: pfnH264SubsystemDecompress,
    pub Compress: pfnH264SubsystemCompress,
}
#[test]
fn bindgen_test_layout__H264_CONTEXT_SUBSYSTEM() {
    assert_eq!(
        ::std::mem::size_of::<_H264_CONTEXT_SUBSYSTEM>(),
        40usize,
        concat!("Size of: ", stringify!(_H264_CONTEXT_SUBSYSTEM))
    );
    assert_eq!(
        ::std::mem::align_of::<_H264_CONTEXT_SUBSYSTEM>(),
        8usize,
        concat!("Alignment of ", stringify!(_H264_CONTEXT_SUBSYSTEM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT_SUBSYSTEM>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT_SUBSYSTEM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT_SUBSYSTEM>())).Init as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT_SUBSYSTEM),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT_SUBSYSTEM>())).Uninit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT_SUBSYSTEM),
            "::",
            stringify!(Uninit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_H264_CONTEXT_SUBSYSTEM>())).Decompress as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT_SUBSYSTEM),
            "::",
            stringify!(Decompress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_H264_CONTEXT_SUBSYSTEM>())).Compress as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT_SUBSYSTEM),
            "::",
            stringify!(Compress)
        )
    );
}
pub type H264_CONTEXT_SUBSYSTEM = _H264_CONTEXT_SUBSYSTEM;
pub const _H264_RATECONTROL_MODE_H264_RATECONTROL_VBR: _H264_RATECONTROL_MODE = 0;
pub const _H264_RATECONTROL_MODE_H264_RATECONTROL_CQP: _H264_RATECONTROL_MODE = 1;
pub type _H264_RATECONTROL_MODE = ::std::os::raw::c_uint;
pub use self::_H264_RATECONTROL_MODE as H264_RATECONTROL_MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _H264_CONTEXT {
    pub Compressor: BOOL,
    pub width: UINT32,
    pub height: UINT32,
    pub RateControlMode: H264_RATECONTROL_MODE,
    pub BitRate: UINT32,
    pub FrameRate: FLOAT,
    pub QP: UINT32,
    pub NumberOfThreads: UINT32,
    pub iStride: [UINT32; 3usize],
    pub pYUVData: [*mut BYTE; 3usize],
    pub iYUV444Size: [UINT32; 3usize],
    pub iYUV444Stride: [UINT32; 3usize],
    pub pYUV444Data: [*mut BYTE; 3usize],
    pub numSystemData: UINT32,
    pub pSystemData: *mut ::std::os::raw::c_void,
    pub subsystem: *mut H264_CONTEXT_SUBSYSTEM,
    pub lumaData: *mut ::std::os::raw::c_void,
    pub log: *mut wLog,
}
#[test]
fn bindgen_test_layout__H264_CONTEXT() {
    assert_eq!(
        ::std::mem::size_of::<_H264_CONTEXT>(),
        160usize,
        concat!("Size of: ", stringify!(_H264_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_H264_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_H264_CONTEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).Compressor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(Compressor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).RateControlMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(RateControlMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).BitRate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(BitRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).FrameRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(FrameRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).QP as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(QP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).NumberOfThreads as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(NumberOfThreads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).iStride as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(iStride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).pYUVData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(pYUVData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).iYUV444Size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(iYUV444Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).iYUV444Stride as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(iYUV444Stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).pYUV444Data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(pYUV444Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).numSystemData as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(numSystemData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).pSystemData as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(pSystemData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).subsystem as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(subsystem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).lumaData as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(lumaData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_H264_CONTEXT>())).log as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_H264_CONTEXT),
            "::",
            stringify!(log)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLEAR_CONTEXT {
    _unused: [u8; 0],
}
pub type CLEAR_CONTEXT = _CLEAR_CONTEXT;
pub type BITMAP_PLANAR_CONTEXT = _BITMAP_PLANAR_CONTEXT;
extern "C" {
    pub fn freerdp_bitmap_compress(
        in_data: *const ::std::os::raw::c_void,
        width: UINT32,
        height: UINT32,
        s: *mut wStream,
        bpp: UINT32,
        byte_limit: UINT32,
        start_line: UINT32,
        temp_s: *mut wStream,
        e: UINT32,
    ) -> SSIZE_T;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_PLANAR_CONTEXT {
    pub maxWidth: UINT32,
    pub maxHeight: UINT32,
    pub maxPlaneSize: UINT32,
    pub AllowSkipAlpha: BOOL,
    pub AllowRunLengthEncoding: BOOL,
    pub AllowColorSubsampling: BOOL,
    pub AllowDynamicColorFidelity: BOOL,
    pub ColorLossLevel: UINT32,
    pub planes: [*mut BYTE; 4usize],
    pub planesBuffer: *mut BYTE,
    pub deltaPlanes: [*mut BYTE; 4usize],
    pub deltaPlanesBuffer: *mut BYTE,
    pub rlePlanes: [*mut BYTE; 4usize],
    pub rlePlanesBuffer: *mut BYTE,
    pub pTempData: *mut BYTE,
    pub nTempStep: UINT32,
    pub bgr: BOOL,
}
#[test]
fn bindgen_test_layout__BITMAP_PLANAR_CONTEXT() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_PLANAR_CONTEXT>(),
        168usize,
        concat!("Size of: ", stringify!(_BITMAP_PLANAR_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_PLANAR_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_BITMAP_PLANAR_CONTEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).maxWidth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(maxWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).maxHeight as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(maxHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).maxPlaneSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(maxPlaneSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).AllowSkipAlpha as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(AllowSkipAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).AllowRunLengthEncoding as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(AllowRunLengthEncoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).AllowColorSubsampling as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(AllowColorSubsampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).AllowDynamicColorFidelity as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(AllowDynamicColorFidelity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).ColorLossLevel as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(ColorLossLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).planes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(planes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).planesBuffer as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(planesBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).deltaPlanes as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(deltaPlanes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).deltaPlanesBuffer as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(deltaPlanesBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).rlePlanes as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(rlePlanes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).rlePlanesBuffer as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(rlePlanesBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).pTempData as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(pTempData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).nTempStep as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(nTempStep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_PLANAR_CONTEXT>())).bgr as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_PLANAR_CONTEXT),
            "::",
            stringify!(bgr)
        )
    );
}
extern "C" {
    pub fn freerdp_bitmap_compress_planar(
        context: *mut BITMAP_PLANAR_CONTEXT,
        data: *const BYTE,
        format: UINT32,
        width: UINT32,
        height: UINT32,
        scanline: UINT32,
        dstData: *mut BYTE,
        pDstSize: *mut UINT32,
    ) -> *mut BYTE;
}
extern "C" {
    pub fn freerdp_bitmap_planar_context_reset(
        context: *mut BITMAP_PLANAR_CONTEXT,
        width: UINT32,
        height: UINT32,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_bitmap_planar_context_new(
        flags: DWORD,
        width: UINT32,
        height: UINT32,
    ) -> *mut BITMAP_PLANAR_CONTEXT;
}
extern "C" {
    pub fn freerdp_bitmap_planar_context_free(context: *mut BITMAP_PLANAR_CONTEXT);
}
extern "C" {
    pub fn freerdp_planar_switch_bgr(planar: *mut BITMAP_PLANAR_CONTEXT, bgr: BOOL);
}
pub type BITMAP_INTERLEAVED_CONTEXT = _BITMAP_INTERLEAVED_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_INTERLEAVED_CONTEXT {
    pub Compressor: BOOL,
    pub TempSize: UINT32,
    pub TempBuffer: *mut BYTE,
    pub bts: *mut wStream,
}
#[test]
fn bindgen_test_layout__BITMAP_INTERLEAVED_CONTEXT() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_INTERLEAVED_CONTEXT>(),
        24usize,
        concat!("Size of: ", stringify!(_BITMAP_INTERLEAVED_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_INTERLEAVED_CONTEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(_BITMAP_INTERLEAVED_CONTEXT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_INTERLEAVED_CONTEXT>())).Compressor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_INTERLEAVED_CONTEXT),
            "::",
            stringify!(Compressor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_INTERLEAVED_CONTEXT>())).TempSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_INTERLEAVED_CONTEXT),
            "::",
            stringify!(TempSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_BITMAP_INTERLEAVED_CONTEXT>())).TempBuffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_INTERLEAVED_CONTEXT),
            "::",
            stringify!(TempBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_INTERLEAVED_CONTEXT>())).bts as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_INTERLEAVED_CONTEXT),
            "::",
            stringify!(bts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROGRESSIVE_CONTEXT {
    _unused: [u8; 0],
}
pub type PROGRESSIVE_CONTEXT = _PROGRESSIVE_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_codecs {
    pub context: *mut rdpContext,
    pub rfx: *mut RFX_CONTEXT,
    pub nsc: *mut NSC_CONTEXT,
    pub h264: *mut H264_CONTEXT,
    pub clear: *mut CLEAR_CONTEXT,
    pub progressive: *mut PROGRESSIVE_CONTEXT,
    pub planar: *mut BITMAP_PLANAR_CONTEXT,
    pub interleaved: *mut BITMAP_INTERLEAVED_CONTEXT,
}
#[test]
fn bindgen_test_layout_rdp_codecs() {
    assert_eq!(
        ::std::mem::size_of::<rdp_codecs>(),
        64usize,
        concat!("Size of: ", stringify!(rdp_codecs))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_codecs>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_codecs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).rfx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(rfx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).nsc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(nsc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).h264 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(h264)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).clear as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).progressive as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(progressive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).planar as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(planar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_codecs>())).interleaved as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_codecs),
            "::",
            stringify!(interleaved)
        )
    );
}
extern "C" {
    pub fn freerdp_client_codecs_prepare(
        codecs: *mut rdpCodecs,
        flags: UINT32,
        width: UINT32,
        height: UINT32,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_client_codecs_reset(
        codecs: *mut rdpCodecs,
        flags: UINT32,
        width: UINT32,
        height: UINT32,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_metrics {
    pub context: *mut rdpContext,
    pub TotalCompressedBytes: UINT64,
    pub TotalUncompressedBytes: UINT64,
    pub TotalCompressionRatio: f64,
}
#[test]
fn bindgen_test_layout_rdp_metrics() {
    assert_eq!(
        ::std::mem::size_of::<rdp_metrics>(),
        32usize,
        concat!("Size of: ", stringify!(rdp_metrics))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_metrics>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_metrics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_metrics>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_metrics),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_metrics>())).TotalCompressedBytes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_metrics),
            "::",
            stringify!(TotalCompressedBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_metrics>())).TotalUncompressedBytes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_metrics),
            "::",
            stringify!(TotalUncompressedBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_metrics>())).TotalCompressionRatio as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_metrics),
            "::",
            stringify!(TotalCompressionRatio)
        )
    );
}
pub type rdpInput = rdp_input;
extern "C" {
    #[doc = " Functions"]
    pub fn GetVirtualKeyName(vkcode: DWORD) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GetVirtualKeyCodeFromName(vkname: *const ::std::os::raw::c_char) -> DWORD;
}
extern "C" {
    pub fn GetVirtualKeyCodeFromXkbKeyName(xkbname: *const ::std::os::raw::c_char) -> DWORD;
}
extern "C" {
    pub fn GetVirtualKeyCodeFromVirtualScanCode(scancode: DWORD, dwKeyboardType: DWORD) -> DWORD;
}
extern "C" {
    pub fn GetVirtualScanCodeFromVirtualKeyCode(vkcode: DWORD, dwKeyboardType: DWORD) -> DWORD;
}
extern "C" {
    pub fn GetVirtualKeyCodeFromKeycode(keycode: DWORD, dwFlags: DWORD) -> DWORD;
}
extern "C" {
    pub fn GetKeycodeFromVirtualKeyCode(keycode: DWORD, dwFlags: DWORD) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_input_proxy {
    _unused: [u8; 0],
}
pub type rdpInputProxy = rdp_input_proxy;
pub type pSynchronizeEvent =
    ::std::option::Option<unsafe extern "C" fn(input: *mut rdpInput, flags: UINT32) -> BOOL>;
pub type pKeyboardEvent = ::std::option::Option<
    unsafe extern "C" fn(input: *mut rdpInput, flags: UINT16, code: UINT16) -> BOOL,
>;
pub type pUnicodeKeyboardEvent = ::std::option::Option<
    unsafe extern "C" fn(input: *mut rdpInput, flags: UINT16, code: UINT16) -> BOOL,
>;
pub type pMouseEvent = ::std::option::Option<
    unsafe extern "C" fn(input: *mut rdpInput, flags: UINT16, x: UINT16, y: UINT16) -> BOOL,
>;
pub type pExtendedMouseEvent = ::std::option::Option<
    unsafe extern "C" fn(input: *mut rdpInput, flags: UINT16, x: UINT16, y: UINT16) -> BOOL,
>;
pub type pFocusInEvent =
    ::std::option::Option<unsafe extern "C" fn(input: *mut rdpInput, toggleStates: UINT16) -> BOOL>;
pub type pKeyboardPauseEvent =
    ::std::option::Option<unsafe extern "C" fn(input: *mut rdpInput) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_input {
    pub context: *mut rdpContext,
    pub param1: *mut ::std::os::raw::c_void,
    pub paddingA: [UINT32; 14usize],
    pub SynchronizeEvent: pSynchronizeEvent,
    pub KeyboardEvent: pKeyboardEvent,
    pub UnicodeKeyboardEvent: pUnicodeKeyboardEvent,
    pub MouseEvent: pMouseEvent,
    pub ExtendedMouseEvent: pExtendedMouseEvent,
    pub FocusInEvent: pFocusInEvent,
    pub KeyboardPauseEvent: pKeyboardPauseEvent,
    pub paddingB: [UINT32; 9usize],
    pub asynchronous: BOOL,
    pub proxy: *mut rdpInputProxy,
    pub queue: *mut wMessageQueue,
}
#[test]
fn bindgen_test_layout_rdp_input() {
    assert_eq!(
        ::std::mem::size_of::<rdp_input>(),
        184usize,
        concat!("Size of: ", stringify!(rdp_input))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_input>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_input))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).param1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(param1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).paddingA as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).SynchronizeEvent as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(SynchronizeEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).KeyboardEvent as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(KeyboardEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).UnicodeKeyboardEvent as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(UnicodeKeyboardEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).MouseEvent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(MouseEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).ExtendedMouseEvent as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(ExtendedMouseEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).FocusInEvent as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(FocusInEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).KeyboardPauseEvent as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(KeyboardPauseEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).paddingB as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).asynchronous as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(asynchronous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).proxy as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_input>())).queue as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_input),
            "::",
            stringify!(queue)
        )
    );
}
extern "C" {
    pub fn freerdp_input_send_synchronize_event(input: *mut rdpInput, flags: UINT32) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_keyboard_event(
        input: *mut rdpInput,
        flags: UINT16,
        code: UINT16,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_keyboard_event_ex(
        input: *mut rdpInput,
        down: BOOL,
        rdp_scancode: UINT32,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_keyboard_pause_event(input: *mut rdpInput) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_unicode_keyboard_event(
        input: *mut rdpInput,
        flags: UINT16,
        code: UINT16,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_mouse_event(
        input: *mut rdpInput,
        flags: UINT16,
        x: UINT16,
        y: UINT16,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_extended_mouse_event(
        input: *mut rdpInput,
        flags: UINT16,
        x: UINT16,
        y: UINT16,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_input_send_focus_in_event(input: *mut rdpInput, toggleStates: UINT16) -> BOOL;
}
pub type rdpUpdate = rdp_update;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[test]
fn bindgen_test_layout_tagPOINT() {
    assert_eq!(
        ::std::mem::size_of::<tagPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(tagPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(tagPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type POINT = tagPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMSG {
    pub hwnd: HWND,
    pub message: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
    pub time: DWORD,
    pub pt: POINT,
}
#[test]
fn bindgen_test_layout_tagMSG() {
    assert_eq!(
        ::std::mem::size_of::<tagMSG>(),
        48usize,
        concat!("Size of: ", stringify!(tagMSG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagMSG>(),
        8usize,
        concat!("Alignment of ", stringify!(tagMSG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).hwnd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).wParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(wParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).lParam as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(lParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).pt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(pt)
        )
    );
}
pub type LPMSG = *mut tagMSG;
extern "C" {
    pub fn GetWindowWord(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> WORD;
}
extern "C" {
    pub fn GetWindowLongA(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG;
}
extern "C" {
    pub fn GetWindowLongW(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG;
}
extern "C" {
    pub fn GetWindowLongPtrA(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG_PTR;
}
extern "C" {
    pub fn GetWindowLongPtrW(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG_PTR;
}
extern "C" {
    pub fn CreateWindowExA(
        dwExStyle: DWORD,
        lpClassName: LPCSTR,
        lpWindowName: LPCSTR,
        dwStyle: DWORD,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        hWndParent: HWND,
        hMenu: HMENU,
        hInstance: HINSTANCE,
        lpParam: LPVOID,
    ) -> HWND;
}
extern "C" {
    pub fn CreateWindowExW(
        dwExStyle: DWORD,
        lpClassName: LPCWSTR,
        lpWindowName: LPCWSTR,
        dwStyle: DWORD,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        hWndParent: HWND,
        hMenu: HMENU,
        hInstance: HINSTANCE,
        lpParam: LPVOID,
    ) -> HWND;
}
extern "C" {
    pub fn GetMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) -> BOOL;
}
extern "C" {
    pub fn GetMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) -> BOOL;
}
extern "C" {
    pub fn GetMessagePos() -> DWORD;
}
extern "C" {
    pub fn GetMessageTime() -> LONG;
}
extern "C" {
    pub fn GetMessageExtraInfo() -> LPARAM;
}
extern "C" {
    pub fn WaitMessage() -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_UNICODE_STRING {
    pub length: UINT16,
    pub string: *mut BYTE,
}
#[test]
fn bindgen_test_layout__RAIL_UNICODE_STRING() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_UNICODE_STRING>(),
        16usize,
        concat!("Size of: ", stringify!(_RAIL_UNICODE_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_UNICODE_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(_RAIL_UNICODE_STRING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_UNICODE_STRING>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_UNICODE_STRING),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_UNICODE_STRING>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_UNICODE_STRING),
            "::",
            stringify!(string)
        )
    );
}
pub type RAIL_UNICODE_STRING = _RAIL_UNICODE_STRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_HIGH_CONTRAST {
    pub flags: UINT32,
    pub colorSchemeLength: UINT32,
    pub colorScheme: RAIL_UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__RAIL_HIGH_CONTRAST() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_HIGH_CONTRAST>(),
        24usize,
        concat!("Size of: ", stringify!(_RAIL_HIGH_CONTRAST))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_HIGH_CONTRAST>(),
        8usize,
        concat!("Alignment of ", stringify!(_RAIL_HIGH_CONTRAST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_HIGH_CONTRAST>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_HIGH_CONTRAST),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_HIGH_CONTRAST>())).colorSchemeLength as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_HIGH_CONTRAST),
            "::",
            stringify!(colorSchemeLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_HIGH_CONTRAST>())).colorScheme as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_HIGH_CONTRAST),
            "::",
            stringify!(colorScheme)
        )
    );
}
pub type RAIL_HIGH_CONTRAST = _RAIL_HIGH_CONTRAST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_HANDSHAKE_ORDER {
    pub buildNumber: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_HANDSHAKE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_HANDSHAKE_ORDER>(),
        4usize,
        concat!("Size of: ", stringify!(_RAIL_HANDSHAKE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_HANDSHAKE_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_HANDSHAKE_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_HANDSHAKE_ORDER>())).buildNumber as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_HANDSHAKE_ORDER),
            "::",
            stringify!(buildNumber)
        )
    );
}
pub type RAIL_HANDSHAKE_ORDER = _RAIL_HANDSHAKE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_HANDSHAKE_EX_ORDER {
    pub buildNumber: UINT32,
    pub railHandshakeFlags: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_HANDSHAKE_EX_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_HANDSHAKE_EX_ORDER>(),
        8usize,
        concat!("Size of: ", stringify!(_RAIL_HANDSHAKE_EX_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_HANDSHAKE_EX_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_HANDSHAKE_EX_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_HANDSHAKE_EX_ORDER>())).buildNumber as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_HANDSHAKE_EX_ORDER),
            "::",
            stringify!(buildNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_HANDSHAKE_EX_ORDER>())).railHandshakeFlags as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_HANDSHAKE_EX_ORDER),
            "::",
            stringify!(railHandshakeFlags)
        )
    );
}
pub type RAIL_HANDSHAKE_EX_ORDER = _RAIL_HANDSHAKE_EX_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_CLIENT_STATUS_ORDER {
    pub flags: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_CLIENT_STATUS_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_CLIENT_STATUS_ORDER>(),
        4usize,
        concat!("Size of: ", stringify!(_RAIL_CLIENT_STATUS_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_CLIENT_STATUS_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_CLIENT_STATUS_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_CLIENT_STATUS_ORDER>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_CLIENT_STATUS_ORDER),
            "::",
            stringify!(flags)
        )
    );
}
pub type RAIL_CLIENT_STATUS_ORDER = _RAIL_CLIENT_STATUS_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_EXEC_ORDER {
    pub flags: UINT16,
    pub RemoteApplicationProgram: *mut ::std::os::raw::c_char,
    pub RemoteApplicationWorkingDir: *mut ::std::os::raw::c_char,
    pub RemoteApplicationArguments: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__RAIL_EXEC_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_EXEC_ORDER>(),
        32usize,
        concat!("Size of: ", stringify!(_RAIL_EXEC_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_EXEC_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_RAIL_EXEC_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_EXEC_ORDER>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_EXEC_ORDER>())).RemoteApplicationProgram as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_ORDER),
            "::",
            stringify!(RemoteApplicationProgram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_EXEC_ORDER>())).RemoteApplicationWorkingDir as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_ORDER),
            "::",
            stringify!(RemoteApplicationWorkingDir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_EXEC_ORDER>())).RemoteApplicationArguments as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_ORDER),
            "::",
            stringify!(RemoteApplicationArguments)
        )
    );
}
pub type RAIL_EXEC_ORDER = _RAIL_EXEC_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_EXEC_RESULT_ORDER {
    pub flags: UINT16,
    pub execResult: UINT16,
    pub rawResult: UINT32,
    pub exeOrFile: RAIL_UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__RAIL_EXEC_RESULT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_EXEC_RESULT_ORDER>(),
        24usize,
        concat!("Size of: ", stringify!(_RAIL_EXEC_RESULT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_EXEC_RESULT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_RAIL_EXEC_RESULT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_EXEC_RESULT_ORDER>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_RESULT_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_EXEC_RESULT_ORDER>())).execResult as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_RESULT_ORDER),
            "::",
            stringify!(execResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_EXEC_RESULT_ORDER>())).rawResult as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_RESULT_ORDER),
            "::",
            stringify!(rawResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_EXEC_RESULT_ORDER>())).exeOrFile as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_EXEC_RESULT_ORDER),
            "::",
            stringify!(exeOrFile)
        )
    );
}
pub type RAIL_EXEC_RESULT_ORDER = _RAIL_EXEC_RESULT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TS_FILTERKEYS {
    pub Flags: UINT32,
    pub WaitTime: UINT32,
    pub DelayTime: UINT32,
    pub RepeatTime: UINT32,
    pub BounceTime: UINT32,
}
#[test]
fn bindgen_test_layout__TS_FILTERKEYS() {
    assert_eq!(
        ::std::mem::size_of::<_TS_FILTERKEYS>(),
        20usize,
        concat!("Size of: ", stringify!(_TS_FILTERKEYS))
    );
    assert_eq!(
        ::std::mem::align_of::<_TS_FILTERKEYS>(),
        4usize,
        concat!("Alignment of ", stringify!(_TS_FILTERKEYS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_FILTERKEYS>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_FILTERKEYS),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_FILTERKEYS>())).WaitTime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_FILTERKEYS),
            "::",
            stringify!(WaitTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_FILTERKEYS>())).DelayTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_FILTERKEYS),
            "::",
            stringify!(DelayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_FILTERKEYS>())).RepeatTime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_FILTERKEYS),
            "::",
            stringify!(RepeatTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_FILTERKEYS>())).BounceTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_FILTERKEYS),
            "::",
            stringify!(BounceTime)
        )
    );
}
pub type TS_FILTERKEYS = _TS_FILTERKEYS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_SYSPARAM_ORDER {
    pub param: UINT32,
    pub params: UINT32,
    pub dragFullWindows: BOOL,
    pub keyboardCues: BOOL,
    pub keyboardPref: BOOL,
    pub mouseButtonSwap: BOOL,
    pub workArea: RECTANGLE_16,
    pub displayChange: RECTANGLE_16,
    pub taskbarPos: RECTANGLE_16,
    pub highContrast: RAIL_HIGH_CONTRAST,
    pub caretWidth: UINT32,
    pub stickyKeys: UINT32,
    pub toggleKeys: UINT32,
    pub filterKeys: TS_FILTERKEYS,
    pub setScreenSaveActive: BOOL,
    pub setScreenSaveSecure: BOOL,
}
#[test]
fn bindgen_test_layout__RAIL_SYSPARAM_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_SYSPARAM_ORDER>(),
        112usize,
        concat!("Size of: ", stringify!(_RAIL_SYSPARAM_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_SYSPARAM_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_RAIL_SYSPARAM_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).param as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).params as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).dragFullWindows as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(dragFullWindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).keyboardCues as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(keyboardCues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).keyboardPref as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(keyboardPref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).mouseButtonSwap as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(mouseButtonSwap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).workArea as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(workArea)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).displayChange as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(displayChange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).taskbarPos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(taskbarPos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).highContrast as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(highContrast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).caretWidth as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(caretWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).stickyKeys as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(stickyKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).toggleKeys as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(toggleKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).filterKeys as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(filterKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).setScreenSaveActive as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(setScreenSaveActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_SYSPARAM_ORDER>())).setScreenSaveSecure as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSPARAM_ORDER),
            "::",
            stringify!(setScreenSaveSecure)
        )
    );
}
pub type RAIL_SYSPARAM_ORDER = _RAIL_SYSPARAM_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_ACTIVATE_ORDER {
    pub windowId: UINT32,
    pub enabled: BOOL,
}
#[test]
fn bindgen_test_layout__RAIL_ACTIVATE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_ACTIVATE_ORDER>(),
        8usize,
        concat!("Size of: ", stringify!(_RAIL_ACTIVATE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_ACTIVATE_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_ACTIVATE_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_ACTIVATE_ORDER>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_ACTIVATE_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_ACTIVATE_ORDER>())).enabled as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_ACTIVATE_ORDER),
            "::",
            stringify!(enabled)
        )
    );
}
pub type RAIL_ACTIVATE_ORDER = _RAIL_ACTIVATE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_SYSMENU_ORDER {
    pub windowId: UINT32,
    pub left: INT16,
    pub top: INT16,
}
#[test]
fn bindgen_test_layout__RAIL_SYSMENU_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_SYSMENU_ORDER>(),
        8usize,
        concat!("Size of: ", stringify!(_RAIL_SYSMENU_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_SYSMENU_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_SYSMENU_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSMENU_ORDER>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSMENU_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSMENU_ORDER>())).left as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSMENU_ORDER),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSMENU_ORDER>())).top as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSMENU_ORDER),
            "::",
            stringify!(top)
        )
    );
}
pub type RAIL_SYSMENU_ORDER = _RAIL_SYSMENU_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_SYSCOMMAND_ORDER {
    pub windowId: UINT32,
    pub command: UINT16,
}
#[test]
fn bindgen_test_layout__RAIL_SYSCOMMAND_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_SYSCOMMAND_ORDER>(),
        8usize,
        concat!("Size of: ", stringify!(_RAIL_SYSCOMMAND_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_SYSCOMMAND_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_SYSCOMMAND_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSCOMMAND_ORDER>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSCOMMAND_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SYSCOMMAND_ORDER>())).command as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SYSCOMMAND_ORDER),
            "::",
            stringify!(command)
        )
    );
}
pub type RAIL_SYSCOMMAND_ORDER = _RAIL_SYSCOMMAND_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_NOTIFY_EVENT_ORDER {
    pub windowId: UINT32,
    pub notifyIconId: UINT32,
    pub message: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_NOTIFY_EVENT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_NOTIFY_EVENT_ORDER>(),
        12usize,
        concat!("Size of: ", stringify!(_RAIL_NOTIFY_EVENT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_NOTIFY_EVENT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_NOTIFY_EVENT_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_NOTIFY_EVENT_ORDER>())).windowId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_NOTIFY_EVENT_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_NOTIFY_EVENT_ORDER>())).notifyIconId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_NOTIFY_EVENT_ORDER),
            "::",
            stringify!(notifyIconId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_NOTIFY_EVENT_ORDER>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_NOTIFY_EVENT_ORDER),
            "::",
            stringify!(message)
        )
    );
}
pub type RAIL_NOTIFY_EVENT_ORDER = _RAIL_NOTIFY_EVENT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_MINMAXINFO_ORDER {
    pub windowId: UINT32,
    pub maxWidth: INT16,
    pub maxHeight: INT16,
    pub maxPosX: INT16,
    pub maxPosY: INT16,
    pub minTrackWidth: INT16,
    pub minTrackHeight: INT16,
    pub maxTrackWidth: INT16,
    pub maxTrackHeight: INT16,
}
#[test]
fn bindgen_test_layout__RAIL_MINMAXINFO_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_MINMAXINFO_ORDER>(),
        20usize,
        concat!("Size of: ", stringify!(_RAIL_MINMAXINFO_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_MINMAXINFO_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_MINMAXINFO_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).maxWidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(maxWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).maxHeight as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(maxHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).maxPosX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(maxPosX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).maxPosY as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(maxPosY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).minTrackWidth as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(minTrackWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).minTrackHeight as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(minTrackHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).maxTrackWidth as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(maxTrackWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_MINMAXINFO_ORDER>())).maxTrackHeight as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_MINMAXINFO_ORDER),
            "::",
            stringify!(maxTrackHeight)
        )
    );
}
pub type RAIL_MINMAXINFO_ORDER = _RAIL_MINMAXINFO_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_LOCALMOVESIZE_ORDER {
    pub windowId: UINT32,
    pub isMoveSizeStart: BOOL,
    pub moveSizeType: UINT16,
    pub posX: INT16,
    pub posY: INT16,
}
#[test]
fn bindgen_test_layout__RAIL_LOCALMOVESIZE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_LOCALMOVESIZE_ORDER>(),
        16usize,
        concat!("Size of: ", stringify!(_RAIL_LOCALMOVESIZE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_LOCALMOVESIZE_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_LOCALMOVESIZE_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LOCALMOVESIZE_ORDER>())).windowId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LOCALMOVESIZE_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LOCALMOVESIZE_ORDER>())).isMoveSizeStart as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LOCALMOVESIZE_ORDER),
            "::",
            stringify!(isMoveSizeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LOCALMOVESIZE_ORDER>())).moveSizeType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LOCALMOVESIZE_ORDER),
            "::",
            stringify!(moveSizeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_LOCALMOVESIZE_ORDER>())).posX as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LOCALMOVESIZE_ORDER),
            "::",
            stringify!(posX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_LOCALMOVESIZE_ORDER>())).posY as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LOCALMOVESIZE_ORDER),
            "::",
            stringify!(posY)
        )
    );
}
pub type RAIL_LOCALMOVESIZE_ORDER = _RAIL_LOCALMOVESIZE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_WINDOWMOVE_ORDER {
    pub windowId: UINT32,
    pub left: INT16,
    pub top: INT16,
    pub right: INT16,
    pub bottom: INT16,
}
#[test]
fn bindgen_test_layout__RAIL_WINDOWMOVE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_WINDOWMOVE_ORDER>(),
        12usize,
        concat!("Size of: ", stringify!(_RAIL_WINDOWMOVE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_WINDOWMOVE_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_WINDOWMOVE_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_WINDOWMOVE_ORDER>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_WINDOWMOVE_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_WINDOWMOVE_ORDER>())).left as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_WINDOWMOVE_ORDER),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_WINDOWMOVE_ORDER>())).top as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_WINDOWMOVE_ORDER),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_WINDOWMOVE_ORDER>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_WINDOWMOVE_ORDER),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_WINDOWMOVE_ORDER>())).bottom as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_WINDOWMOVE_ORDER),
            "::",
            stringify!(bottom)
        )
    );
}
pub type RAIL_WINDOW_MOVE_ORDER = _RAIL_WINDOWMOVE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_GET_APPID_REQ_ORDER {
    pub windowId: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_GET_APPID_REQ_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_GET_APPID_REQ_ORDER>(),
        4usize,
        concat!("Size of: ", stringify!(_RAIL_GET_APPID_REQ_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_GET_APPID_REQ_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_GET_APPID_REQ_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_REQ_ORDER>())).windowId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_REQ_ORDER),
            "::",
            stringify!(windowId)
        )
    );
}
pub type RAIL_GET_APPID_REQ_ORDER = _RAIL_GET_APPID_REQ_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_GET_APPID_RESP_ORDER {
    pub windowId: UINT32,
    pub applicationId: [WCHAR; 260usize],
}
#[test]
fn bindgen_test_layout__RAIL_GET_APPID_RESP_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_GET_APPID_RESP_ORDER>(),
        524usize,
        concat!("Size of: ", stringify!(_RAIL_GET_APPID_RESP_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_GET_APPID_RESP_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_GET_APPID_RESP_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_RESP_ORDER>())).windowId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_RESP_ORDER),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_RESP_ORDER>())).applicationId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_RESP_ORDER),
            "::",
            stringify!(applicationId)
        )
    );
}
pub type RAIL_GET_APPID_RESP_ORDER = _RAIL_GET_APPID_RESP_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_LANGBAR_INFO_ORDER {
    pub languageBarStatus: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_LANGBAR_INFO_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_LANGBAR_INFO_ORDER>(),
        4usize,
        concat!("Size of: ", stringify!(_RAIL_LANGBAR_INFO_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_LANGBAR_INFO_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_LANGBAR_INFO_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LANGBAR_INFO_ORDER>())).languageBarStatus as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LANGBAR_INFO_ORDER),
            "::",
            stringify!(languageBarStatus)
        )
    );
}
pub type RAIL_LANGBAR_INFO_ORDER = _RAIL_LANGBAR_INFO_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_COMPARTMENT_INFO_ORDER {
    pub ImeState: UINT32,
    pub ImeConvMode: UINT32,
    pub ImeSentenceMode: UINT32,
    pub KanaMode: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_COMPARTMENT_INFO_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_COMPARTMENT_INFO_ORDER>(),
        16usize,
        concat!("Size of: ", stringify!(_RAIL_COMPARTMENT_INFO_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_COMPARTMENT_INFO_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_COMPARTMENT_INFO_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_COMPARTMENT_INFO_ORDER>())).ImeState as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_COMPARTMENT_INFO_ORDER),
            "::",
            stringify!(ImeState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_COMPARTMENT_INFO_ORDER>())).ImeConvMode as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_COMPARTMENT_INFO_ORDER),
            "::",
            stringify!(ImeConvMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_COMPARTMENT_INFO_ORDER>())).ImeSentenceMode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_COMPARTMENT_INFO_ORDER),
            "::",
            stringify!(ImeSentenceMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_COMPARTMENT_INFO_ORDER>())).KanaMode as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_COMPARTMENT_INFO_ORDER),
            "::",
            stringify!(KanaMode)
        )
    );
}
pub type RAIL_COMPARTMENT_INFO_ORDER = _RAIL_COMPARTMENT_INFO_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_ZORDER_SYNC {
    pub windowIdMarker: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_ZORDER_SYNC() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_ZORDER_SYNC>(),
        4usize,
        concat!("Size of: ", stringify!(_RAIL_ZORDER_SYNC))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_ZORDER_SYNC>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_ZORDER_SYNC))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_ZORDER_SYNC>())).windowIdMarker as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_ZORDER_SYNC),
            "::",
            stringify!(windowIdMarker)
        )
    );
}
pub type RAIL_ZORDER_SYNC = _RAIL_ZORDER_SYNC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_CLOAK {
    pub windowId: UINT32,
    pub cloak: BOOL,
}
#[test]
fn bindgen_test_layout__RAIL_CLOAK() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_CLOAK>(),
        8usize,
        concat!("Size of: ", stringify!(_RAIL_CLOAK))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_CLOAK>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_CLOAK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_CLOAK>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_CLOAK),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_CLOAK>())).cloak as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_CLOAK),
            "::",
            stringify!(cloak)
        )
    );
}
pub type RAIL_CLOAK = _RAIL_CLOAK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_POWER_DISPLAY_REQUEST {
    pub active: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_POWER_DISPLAY_REQUEST() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_POWER_DISPLAY_REQUEST>(),
        4usize,
        concat!("Size of: ", stringify!(_RAIL_POWER_DISPLAY_REQUEST))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_POWER_DISPLAY_REQUEST>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_POWER_DISPLAY_REQUEST))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_POWER_DISPLAY_REQUEST>())).active as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_POWER_DISPLAY_REQUEST),
            "::",
            stringify!(active)
        )
    );
}
pub type RAIL_POWER_DISPLAY_REQUEST = _RAIL_POWER_DISPLAY_REQUEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_TASKBAR_INFO_ORDER {
    pub TaskbarMessage: UINT32,
    pub WindowIdTab: UINT32,
    pub Body: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_TASKBAR_INFO_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_TASKBAR_INFO_ORDER>(),
        12usize,
        concat!("Size of: ", stringify!(_RAIL_TASKBAR_INFO_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_TASKBAR_INFO_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_TASKBAR_INFO_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_TASKBAR_INFO_ORDER>())).TaskbarMessage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_TASKBAR_INFO_ORDER),
            "::",
            stringify!(TaskbarMessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_TASKBAR_INFO_ORDER>())).WindowIdTab as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_TASKBAR_INFO_ORDER),
            "::",
            stringify!(WindowIdTab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_TASKBAR_INFO_ORDER>())).Body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_TASKBAR_INFO_ORDER),
            "::",
            stringify!(Body)
        )
    );
}
pub type RAIL_TASKBAR_INFO_ORDER = _RAIL_TASKBAR_INFO_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_LANGUAGEIME_INFO_ORDER {
    pub ProfileType: UINT32,
    pub LanguageID: UINT32,
    pub LanguageProfileCLSID: GUID,
    pub ProfileGUID: GUID,
    pub KeyboardLayout: UINT32,
}
#[test]
fn bindgen_test_layout__RAIL_LANGUAGEIME_INFO_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_LANGUAGEIME_INFO_ORDER>(),
        44usize,
        concat!("Size of: ", stringify!(_RAIL_LANGUAGEIME_INFO_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_LANGUAGEIME_INFO_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_LANGUAGEIME_INFO_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LANGUAGEIME_INFO_ORDER>())).ProfileType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LANGUAGEIME_INFO_ORDER),
            "::",
            stringify!(ProfileType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LANGUAGEIME_INFO_ORDER>())).LanguageID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LANGUAGEIME_INFO_ORDER),
            "::",
            stringify!(LanguageID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LANGUAGEIME_INFO_ORDER>())).LanguageProfileCLSID
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LANGUAGEIME_INFO_ORDER),
            "::",
            stringify!(LanguageProfileCLSID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LANGUAGEIME_INFO_ORDER>())).ProfileGUID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LANGUAGEIME_INFO_ORDER),
            "::",
            stringify!(ProfileGUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_LANGUAGEIME_INFO_ORDER>())).KeyboardLayout as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_LANGUAGEIME_INFO_ORDER),
            "::",
            stringify!(KeyboardLayout)
        )
    );
}
pub type RAIL_LANGUAGEIME_INFO_ORDER = _RAIL_LANGUAGEIME_INFO_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_SNAP_ARRANGE {
    pub windowId: UINT32,
    pub left: INT16,
    pub top: INT16,
    pub right: INT16,
    pub bottom: INT16,
}
#[test]
fn bindgen_test_layout__RAIL_SNAP_ARRANGE() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_SNAP_ARRANGE>(),
        12usize,
        concat!("Size of: ", stringify!(_RAIL_SNAP_ARRANGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_SNAP_ARRANGE>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_SNAP_ARRANGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SNAP_ARRANGE>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SNAP_ARRANGE),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SNAP_ARRANGE>())).left as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SNAP_ARRANGE),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SNAP_ARRANGE>())).top as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SNAP_ARRANGE),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SNAP_ARRANGE>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SNAP_ARRANGE),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RAIL_SNAP_ARRANGE>())).bottom as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_SNAP_ARRANGE),
            "::",
            stringify!(bottom)
        )
    );
}
pub type RAIL_SNAP_ARRANGE = _RAIL_SNAP_ARRANGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RAIL_GET_APPID_RESP_EX {
    pub windowID: UINT32,
    pub applicationID: [WCHAR; 260usize],
    pub processId: UINT32,
    pub processImageName: [WCHAR; 260usize],
}
#[test]
fn bindgen_test_layout__RAIL_GET_APPID_RESP_EX() {
    assert_eq!(
        ::std::mem::size_of::<_RAIL_GET_APPID_RESP_EX>(),
        1048usize,
        concat!("Size of: ", stringify!(_RAIL_GET_APPID_RESP_EX))
    );
    assert_eq!(
        ::std::mem::align_of::<_RAIL_GET_APPID_RESP_EX>(),
        4usize,
        concat!("Alignment of ", stringify!(_RAIL_GET_APPID_RESP_EX))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_RESP_EX>())).windowID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_RESP_EX),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_RESP_EX>())).applicationID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_RESP_EX),
            "::",
            stringify!(applicationID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_RESP_EX>())).processId as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_RESP_EX),
            "::",
            stringify!(processId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RAIL_GET_APPID_RESP_EX>())).processImageName as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_RAIL_GET_APPID_RESP_EX),
            "::",
            stringify!(processImageName)
        )
    );
}
pub type RAIL_GET_APPID_RESP_EX = _RAIL_GET_APPID_RESP_EX;
pub type rdpBitmap = rdp_bitmap;
pub type rdpPointer = rdp_pointer;
pub type rdpGlyph = rdp_glyph;
pub type pBitmap_New = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, bitmap: *mut rdpBitmap) -> BOOL,
>;
pub type pBitmap_Free =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext, bitmap: *mut rdpBitmap)>;
pub type pBitmap_Paint = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, bitmap: *mut rdpBitmap) -> BOOL,
>;
pub type pBitmap_Decompress = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        bitmap: *mut rdpBitmap,
        data: *const BYTE,
        width: UINT32,
        height: UINT32,
        bpp: UINT32,
        length: UINT32,
        compressed: BOOL,
        codec_id: UINT32,
    ) -> BOOL,
>;
pub type pBitmap_SetSurface = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, bitmap: *mut rdpBitmap, primary: BOOL) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_bitmap {
    pub size: size_t,
    pub New: pBitmap_New,
    pub Free: pBitmap_Free,
    pub Paint: pBitmap_Paint,
    pub Decompress: pBitmap_Decompress,
    pub SetSurface: pBitmap_SetSurface,
    pub paddingA: [UINT32; 10usize],
    pub left: UINT32,
    pub top: UINT32,
    pub right: UINT32,
    pub bottom: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub format: UINT32,
    pub flags: UINT32,
    pub length: UINT32,
    pub data: *mut BYTE,
    pub paddingB: [UINT32; 6usize],
    pub compressed: BOOL,
    pub ephemeral: BOOL,
    pub paddingC: [UINT32; 30usize],
}
#[test]
fn bindgen_test_layout_rdp_bitmap() {
    assert_eq!(
        ::std::mem::size_of::<rdp_bitmap>(),
        288usize,
        concat!("Size of: ", stringify!(rdp_bitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_bitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_bitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).New as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(New)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).Free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(Free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).Paint as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(Paint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).Decompress as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(Decompress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).SetSurface as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(SetSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).paddingA as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).left as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).top as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).right as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).bottom as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).width as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).height as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).format as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).length as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).data as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).paddingB as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).compressed as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).ephemeral as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(ephemeral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap>())).paddingC as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap),
            "::",
            stringify!(paddingC)
        )
    );
}
pub type pPointer_New = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, pointer: *mut rdpPointer) -> BOOL,
>;
pub type pPointer_Free =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext, pointer: *mut rdpPointer)>;
pub type pPointer_Set = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, pointer: *const rdpPointer) -> BOOL,
>;
pub type pPointer_SetNull =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> BOOL>;
pub type pPointer_SetDefault =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> BOOL>;
pub type pPointer_SetPosition = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, x: UINT32, y: UINT32) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_pointer {
    pub size: size_t,
    pub New: pPointer_New,
    pub Free: pPointer_Free,
    pub Set: pPointer_Set,
    pub SetNull: pPointer_SetNull,
    pub SetDefault: pPointer_SetDefault,
    pub SetPosition: pPointer_SetPosition,
    pub paddingA: [UINT32; 9usize],
    pub xPos: UINT32,
    pub yPos: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub xorBpp: UINT32,
    pub lengthAndMask: UINT32,
    pub lengthXorMask: UINT32,
    pub xorMaskData: *mut BYTE,
    pub andMaskData: *mut BYTE,
    pub paddingB: [UINT32; 7usize],
}
#[test]
fn bindgen_test_layout_rdp_pointer() {
    assert_eq!(
        ::std::mem::size_of::<rdp_pointer>(),
        168usize,
        concat!("Size of: ", stringify!(rdp_pointer))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_pointer>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_pointer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).New as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(New)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).Free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(Free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).Set as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(Set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).SetNull as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(SetNull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).SetDefault as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(SetDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).SetPosition as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(SetPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).paddingA as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).xPos as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(xPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).yPos as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(yPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).width as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).height as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).xorBpp as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(xorBpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).lengthAndMask as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(lengthAndMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).lengthXorMask as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(lengthXorMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).xorMaskData as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(xorMaskData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).andMaskData as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(andMaskData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer>())).paddingB as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer),
            "::",
            stringify!(paddingB)
        )
    );
}
pub type pGlyph_New = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, glyph: *const rdpGlyph) -> BOOL,
>;
pub type pGlyph_Free =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext, glyph: *mut rdpGlyph)>;
pub type pGlyph_Draw = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        glyph: *const rdpGlyph,
        x: INT32,
        y: INT32,
        w: INT32,
        h: INT32,
        sx: INT32,
        sy: INT32,
        fOpRedundant: BOOL,
    ) -> BOOL,
>;
pub type pGlyph_BeginDraw = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        x: INT32,
        y: INT32,
        width: INT32,
        height: INT32,
        bgcolor: UINT32,
        fgcolor: UINT32,
        fOpRedundant: BOOL,
    ) -> BOOL,
>;
pub type pGlyph_EndDraw = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        x: INT32,
        y: INT32,
        width: INT32,
        height: INT32,
        bgcolor: UINT32,
        fgcolor: UINT32,
    ) -> BOOL,
>;
pub type pGlyph_SetBounds = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        x: INT32,
        y: INT32,
        width: INT32,
        height: INT32,
    ) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_glyph {
    pub size: size_t,
    pub New: pGlyph_New,
    pub Free: pGlyph_Free,
    pub Draw: pGlyph_Draw,
    pub BeginDraw: pGlyph_BeginDraw,
    pub EndDraw: pGlyph_EndDraw,
    pub SetBounds: pGlyph_SetBounds,
    pub paddingA: [UINT32; 9usize],
    pub x: INT32,
    pub y: INT32,
    pub cx: UINT32,
    pub cy: UINT32,
    pub cb: UINT32,
    pub aj: *mut BYTE,
    pub paddingB: [UINT32; 10usize],
}
#[test]
fn bindgen_test_layout_rdp_glyph() {
    assert_eq!(
        ::std::mem::size_of::<rdp_glyph>(),
        160usize,
        concat!("Size of: ", stringify!(rdp_glyph))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_glyph>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_glyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).New as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(New)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).Free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(Free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).Draw as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(Draw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).BeginDraw as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(BeginDraw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).EndDraw as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(EndDraw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).SetBounds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(SetBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).paddingA as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).x as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).y as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).cx as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).cy as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).cb as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).aj as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(aj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph>())).paddingB as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph),
            "::",
            stringify!(paddingB)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_graphics {
    pub context: *mut rdpContext,
    pub Bitmap_Prototype: *mut rdpBitmap,
    pub Pointer_Prototype: *mut rdpPointer,
    pub Glyph_Prototype: *mut rdpGlyph,
    pub paddingA: [UINT32; 12usize],
}
#[test]
fn bindgen_test_layout_rdp_graphics() {
    assert_eq!(
        ::std::mem::size_of::<rdp_graphics>(),
        80usize,
        concat!("Size of: ", stringify!(rdp_graphics))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_graphics>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_graphics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_graphics>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_graphics),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_graphics>())).Bitmap_Prototype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_graphics),
            "::",
            stringify!(Bitmap_Prototype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_graphics>())).Pointer_Prototype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_graphics),
            "::",
            stringify!(Pointer_Prototype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_graphics>())).Glyph_Prototype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_graphics),
            "::",
            stringify!(Glyph_Prototype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_graphics>())).paddingA as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_graphics),
            "::",
            stringify!(paddingA)
        )
    );
}
extern "C" {
    pub fn graphics_register_bitmap(graphics: *mut rdpGraphics, bitmap: *mut rdpBitmap);
}
extern "C" {
    pub fn graphics_register_pointer(graphics: *mut rdpGraphics, pointer: *mut rdpPointer);
}
extern "C" {
    pub fn graphics_register_glyph(graphics: *mut rdpGraphics, glyph: *mut rdpGlyph);
}
extern "C" {
    pub fn graphics_new(context: *mut rdpContext) -> *mut rdpGraphics;
}
extern "C" {
    pub fn graphics_free(graphics: *mut rdpGraphics);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcap_header {
    pub magic_number: UINT32,
    pub version_major: UINT16,
    pub version_minor: UINT16,
    pub thiszone: INT32,
    pub sigfigs: UINT32,
    pub snaplen: UINT32,
    pub network: UINT32,
}
#[test]
fn bindgen_test_layout__pcap_header() {
    assert_eq!(
        ::std::mem::size_of::<_pcap_header>(),
        24usize,
        concat!("Size of: ", stringify!(_pcap_header))
    );
    assert_eq!(
        ::std::mem::align_of::<_pcap_header>(),
        4usize,
        concat!("Alignment of ", stringify!(_pcap_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).magic_number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(magic_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).version_major as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(version_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).version_minor as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(version_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).thiszone as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(thiszone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).sigfigs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(sigfigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).snaplen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(snaplen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_header>())).network as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_header),
            "::",
            stringify!(network)
        )
    );
}
pub type pcap_header = _pcap_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcap_record_header {
    pub ts_sec: UINT32,
    pub ts_usec: UINT32,
    pub incl_len: UINT32,
    pub orig_len: UINT32,
}
#[test]
fn bindgen_test_layout__pcap_record_header() {
    assert_eq!(
        ::std::mem::size_of::<_pcap_record_header>(),
        16usize,
        concat!("Size of: ", stringify!(_pcap_record_header))
    );
    assert_eq!(
        ::std::mem::align_of::<_pcap_record_header>(),
        4usize,
        concat!("Alignment of ", stringify!(_pcap_record_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record_header>())).ts_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record_header),
            "::",
            stringify!(ts_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record_header>())).ts_usec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record_header),
            "::",
            stringify!(ts_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record_header>())).incl_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record_header),
            "::",
            stringify!(incl_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record_header>())).orig_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record_header),
            "::",
            stringify!(orig_len)
        )
    );
}
pub type pcap_record_header = _pcap_record_header;
pub type pcap_record = _pcap_record;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _pcap_record {
    pub header: pcap_record_header,
    pub __bindgen_anon_1: _pcap_record__bindgen_ty_1,
    pub length: UINT32,
    pub next: *mut pcap_record,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _pcap_record__bindgen_ty_1 {
    pub data: *mut ::std::os::raw::c_void,
    pub cdata: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__pcap_record__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_pcap_record__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_pcap_record__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_pcap_record__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_pcap_record__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record__bindgen_ty_1>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pcap_record__bindgen_ty_1>())).cdata as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
}
#[test]
fn bindgen_test_layout__pcap_record() {
    assert_eq!(
        ::std::mem::size_of::<_pcap_record>(),
        40usize,
        concat!("Size of: ", stringify!(_pcap_record))
    );
    assert_eq!(
        ::std::mem::align_of::<_pcap_record>(),
        8usize,
        concat!("Alignment of ", stringify!(_pcap_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pcap_record>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_pcap_record),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_pcap {
    pub fp: *mut FILE,
    pub name: *mut ::std::os::raw::c_char,
    pub write: BOOL,
    pub file_size: INT64,
    pub record_count: ::std::os::raw::c_int,
    pub header: pcap_header,
    pub head: *mut pcap_record,
    pub tail: *mut pcap_record,
    pub record: *mut pcap_record,
}
#[test]
fn bindgen_test_layout_rdp_pcap() {
    assert_eq!(
        ::std::mem::size_of::<rdp_pcap>(),
        88usize,
        concat!("Size of: ", stringify!(rdp_pcap))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_pcap>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_pcap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).write as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).file_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(file_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).record_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(record_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).header as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).head as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).tail as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pcap>())).record as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pcap),
            "::",
            stringify!(record)
        )
    );
}
pub type rdpPcap = rdp_pcap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPH_DATA {
    pub cacheIndex: UINT32,
    pub x: INT16,
    pub y: INT16,
    pub cx: UINT32,
    pub cy: UINT32,
    pub cb: UINT32,
    pub aj: *mut BYTE,
}
#[test]
fn bindgen_test_layout__GLYPH_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_GLYPH_DATA>(),
        32usize,
        concat!("Size of: ", stringify!(_GLYPH_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_GLYPH_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_GLYPH_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).cacheIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).cx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).cy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA>())).aj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA),
            "::",
            stringify!(aj)
        )
    );
}
pub type GLYPH_DATA = _GLYPH_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPH_DATA_V2 {
    pub cacheIndex: UINT32,
    pub x: INT32,
    pub y: INT32,
    pub cx: UINT32,
    pub cy: UINT32,
    pub cb: UINT32,
    pub aj: *mut BYTE,
}
#[test]
fn bindgen_test_layout__GLYPH_DATA_V2() {
    assert_eq!(
        ::std::mem::size_of::<_GLYPH_DATA_V2>(),
        32usize,
        concat!("Size of: ", stringify!(_GLYPH_DATA_V2))
    );
    assert_eq!(
        ::std::mem::align_of::<_GLYPH_DATA_V2>(),
        8usize,
        concat!("Alignment of ", stringify!(_GLYPH_DATA_V2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).cacheIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).cx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).cy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).cb as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_DATA_V2>())).aj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_DATA_V2),
            "::",
            stringify!(aj)
        )
    );
}
pub type GLYPH_DATA_V2 = _GLYPH_DATA_V2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_bounds {
    pub left: INT32,
    pub top: INT32,
    pub right: INT32,
    pub bottom: INT32,
}
#[test]
fn bindgen_test_layout_rdp_bounds() {
    assert_eq!(
        ::std::mem::size_of::<rdp_bounds>(),
        16usize,
        concat!("Size of: ", stringify!(rdp_bounds))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_bounds>(),
        4usize,
        concat!("Alignment of ", stringify!(rdp_bounds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bounds>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bounds),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bounds>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bounds),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bounds>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bounds),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bounds>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bounds),
            "::",
            stringify!(bottom)
        )
    );
}
pub type rdpBounds = rdp_bounds;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_brush {
    pub x: UINT32,
    pub y: UINT32,
    pub bpp: UINT32,
    pub style: UINT32,
    pub hatch: UINT32,
    pub index: UINT32,
    pub data: *mut BYTE,
    pub p8x8: [BYTE; 8usize],
}
#[test]
fn bindgen_test_layout_rdp_brush() {
    assert_eq!(
        ::std::mem::size_of::<rdp_brush>(),
        40usize,
        concat!("Size of: ", stringify!(rdp_brush))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_brush>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_brush))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).bpp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).style as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).hatch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(hatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).index as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_brush>())).p8x8 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_brush),
            "::",
            stringify!(p8x8)
        )
    );
}
pub type rdpBrush = rdp_brush;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ORDER_INFO {
    pub controlFlags: UINT32,
    pub orderType: UINT32,
    pub fieldFlags: UINT32,
    pub boundsFlags: UINT32,
    pub bounds: rdpBounds,
    pub deltaCoordinates: BOOL,
}
#[test]
fn bindgen_test_layout__ORDER_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_ORDER_INFO>(),
        36usize,
        concat!("Size of: ", stringify!(_ORDER_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_ORDER_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(_ORDER_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ORDER_INFO>())).controlFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ORDER_INFO),
            "::",
            stringify!(controlFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ORDER_INFO>())).orderType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ORDER_INFO),
            "::",
            stringify!(orderType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ORDER_INFO>())).fieldFlags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ORDER_INFO),
            "::",
            stringify!(fieldFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ORDER_INFO>())).boundsFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ORDER_INFO),
            "::",
            stringify!(boundsFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ORDER_INFO>())).bounds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ORDER_INFO),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ORDER_INFO>())).deltaCoordinates as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ORDER_INFO),
            "::",
            stringify!(deltaCoordinates)
        )
    );
}
pub type ORDER_INFO = _ORDER_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DSTBLT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
}
#[test]
fn bindgen_test_layout__DSTBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DSTBLT_ORDER>(),
        20usize,
        concat!("Size of: ", stringify!(_DSTBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DSTBLT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_DSTBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DSTBLT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DSTBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DSTBLT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DSTBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DSTBLT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DSTBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DSTBLT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DSTBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DSTBLT_ORDER>())).bRop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DSTBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
}
pub type DSTBLT_ORDER = _DSTBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PATBLT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub brush: rdpBrush,
}
#[test]
fn bindgen_test_layout__PATBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_PATBLT_ORDER>(),
        72usize,
        concat!("Size of: ", stringify!(_PATBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_PATBLT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_PATBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).bRop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).backColor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).foreColor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PATBLT_ORDER>())).brush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PATBLT_ORDER),
            "::",
            stringify!(brush)
        )
    );
}
pub type PATBLT_ORDER = _PATBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRBLT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub nXSrc: INT32,
    pub nYSrc: INT32,
}
#[test]
fn bindgen_test_layout__SCRBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_SCRBLT_ORDER>(),
        28usize,
        concat!("Size of: ", stringify!(_SCRBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_SCRBLT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_SCRBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).bRop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).nXSrc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(nXSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SCRBLT_ORDER>())).nYSrc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SCRBLT_ORDER),
            "::",
            stringify!(nYSrc)
        )
    );
}
pub type SCRBLT_ORDER = _SCRBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPAQUE_RECT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub color: UINT32,
}
#[test]
fn bindgen_test_layout__OPAQUE_RECT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_OPAQUE_RECT_ORDER>(),
        20usize,
        concat!("Size of: ", stringify!(_OPAQUE_RECT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_OPAQUE_RECT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_OPAQUE_RECT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OPAQUE_RECT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OPAQUE_RECT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OPAQUE_RECT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OPAQUE_RECT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OPAQUE_RECT_ORDER>())).color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_OPAQUE_RECT_ORDER),
            "::",
            stringify!(color)
        )
    );
}
pub type OPAQUE_RECT_ORDER = _OPAQUE_RECT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_NINE_GRID_ORDER {
    pub srcLeft: INT32,
    pub srcTop: INT32,
    pub srcRight: INT32,
    pub srcBottom: INT32,
    pub bitmapId: UINT32,
}
#[test]
fn bindgen_test_layout__DRAW_NINE_GRID_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_NINE_GRID_ORDER>(),
        20usize,
        concat!("Size of: ", stringify!(_DRAW_NINE_GRID_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_NINE_GRID_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_DRAW_NINE_GRID_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_NINE_GRID_ORDER>())).srcLeft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_NINE_GRID_ORDER>())).srcTop as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_NINE_GRID_ORDER>())).srcRight as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_NINE_GRID_ORDER>())).srcBottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_NINE_GRID_ORDER>())).bitmapId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(bitmapId)
        )
    );
}
pub type DRAW_NINE_GRID_ORDER = _DRAW_NINE_GRID_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DELTA_RECT {
    pub left: INT32,
    pub top: INT32,
    pub width: INT32,
    pub height: INT32,
}
#[test]
fn bindgen_test_layout__DELTA_RECT() {
    assert_eq!(
        ::std::mem::size_of::<_DELTA_RECT>(),
        16usize,
        concat!("Size of: ", stringify!(_DELTA_RECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_DELTA_RECT>(),
        4usize,
        concat!("Alignment of ", stringify!(_DELTA_RECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DELTA_RECT>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DELTA_RECT),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DELTA_RECT>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DELTA_RECT),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DELTA_RECT>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DELTA_RECT),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DELTA_RECT>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DELTA_RECT),
            "::",
            stringify!(height)
        )
    );
}
pub type DELTA_RECT = _DELTA_RECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MULTI_DSTBLT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub numRectangles: UINT32,
    pub cbData: UINT32,
    pub rectangles: [DELTA_RECT; 45usize],
}
#[test]
fn bindgen_test_layout__MULTI_DSTBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MULTI_DSTBLT_ORDER>(),
        748usize,
        concat!("Size of: ", stringify!(_MULTI_DSTBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MULTI_DSTBLT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_MULTI_DSTBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).bRop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).numRectangles as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(numRectangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).cbData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_DSTBLT_ORDER>())).rectangles as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DSTBLT_ORDER),
            "::",
            stringify!(rectangles)
        )
    );
}
pub type MULTI_DSTBLT_ORDER = _MULTI_DSTBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MULTI_PATBLT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub brush: rdpBrush,
    pub numRectangles: UINT32,
    pub cbData: UINT32,
    pub rectangles: [DELTA_RECT; 45usize],
}
#[test]
fn bindgen_test_layout__MULTI_PATBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MULTI_PATBLT_ORDER>(),
        800usize,
        concat!("Size of: ", stringify!(_MULTI_PATBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MULTI_PATBLT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_MULTI_PATBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).bRop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).backColor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).foreColor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).brush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(brush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).numRectangles as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(numRectangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).cbData as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_PATBLT_ORDER>())).rectangles as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_PATBLT_ORDER),
            "::",
            stringify!(rectangles)
        )
    );
}
pub type MULTI_PATBLT_ORDER = _MULTI_PATBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MULTI_SCRBLT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub nXSrc: INT32,
    pub nYSrc: INT32,
    pub numRectangles: UINT32,
    pub cbData: UINT32,
    pub rectangles: [DELTA_RECT; 45usize],
}
#[test]
fn bindgen_test_layout__MULTI_SCRBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MULTI_SCRBLT_ORDER>(),
        756usize,
        concat!("Size of: ", stringify!(_MULTI_SCRBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MULTI_SCRBLT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_MULTI_SCRBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).nLeftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).nTopRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).bRop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).nXSrc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(nXSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).nYSrc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(nYSrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).numRectangles as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(numRectangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).cbData as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_SCRBLT_ORDER>())).rectangles as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_SCRBLT_ORDER),
            "::",
            stringify!(rectangles)
        )
    );
}
pub type MULTI_SCRBLT_ORDER = _MULTI_SCRBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MULTI_OPAQUE_RECT_ORDER {
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub color: UINT32,
    pub numRectangles: UINT32,
    pub cbData: UINT32,
    pub rectangles: [DELTA_RECT; 45usize],
}
#[test]
fn bindgen_test_layout__MULTI_OPAQUE_RECT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MULTI_OPAQUE_RECT_ORDER>(),
        748usize,
        concat!("Size of: ", stringify!(_MULTI_OPAQUE_RECT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MULTI_OPAQUE_RECT_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_MULTI_OPAQUE_RECT_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).nLeftRect as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).nTopRect as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).nHeight as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).numRectangles as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(numRectangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).cbData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_OPAQUE_RECT_ORDER>())).rectangles as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_OPAQUE_RECT_ORDER),
            "::",
            stringify!(rectangles)
        )
    );
}
pub type MULTI_OPAQUE_RECT_ORDER = _MULTI_OPAQUE_RECT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MULTI_DRAW_NINE_GRID_ORDER {
    pub srcLeft: INT32,
    pub srcTop: INT32,
    pub srcRight: INT32,
    pub srcBottom: INT32,
    pub bitmapId: UINT32,
    pub nDeltaEntries: UINT32,
    pub cbData: UINT32,
    pub rectangles: [DELTA_RECT; 45usize],
}
#[test]
fn bindgen_test_layout__MULTI_DRAW_NINE_GRID_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MULTI_DRAW_NINE_GRID_ORDER>(),
        748usize,
        concat!("Size of: ", stringify!(_MULTI_DRAW_NINE_GRID_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MULTI_DRAW_NINE_GRID_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_MULTI_DRAW_NINE_GRID_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).srcLeft as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcLeft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).srcTop as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcTop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).srcRight as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).srcBottom as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(srcBottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).bitmapId as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(bitmapId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).nDeltaEntries as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(nDeltaEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).cbData as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MULTI_DRAW_NINE_GRID_ORDER>())).rectangles as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MULTI_DRAW_NINE_GRID_ORDER),
            "::",
            stringify!(rectangles)
        )
    );
}
pub type MULTI_DRAW_NINE_GRID_ORDER = _MULTI_DRAW_NINE_GRID_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LINE_TO_ORDER {
    pub backMode: UINT32,
    pub nXStart: INT32,
    pub nYStart: INT32,
    pub nXEnd: INT32,
    pub nYEnd: INT32,
    pub backColor: UINT32,
    pub bRop2: UINT32,
    pub penStyle: UINT32,
    pub penWidth: UINT32,
    pub penColor: UINT32,
}
#[test]
fn bindgen_test_layout__LINE_TO_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_LINE_TO_ORDER>(),
        40usize,
        concat!("Size of: ", stringify!(_LINE_TO_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_LINE_TO_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_LINE_TO_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).backMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(backMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).nXStart as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(nXStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).nYStart as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(nYStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).nXEnd as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(nXEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).nYEnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(nYEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).backColor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).bRop2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(bRop2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).penStyle as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(penStyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).penWidth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(penWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LINE_TO_ORDER>())).penColor as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_LINE_TO_ORDER),
            "::",
            stringify!(penColor)
        )
    );
}
pub type LINE_TO_ORDER = _LINE_TO_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DELTA_POINT {
    pub x: INT32,
    pub y: INT32,
}
#[test]
fn bindgen_test_layout__DELTA_POINT() {
    assert_eq!(
        ::std::mem::size_of::<_DELTA_POINT>(),
        8usize,
        concat!("Size of: ", stringify!(_DELTA_POINT))
    );
    assert_eq!(
        ::std::mem::align_of::<_DELTA_POINT>(),
        4usize,
        concat!("Alignment of ", stringify!(_DELTA_POINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DELTA_POINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DELTA_POINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DELTA_POINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DELTA_POINT),
            "::",
            stringify!(y)
        )
    );
}
pub type DELTA_POINT = _DELTA_POINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POLYLINE_ORDER {
    pub xStart: INT32,
    pub yStart: INT32,
    pub bRop2: UINT32,
    pub penColor: UINT32,
    pub numDeltaEntries: UINT32,
    pub cbData: UINT32,
    pub points: *mut DELTA_POINT,
}
#[test]
fn bindgen_test_layout__POLYLINE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_POLYLINE_ORDER>(),
        32usize,
        concat!("Size of: ", stringify!(_POLYLINE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_POLYLINE_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_POLYLINE_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).xStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(xStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).yStart as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(yStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).bRop2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(bRop2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).penColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(penColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).numDeltaEntries as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(numDeltaEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).cbData as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYLINE_ORDER>())).points as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYLINE_ORDER),
            "::",
            stringify!(points)
        )
    );
}
pub type POLYLINE_ORDER = _POLYLINE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMBLT_ORDER {
    pub cacheId: UINT32,
    pub colorIndex: UINT32,
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub nXSrc: INT32,
    pub nYSrc: INT32,
    pub cacheIndex: UINT32,
    pub bitmap: *mut rdpBitmap,
}
#[test]
fn bindgen_test_layout__MEMBLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MEMBLT_ORDER>(),
        48usize,
        concat!("Size of: ", stringify!(_MEMBLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MEMBLT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_MEMBLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).colorIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(colorIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).nLeftRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).nTopRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).nWidth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).nHeight as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).bRop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).nXSrc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(nXSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).nYSrc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(nYSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).cacheIndex as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEMBLT_ORDER>())).bitmap as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEMBLT_ORDER),
            "::",
            stringify!(bitmap)
        )
    );
}
pub type MEMBLT_ORDER = _MEMBLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEM3BLT_ORDER {
    pub cacheId: UINT32,
    pub colorIndex: UINT32,
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nWidth: INT32,
    pub nHeight: INT32,
    pub bRop: UINT32,
    pub nXSrc: INT32,
    pub nYSrc: INT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub brush: rdpBrush,
    pub cacheIndex: UINT32,
    pub bitmap: *mut rdpBitmap,
}
#[test]
fn bindgen_test_layout__MEM3BLT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MEM3BLT_ORDER>(),
        104usize,
        concat!("Size of: ", stringify!(_MEM3BLT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MEM3BLT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_MEM3BLT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).colorIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(colorIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).nLeftRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).nTopRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).nWidth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).nHeight as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).bRop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(bRop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).nXSrc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(nXSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).nYSrc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(nYSrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).backColor as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).foreColor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).brush as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(brush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).cacheIndex as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MEM3BLT_ORDER>())).bitmap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_MEM3BLT_ORDER),
            "::",
            stringify!(bitmap)
        )
    );
}
pub type MEM3BLT_ORDER = _MEM3BLT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SAVE_BITMAP_ORDER {
    pub savedBitmapPosition: UINT32,
    pub nLeftRect: INT32,
    pub nTopRect: INT32,
    pub nRightRect: INT32,
    pub nBottomRect: INT32,
    pub operation: UINT32,
}
#[test]
fn bindgen_test_layout__SAVE_BITMAP_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_SAVE_BITMAP_ORDER>(),
        24usize,
        concat!("Size of: ", stringify!(_SAVE_BITMAP_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_SAVE_BITMAP_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_SAVE_BITMAP_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SAVE_BITMAP_ORDER>())).savedBitmapPosition as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SAVE_BITMAP_ORDER),
            "::",
            stringify!(savedBitmapPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SAVE_BITMAP_ORDER>())).nLeftRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SAVE_BITMAP_ORDER),
            "::",
            stringify!(nLeftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SAVE_BITMAP_ORDER>())).nTopRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SAVE_BITMAP_ORDER),
            "::",
            stringify!(nTopRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SAVE_BITMAP_ORDER>())).nRightRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SAVE_BITMAP_ORDER),
            "::",
            stringify!(nRightRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SAVE_BITMAP_ORDER>())).nBottomRect as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SAVE_BITMAP_ORDER),
            "::",
            stringify!(nBottomRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SAVE_BITMAP_ORDER>())).operation as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SAVE_BITMAP_ORDER),
            "::",
            stringify!(operation)
        )
    );
}
pub type SAVE_BITMAP_ORDER = _SAVE_BITMAP_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPH_INDEX_ORDER {
    pub cacheId: UINT32,
    pub flAccel: UINT32,
    pub ulCharInc: UINT32,
    pub fOpRedundant: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub bkLeft: INT32,
    pub bkTop: INT32,
    pub bkRight: INT32,
    pub bkBottom: INT32,
    pub opLeft: INT32,
    pub opTop: INT32,
    pub opRight: INT32,
    pub opBottom: INT32,
    pub brush: rdpBrush,
    pub x: INT32,
    pub y: INT32,
    pub cbData: UINT32,
    pub data: [BYTE; 256usize],
}
#[test]
fn bindgen_test_layout__GLYPH_INDEX_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_GLYPH_INDEX_ORDER>(),
        368usize,
        concat!("Size of: ", stringify!(_GLYPH_INDEX_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_GLYPH_INDEX_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_GLYPH_INDEX_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).flAccel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(flAccel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).ulCharInc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(ulCharInc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).fOpRedundant as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(fOpRedundant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).backColor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).foreColor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).bkLeft as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(bkLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).bkTop as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(bkTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).bkRight as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(bkRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).bkBottom as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(bkBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).opLeft as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(opLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).opTop as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(opTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).opRight as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(opRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).opBottom as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(opBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).brush as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(brush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).x as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).y as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).cbData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_INDEX_ORDER>())).data as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_INDEX_ORDER),
            "::",
            stringify!(data)
        )
    );
}
pub type GLYPH_INDEX_ORDER = _GLYPH_INDEX_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FAST_INDEX_ORDER {
    pub cacheId: UINT32,
    pub flAccel: UINT32,
    pub ulCharInc: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub bkLeft: INT32,
    pub bkTop: INT32,
    pub bkRight: INT32,
    pub bkBottom: INT32,
    pub opLeft: INT32,
    pub opTop: INT32,
    pub opRight: INT32,
    pub opBottom: INT32,
    pub opaqueRect: BOOL,
    pub x: INT32,
    pub y: INT32,
    pub cbData: UINT32,
    pub data: [BYTE; 256usize],
}
#[test]
fn bindgen_test_layout__FAST_INDEX_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_FAST_INDEX_ORDER>(),
        324usize,
        concat!("Size of: ", stringify!(_FAST_INDEX_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_FAST_INDEX_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_FAST_INDEX_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).flAccel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(flAccel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).ulCharInc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(ulCharInc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).backColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).foreColor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).bkLeft as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(bkLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).bkTop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(bkTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).bkRight as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(bkRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).bkBottom as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(bkBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).opLeft as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(opLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).opTop as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(opTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).opRight as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(opRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).opBottom as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(opBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).opaqueRect as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(opaqueRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).x as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).y as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).cbData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_INDEX_ORDER>())).data as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_INDEX_ORDER),
            "::",
            stringify!(data)
        )
    );
}
pub type FAST_INDEX_ORDER = _FAST_INDEX_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FAST_GLYPH_ORDER {
    pub cacheId: UINT32,
    pub flAccel: UINT32,
    pub ulCharInc: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub bkLeft: INT32,
    pub bkTop: INT32,
    pub bkRight: INT32,
    pub bkBottom: INT32,
    pub opLeft: INT32,
    pub opTop: INT32,
    pub opRight: INT32,
    pub opBottom: INT32,
    pub x: INT32,
    pub y: INT32,
    pub cbData: UINT32,
    pub data: [BYTE; 256usize],
    pub glyphData: GLYPH_DATA_V2,
}
#[test]
fn bindgen_test_layout__FAST_GLYPH_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_FAST_GLYPH_ORDER>(),
        352usize,
        concat!("Size of: ", stringify!(_FAST_GLYPH_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_FAST_GLYPH_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_FAST_GLYPH_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).flAccel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(flAccel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).ulCharInc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(ulCharInc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).backColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).foreColor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).bkLeft as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(bkLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).bkTop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(bkTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).bkRight as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(bkRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).bkBottom as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(bkBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).opLeft as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(opLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).opTop as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(opTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).opRight as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(opRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).opBottom as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(opBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).x as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).y as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).cbData as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).data as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FAST_GLYPH_ORDER>())).glyphData as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_FAST_GLYPH_ORDER),
            "::",
            stringify!(glyphData)
        )
    );
}
pub type FAST_GLYPH_ORDER = _FAST_GLYPH_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POLYGON_SC_ORDER {
    pub xStart: INT32,
    pub yStart: INT32,
    pub bRop2: UINT32,
    pub fillMode: UINT32,
    pub brushColor: UINT32,
    pub numPoints: UINT32,
    pub cbData: UINT32,
    pub points: *mut DELTA_POINT,
}
#[test]
fn bindgen_test_layout__POLYGON_SC_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_POLYGON_SC_ORDER>(),
        40usize,
        concat!("Size of: ", stringify!(_POLYGON_SC_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_POLYGON_SC_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_POLYGON_SC_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).xStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(xStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).yStart as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(yStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).bRop2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(bRop2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).fillMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(fillMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).brushColor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(brushColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).numPoints as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(numPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).cbData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_SC_ORDER>())).points as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_SC_ORDER),
            "::",
            stringify!(points)
        )
    );
}
pub type POLYGON_SC_ORDER = _POLYGON_SC_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POLYGON_CB_ORDER {
    pub xStart: INT32,
    pub yStart: INT32,
    pub bRop2: UINT32,
    pub backMode: UINT32,
    pub fillMode: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub brush: rdpBrush,
    pub numPoints: UINT32,
    pub cbData: UINT32,
    pub points: *mut DELTA_POINT,
}
#[test]
fn bindgen_test_layout__POLYGON_CB_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_POLYGON_CB_ORDER>(),
        88usize,
        concat!("Size of: ", stringify!(_POLYGON_CB_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_POLYGON_CB_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_POLYGON_CB_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).xStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(xStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).yStart as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(yStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).bRop2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(bRop2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).backMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(backMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).fillMode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(fillMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).backColor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).foreColor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).brush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(brush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).numPoints as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(numPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).cbData as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(cbData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POLYGON_CB_ORDER>())).points as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_POLYGON_CB_ORDER),
            "::",
            stringify!(points)
        )
    );
}
pub type POLYGON_CB_ORDER = _POLYGON_CB_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ELLIPSE_SC_ORDER {
    pub leftRect: INT32,
    pub topRect: INT32,
    pub rightRect: INT32,
    pub bottomRect: INT32,
    pub bRop2: UINT32,
    pub fillMode: UINT32,
    pub color: UINT32,
}
#[test]
fn bindgen_test_layout__ELLIPSE_SC_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_ELLIPSE_SC_ORDER>(),
        28usize,
        concat!("Size of: ", stringify!(_ELLIPSE_SC_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_ELLIPSE_SC_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_ELLIPSE_SC_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).leftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(leftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).topRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(topRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).rightRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(rightRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).bottomRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(bottomRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).bRop2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(bRop2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).fillMode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(fillMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_SC_ORDER>())).color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_SC_ORDER),
            "::",
            stringify!(color)
        )
    );
}
pub type ELLIPSE_SC_ORDER = _ELLIPSE_SC_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ELLIPSE_CB_ORDER {
    pub leftRect: INT32,
    pub topRect: INT32,
    pub rightRect: INT32,
    pub bottomRect: INT32,
    pub bRop2: UINT32,
    pub fillMode: UINT32,
    pub backColor: UINT32,
    pub foreColor: UINT32,
    pub brush: rdpBrush,
}
#[test]
fn bindgen_test_layout__ELLIPSE_CB_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_ELLIPSE_CB_ORDER>(),
        72usize,
        concat!("Size of: ", stringify!(_ELLIPSE_CB_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_ELLIPSE_CB_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_ELLIPSE_CB_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).leftRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(leftRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).topRect as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(topRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).rightRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(rightRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).bottomRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(bottomRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).bRop2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(bRop2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).fillMode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(fillMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).backColor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).foreColor as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ELLIPSE_CB_ORDER>())).brush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ELLIPSE_CB_ORDER),
            "::",
            stringify!(brush)
        )
    );
}
pub type ELLIPSE_CB_ORDER = _ELLIPSE_CB_ORDER;
pub type pDstBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, dstblt: *const DSTBLT_ORDER) -> BOOL,
>;
pub type pPatBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, patblt: *mut PATBLT_ORDER) -> BOOL,
>;
pub type pScrBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, scrblt: *const SCRBLT_ORDER) -> BOOL,
>;
pub type pOpaqueRect = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, opaque_rect: *const OPAQUE_RECT_ORDER) -> BOOL,
>;
pub type pDrawNineGrid = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_nine_grid: *const DRAW_NINE_GRID_ORDER,
    ) -> BOOL,
>;
pub type pMultiDstBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, multi_dstblt: *const MULTI_DSTBLT_ORDER) -> BOOL,
>;
pub type pMultiPatBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, multi_patblt: *const MULTI_PATBLT_ORDER) -> BOOL,
>;
pub type pMultiScrBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, multi_scrblt: *const MULTI_SCRBLT_ORDER) -> BOOL,
>;
pub type pMultiOpaqueRect = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        multi_opaque_rect: *const MULTI_OPAQUE_RECT_ORDER,
    ) -> BOOL,
>;
pub type pMultiDrawNineGrid = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        multi_draw_nine_grid: *const MULTI_DRAW_NINE_GRID_ORDER,
    ) -> BOOL,
>;
pub type pLineTo = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, line_to: *const LINE_TO_ORDER) -> BOOL,
>;
pub type pPolyline = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, polyline: *const POLYLINE_ORDER) -> BOOL,
>;
pub type pMemBlt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, memblt: *mut MEMBLT_ORDER) -> BOOL,
>;
pub type pMem3Blt = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, memblt: *mut MEM3BLT_ORDER) -> BOOL,
>;
pub type pSaveBitmap = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, save_bitmap: *const SAVE_BITMAP_ORDER) -> BOOL,
>;
pub type pGlyphIndex = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, glyph_index: *mut GLYPH_INDEX_ORDER) -> BOOL,
>;
pub type pFastIndex = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, fast_index: *const FAST_INDEX_ORDER) -> BOOL,
>;
pub type pFastGlyph = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, fast_glyph: *const FAST_GLYPH_ORDER) -> BOOL,
>;
pub type pPolygonSC = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, polygon_sc: *const POLYGON_SC_ORDER) -> BOOL,
>;
pub type pPolygonCB = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, polygon_cb: *mut POLYGON_CB_ORDER) -> BOOL,
>;
pub type pEllipseSC = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, ellipse_sc: *const ELLIPSE_SC_ORDER) -> BOOL,
>;
pub type pEllipseCB = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, ellipse_cb: *const ELLIPSE_CB_ORDER) -> BOOL,
>;
pub type pOrderInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        order_info: *const ORDER_INFO,
        order_name: *const ::std::os::raw::c_char,
    ) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_primary_update {
    pub context: *mut rdpContext,
    pub paddingA: [UINT32; 15usize],
    pub DstBlt: pDstBlt,
    pub PatBlt: pPatBlt,
    pub ScrBlt: pScrBlt,
    pub OpaqueRect: pOpaqueRect,
    pub DrawNineGrid: pDrawNineGrid,
    pub MultiDstBlt: pMultiDstBlt,
    pub MultiPatBlt: pMultiPatBlt,
    pub MultiScrBlt: pMultiScrBlt,
    pub MultiOpaqueRect: pMultiOpaqueRect,
    pub MultiDrawNineGrid: pMultiDrawNineGrid,
    pub LineTo: pLineTo,
    pub Polyline: pPolyline,
    pub MemBlt: pMemBlt,
    pub Mem3Blt: pMem3Blt,
    pub SaveBitmap: pSaveBitmap,
    pub GlyphIndex: pGlyphIndex,
    pub FastIndex: pFastIndex,
    pub FastGlyph: pFastGlyph,
    pub PolygonSC: pPolygonSC,
    pub PolygonCB: pPolygonCB,
    pub EllipseSC: pEllipseSC,
    pub EllipseCB: pEllipseCB,
    pub OrderInfo: pOrderInfo,
    pub paddingB: [UINT32; 9usize],
    pub order_info: ORDER_INFO,
    pub dstblt: DSTBLT_ORDER,
    pub patblt: PATBLT_ORDER,
    pub scrblt: SCRBLT_ORDER,
    pub opaque_rect: OPAQUE_RECT_ORDER,
    pub draw_nine_grid: DRAW_NINE_GRID_ORDER,
    pub multi_dstblt: MULTI_DSTBLT_ORDER,
    pub multi_patblt: MULTI_PATBLT_ORDER,
    pub multi_scrblt: MULTI_SCRBLT_ORDER,
    pub multi_opaque_rect: MULTI_OPAQUE_RECT_ORDER,
    pub multi_draw_nine_grid: MULTI_DRAW_NINE_GRID_ORDER,
    pub line_to: LINE_TO_ORDER,
    pub polyline: POLYLINE_ORDER,
    pub memblt: MEMBLT_ORDER,
    pub mem3blt: MEM3BLT_ORDER,
    pub save_bitmap: SAVE_BITMAP_ORDER,
    pub glyph_index: GLYPH_INDEX_ORDER,
    pub fast_index: FAST_INDEX_ORDER,
    pub fast_glyph: FAST_GLYPH_ORDER,
    pub polygon_sc: POLYGON_SC_ORDER,
    pub polygon_cb: POLYGON_CB_ORDER,
    pub ellipse_sc: ELLIPSE_SC_ORDER,
    pub ellipse_cb: ELLIPSE_CB_ORDER,
}
#[test]
fn bindgen_test_layout_rdp_primary_update() {
    assert_eq!(
        ::std::mem::size_of::<rdp_primary_update>(),
        5824usize,
        concat!("Size of: ", stringify!(rdp_primary_update))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_primary_update>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_primary_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).paddingA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).DstBlt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(DstBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).PatBlt as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(PatBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).ScrBlt as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(ScrBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).OpaqueRect as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(OpaqueRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).DrawNineGrid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(DrawNineGrid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).MultiDstBlt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(MultiDstBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).MultiPatBlt as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(MultiPatBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).MultiScrBlt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(MultiScrBlt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_primary_update>())).MultiOpaqueRect as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(MultiOpaqueRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_primary_update>())).MultiDrawNineGrid as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(MultiDrawNineGrid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).LineTo as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(LineTo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).Polyline as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(Polyline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).MemBlt as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(MemBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).Mem3Blt as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(Mem3Blt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).SaveBitmap as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(SaveBitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).GlyphIndex as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(GlyphIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).FastIndex as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(FastIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).FastGlyph as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(FastGlyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).PolygonSC as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(PolygonSC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).PolygonCB as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(PolygonCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).EllipseSC as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(EllipseSC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).EllipseCB as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(EllipseCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).OrderInfo as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(OrderInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).paddingB as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).order_info as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(order_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).dstblt as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(dstblt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).patblt as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(patblt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).scrblt as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(scrblt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).opaque_rect as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(opaque_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_primary_update>())).draw_nine_grid as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(draw_nine_grid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).multi_dstblt as *const _ as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(multi_dstblt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).multi_patblt as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(multi_patblt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).multi_scrblt as *const _ as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(multi_scrblt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_primary_update>())).multi_opaque_rect as *const _ as usize
        },
        2796usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(multi_opaque_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_primary_update>())).multi_draw_nine_grid as *const _ as usize
        },
        3544usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(multi_draw_nine_grid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).line_to as *const _ as usize },
        4292usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(line_to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).polyline as *const _ as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(polyline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).memblt as *const _ as usize },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(memblt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).mem3blt as *const _ as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(mem3blt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).save_bitmap as *const _ as usize },
        4520usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(save_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).glyph_index as *const _ as usize },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(glyph_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).fast_index as *const _ as usize },
        4912usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(fast_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).fast_glyph as *const _ as usize },
        5240usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(fast_glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).polygon_sc as *const _ as usize },
        5592usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(polygon_sc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).polygon_cb as *const _ as usize },
        5632usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(polygon_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).ellipse_sc as *const _ as usize },
        5720usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(ellipse_sc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_primary_update>())).ellipse_cb as *const _ as usize },
        5752usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_primary_update),
            "::",
            stringify!(ellipse_cb)
        )
    );
}
pub type rdpPrimaryUpdate = rdp_primary_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_BITMAP_ORDER {
    pub cacheId: UINT32,
    pub bitmapBpp: UINT32,
    pub bitmapWidth: UINT32,
    pub bitmapHeight: UINT32,
    pub bitmapLength: UINT32,
    pub cacheIndex: UINT32,
    pub compressed: BOOL,
    pub bitmapComprHdr: [BYTE; 8usize],
    pub bitmapDataStream: *mut BYTE,
}
#[test]
fn bindgen_test_layout__CACHE_BITMAP_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_BITMAP_ORDER>(),
        48usize,
        concat!("Size of: ", stringify!(_CACHE_BITMAP_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_BITMAP_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_CACHE_BITMAP_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).bitmapBpp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(bitmapBpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).bitmapWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(bitmapWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).bitmapHeight as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(bitmapHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).bitmapLength as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(bitmapLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).cacheIndex as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).compressed as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).bitmapComprHdr as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(bitmapComprHdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_ORDER>())).bitmapDataStream as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_ORDER),
            "::",
            stringify!(bitmapDataStream)
        )
    );
}
pub type CACHE_BITMAP_ORDER = _CACHE_BITMAP_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_BITMAP_V2_ORDER {
    pub cacheId: UINT32,
    pub flags: UINT32,
    pub key1: UINT32,
    pub key2: UINT32,
    pub bitmapBpp: UINT32,
    pub bitmapWidth: UINT32,
    pub bitmapHeight: UINT32,
    pub bitmapLength: UINT32,
    pub cacheIndex: UINT32,
    pub compressed: BOOL,
    pub cbCompFirstRowSize: UINT32,
    pub cbCompMainBodySize: UINT32,
    pub cbScanWidth: UINT32,
    pub cbUncompressedSize: UINT32,
    pub bitmapDataStream: *mut BYTE,
}
#[test]
fn bindgen_test_layout__CACHE_BITMAP_V2_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_BITMAP_V2_ORDER>(),
        64usize,
        concat!("Size of: ", stringify!(_CACHE_BITMAP_V2_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_BITMAP_V2_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_CACHE_BITMAP_V2_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).key1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(key1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).key2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(key2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).bitmapBpp as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(bitmapBpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).bitmapWidth as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(bitmapWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).bitmapHeight as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(bitmapHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).bitmapLength as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(bitmapLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).cacheIndex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).compressed as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).cbCompFirstRowSize as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(cbCompFirstRowSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).cbCompMainBodySize as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(cbCompMainBodySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).cbScanWidth as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(cbScanWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).cbUncompressedSize as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(cbUncompressedSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V2_ORDER>())).bitmapDataStream as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V2_ORDER),
            "::",
            stringify!(bitmapDataStream)
        )
    );
}
pub type CACHE_BITMAP_V2_ORDER = _CACHE_BITMAP_V2_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_DATA_EX {
    pub bpp: UINT32,
    pub codecID: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub length: UINT32,
    pub data: *mut BYTE,
}
#[test]
fn bindgen_test_layout__BITMAP_DATA_EX() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_DATA_EX>(),
        32usize,
        concat!("Size of: ", stringify!(_BITMAP_DATA_EX))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_DATA_EX>(),
        8usize,
        concat!("Alignment of ", stringify!(_BITMAP_DATA_EX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA_EX>())).bpp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA_EX),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA_EX>())).codecID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA_EX),
            "::",
            stringify!(codecID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA_EX>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA_EX),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA_EX>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA_EX),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA_EX>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA_EX),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA_EX>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA_EX),
            "::",
            stringify!(data)
        )
    );
}
pub type BITMAP_DATA_EX = _BITMAP_DATA_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_BITMAP_V3_ORDER {
    pub cacheId: UINT32,
    pub bpp: UINT32,
    pub flags: UINT32,
    pub cacheIndex: UINT32,
    pub key1: UINT32,
    pub key2: UINT32,
    pub bitmapData: BITMAP_DATA_EX,
}
#[test]
fn bindgen_test_layout__CACHE_BITMAP_V3_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_BITMAP_V3_ORDER>(),
        56usize,
        concat!("Size of: ", stringify!(_CACHE_BITMAP_V3_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_BITMAP_V3_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_CACHE_BITMAP_V3_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).bpp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).cacheIndex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).key1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(key1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).key2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(key2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_BITMAP_V3_ORDER>())).bitmapData as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BITMAP_V3_ORDER),
            "::",
            stringify!(bitmapData)
        )
    );
}
pub type CACHE_BITMAP_V3_ORDER = _CACHE_BITMAP_V3_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_COLOR_TABLE_ORDER {
    pub cacheIndex: UINT32,
    pub numberColors: UINT32,
    pub colorTable: [UINT32; 256usize],
}
#[test]
fn bindgen_test_layout__CACHE_COLOR_TABLE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_COLOR_TABLE_ORDER>(),
        1032usize,
        concat!("Size of: ", stringify!(_CACHE_COLOR_TABLE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_COLOR_TABLE_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_CACHE_COLOR_TABLE_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_COLOR_TABLE_ORDER>())).cacheIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_COLOR_TABLE_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_COLOR_TABLE_ORDER>())).numberColors as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_COLOR_TABLE_ORDER),
            "::",
            stringify!(numberColors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_COLOR_TABLE_ORDER>())).colorTable as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_COLOR_TABLE_ORDER),
            "::",
            stringify!(colorTable)
        )
    );
}
pub type CACHE_COLOR_TABLE_ORDER = _CACHE_COLOR_TABLE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_GLYPH_ORDER {
    pub cacheId: UINT32,
    pub cGlyphs: UINT32,
    pub glyphData: [GLYPH_DATA; 256usize],
    pub unicodeCharacters: *mut WCHAR,
}
#[test]
fn bindgen_test_layout__CACHE_GLYPH_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_GLYPH_ORDER>(),
        8208usize,
        concat!("Size of: ", stringify!(_CACHE_GLYPH_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_GLYPH_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_CACHE_GLYPH_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_ORDER>())).cGlyphs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_ORDER),
            "::",
            stringify!(cGlyphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_ORDER>())).glyphData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_ORDER),
            "::",
            stringify!(glyphData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_GLYPH_ORDER>())).unicodeCharacters as *const _ as usize
        },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_ORDER),
            "::",
            stringify!(unicodeCharacters)
        )
    );
}
pub type CACHE_GLYPH_ORDER = _CACHE_GLYPH_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_GLYPH_V2_ORDER {
    pub cacheId: UINT32,
    pub flags: UINT32,
    pub cGlyphs: UINT32,
    pub glyphData: [GLYPH_DATA_V2; 256usize],
    pub unicodeCharacters: *mut WCHAR,
}
#[test]
fn bindgen_test_layout__CACHE_GLYPH_V2_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_GLYPH_V2_ORDER>(),
        8216usize,
        concat!("Size of: ", stringify!(_CACHE_GLYPH_V2_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_GLYPH_V2_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_CACHE_GLYPH_V2_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_V2_ORDER>())).cacheId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_V2_ORDER),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_V2_ORDER>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_V2_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_V2_ORDER>())).cGlyphs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_V2_ORDER),
            "::",
            stringify!(cGlyphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_GLYPH_V2_ORDER>())).glyphData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_V2_ORDER),
            "::",
            stringify!(glyphData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CACHE_GLYPH_V2_ORDER>())).unicodeCharacters as *const _ as usize
        },
        8208usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_GLYPH_V2_ORDER),
            "::",
            stringify!(unicodeCharacters)
        )
    );
}
pub type CACHE_GLYPH_V2_ORDER = _CACHE_GLYPH_V2_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_BRUSH_ORDER {
    pub index: UINT32,
    pub bpp: UINT32,
    pub cx: UINT32,
    pub cy: UINT32,
    pub style: UINT32,
    pub length: UINT32,
    pub data: [BYTE; 256usize],
}
#[test]
fn bindgen_test_layout__CACHE_BRUSH_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CACHE_BRUSH_ORDER>(),
        280usize,
        concat!("Size of: ", stringify!(_CACHE_BRUSH_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHE_BRUSH_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_CACHE_BRUSH_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).bpp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).cx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).cy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).style as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHE_BRUSH_ORDER>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHE_BRUSH_ORDER),
            "::",
            stringify!(data)
        )
    );
}
pub type CACHE_BRUSH_ORDER = _CACHE_BRUSH_ORDER;
pub type pCacheBitmap = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_bitmap_order: *const CACHE_BITMAP_ORDER,
    ) -> BOOL,
>;
pub type pCacheBitmapV2 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_bitmap_v2_order: *mut CACHE_BITMAP_V2_ORDER,
    ) -> BOOL,
>;
pub type pCacheBitmapV3 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_bitmap_v3_order: *mut CACHE_BITMAP_V3_ORDER,
    ) -> BOOL,
>;
pub type pCacheColorTable = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_color_table_order: *const CACHE_COLOR_TABLE_ORDER,
    ) -> BOOL,
>;
pub type pCacheGlyph = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_glyph_order: *const CACHE_GLYPH_ORDER,
    ) -> BOOL,
>;
pub type pCacheGlyphV2 = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_glyph_v2_order: *const CACHE_GLYPH_V2_ORDER,
    ) -> BOOL,
>;
pub type pCacheBrush = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cache_brush_order: *const CACHE_BRUSH_ORDER,
    ) -> BOOL,
>;
pub type pCacheOrderInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderLength: UINT16,
        extraFlags: UINT16,
        orderType: UINT8,
        orderName: *const ::std::os::raw::c_char,
    ) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_secondary_update {
    pub context: *mut rdpContext,
    pub paddingA: [UINT32; 15usize],
    pub CacheBitmap: pCacheBitmap,
    pub CacheBitmapV2: pCacheBitmapV2,
    pub CacheBitmapV3: pCacheBitmapV3,
    pub CacheColorTable: pCacheColorTable,
    pub CacheGlyph: pCacheGlyph,
    pub CacheGlyphV2: pCacheGlyphV2,
    pub CacheBrush: pCacheBrush,
    pub CacheOrderInfo: pCacheOrderInfo,
    pub paddingE: [UINT32; 8usize],
    pub glyph_v2: BOOL,
}
#[test]
fn bindgen_test_layout_rdp_secondary_update() {
    assert_eq!(
        ::std::mem::size_of::<rdp_secondary_update>(),
        176usize,
        concat!("Size of: ", stringify!(rdp_secondary_update))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_secondary_update>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_secondary_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_secondary_update>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_secondary_update>())).paddingA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_secondary_update>())).CacheBitmap as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheBitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_secondary_update>())).CacheBitmapV2 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheBitmapV2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_secondary_update>())).CacheBitmapV3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheBitmapV3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_secondary_update>())).CacheColorTable as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheColorTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_secondary_update>())).CacheGlyph as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheGlyph)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_secondary_update>())).CacheGlyphV2 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheGlyphV2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_secondary_update>())).CacheBrush as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheBrush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_secondary_update>())).CacheOrderInfo as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(CacheOrderInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_secondary_update>())).paddingE as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(paddingE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_secondary_update>())).glyph_v2 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_secondary_update),
            "::",
            stringify!(glyph_v2)
        )
    );
}
pub type rdpSecondaryUpdate = rdp_secondary_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OFFSCREEN_DELETE_LIST {
    pub sIndices: UINT32,
    pub cIndices: UINT32,
    pub indices: *mut UINT16,
}
#[test]
fn bindgen_test_layout__OFFSCREEN_DELETE_LIST() {
    assert_eq!(
        ::std::mem::size_of::<_OFFSCREEN_DELETE_LIST>(),
        16usize,
        concat!("Size of: ", stringify!(_OFFSCREEN_DELETE_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<_OFFSCREEN_DELETE_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(_OFFSCREEN_DELETE_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OFFSCREEN_DELETE_LIST>())).sIndices as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OFFSCREEN_DELETE_LIST),
            "::",
            stringify!(sIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OFFSCREEN_DELETE_LIST>())).cIndices as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OFFSCREEN_DELETE_LIST),
            "::",
            stringify!(cIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OFFSCREEN_DELETE_LIST>())).indices as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OFFSCREEN_DELETE_LIST),
            "::",
            stringify!(indices)
        )
    );
}
pub type OFFSCREEN_DELETE_LIST = _OFFSCREEN_DELETE_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CREATE_OFFSCREEN_BITMAP_ORDER {
    pub id: UINT32,
    pub cx: UINT32,
    pub cy: UINT32,
    pub deleteList: OFFSCREEN_DELETE_LIST,
}
#[test]
fn bindgen_test_layout__CREATE_OFFSCREEN_BITMAP_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CREATE_OFFSCREEN_BITMAP_ORDER>(),
        32usize,
        concat!("Size of: ", stringify!(_CREATE_OFFSCREEN_BITMAP_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CREATE_OFFSCREEN_BITMAP_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_CREATE_OFFSCREEN_BITMAP_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_OFFSCREEN_BITMAP_ORDER>())).id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_OFFSCREEN_BITMAP_ORDER),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_OFFSCREEN_BITMAP_ORDER>())).cx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_OFFSCREEN_BITMAP_ORDER),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_OFFSCREEN_BITMAP_ORDER>())).cy as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_OFFSCREEN_BITMAP_ORDER),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_OFFSCREEN_BITMAP_ORDER>())).deleteList as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_OFFSCREEN_BITMAP_ORDER),
            "::",
            stringify!(deleteList)
        )
    );
}
pub type CREATE_OFFSCREEN_BITMAP_ORDER = _CREATE_OFFSCREEN_BITMAP_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SWITCH_SURFACE_ORDER {
    pub bitmapId: UINT32,
}
#[test]
fn bindgen_test_layout__SWITCH_SURFACE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_SWITCH_SURFACE_ORDER>(),
        4usize,
        concat!("Size of: ", stringify!(_SWITCH_SURFACE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_SWITCH_SURFACE_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_SWITCH_SURFACE_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SWITCH_SURFACE_ORDER>())).bitmapId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SWITCH_SURFACE_ORDER),
            "::",
            stringify!(bitmapId)
        )
    );
}
pub type SWITCH_SURFACE_ORDER = _SWITCH_SURFACE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NINE_GRID_BITMAP_INFO {
    pub flFlags: UINT32,
    pub ulLeftWidth: UINT32,
    pub ulRightWidth: UINT32,
    pub ulTopHeight: UINT32,
    pub ulBottomHeight: UINT32,
    pub crTransparent: UINT32,
}
#[test]
fn bindgen_test_layout__NINE_GRID_BITMAP_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_NINE_GRID_BITMAP_INFO>(),
        24usize,
        concat!("Size of: ", stringify!(_NINE_GRID_BITMAP_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_NINE_GRID_BITMAP_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(_NINE_GRID_BITMAP_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NINE_GRID_BITMAP_INFO>())).flFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_NINE_GRID_BITMAP_INFO),
            "::",
            stringify!(flFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NINE_GRID_BITMAP_INFO>())).ulLeftWidth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_NINE_GRID_BITMAP_INFO),
            "::",
            stringify!(ulLeftWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NINE_GRID_BITMAP_INFO>())).ulRightWidth as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_NINE_GRID_BITMAP_INFO),
            "::",
            stringify!(ulRightWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NINE_GRID_BITMAP_INFO>())).ulTopHeight as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_NINE_GRID_BITMAP_INFO),
            "::",
            stringify!(ulTopHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NINE_GRID_BITMAP_INFO>())).ulBottomHeight as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_NINE_GRID_BITMAP_INFO),
            "::",
            stringify!(ulBottomHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NINE_GRID_BITMAP_INFO>())).crTransparent as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_NINE_GRID_BITMAP_INFO),
            "::",
            stringify!(crTransparent)
        )
    );
}
pub type NINE_GRID_BITMAP_INFO = _NINE_GRID_BITMAP_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CREATE_NINE_GRID_BITMAP_ORDER {
    pub bitmapBpp: UINT32,
    pub bitmapId: UINT32,
    pub cx: UINT32,
    pub cy: UINT32,
    pub nineGridInfo: NINE_GRID_BITMAP_INFO,
}
#[test]
fn bindgen_test_layout__CREATE_NINE_GRID_BITMAP_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_CREATE_NINE_GRID_BITMAP_ORDER>(),
        40usize,
        concat!("Size of: ", stringify!(_CREATE_NINE_GRID_BITMAP_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CREATE_NINE_GRID_BITMAP_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_CREATE_NINE_GRID_BITMAP_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_NINE_GRID_BITMAP_ORDER>())).bitmapBpp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_NINE_GRID_BITMAP_ORDER),
            "::",
            stringify!(bitmapBpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_NINE_GRID_BITMAP_ORDER>())).bitmapId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_NINE_GRID_BITMAP_ORDER),
            "::",
            stringify!(bitmapId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_NINE_GRID_BITMAP_ORDER>())).cx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_NINE_GRID_BITMAP_ORDER),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_NINE_GRID_BITMAP_ORDER>())).cy as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_NINE_GRID_BITMAP_ORDER),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CREATE_NINE_GRID_BITMAP_ORDER>())).nineGridInfo as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CREATE_NINE_GRID_BITMAP_ORDER),
            "::",
            stringify!(nineGridInfo)
        )
    );
}
pub type CREATE_NINE_GRID_BITMAP_ORDER = _CREATE_NINE_GRID_BITMAP_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAME_MARKER_ORDER {
    pub action: UINT32,
}
#[test]
fn bindgen_test_layout__FRAME_MARKER_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_FRAME_MARKER_ORDER>(),
        4usize,
        concat!("Size of: ", stringify!(_FRAME_MARKER_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_FRAME_MARKER_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_FRAME_MARKER_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FRAME_MARKER_ORDER>())).action as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FRAME_MARKER_ORDER),
            "::",
            stringify!(action)
        )
    );
}
pub type FRAME_MARKER_ORDER = _FRAME_MARKER_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STREAM_BITMAP_FIRST_ORDER {
    pub bitmapFlags: UINT32,
    pub bitmapBpp: UINT32,
    pub bitmapType: UINT32,
    pub bitmapWidth: UINT32,
    pub bitmapHeight: UINT32,
    pub bitmapSize: UINT32,
    pub bitmapBlockSize: UINT32,
    pub bitmapBlock: *mut BYTE,
}
#[test]
fn bindgen_test_layout__STREAM_BITMAP_FIRST_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_STREAM_BITMAP_FIRST_ORDER>(),
        40usize,
        concat!("Size of: ", stringify!(_STREAM_BITMAP_FIRST_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_STREAM_BITMAP_FIRST_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_STREAM_BITMAP_FIRST_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapFlags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapBpp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapBpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapWidth as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapHeight as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapSize as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapBlockSize as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_FIRST_ORDER>())).bitmapBlock as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_FIRST_ORDER),
            "::",
            stringify!(bitmapBlock)
        )
    );
}
pub type STREAM_BITMAP_FIRST_ORDER = _STREAM_BITMAP_FIRST_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STREAM_BITMAP_NEXT_ORDER {
    pub bitmapFlags: UINT32,
    pub bitmapType: UINT32,
    pub bitmapBlockSize: UINT32,
    pub bitmapBlock: *mut BYTE,
}
#[test]
fn bindgen_test_layout__STREAM_BITMAP_NEXT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_STREAM_BITMAP_NEXT_ORDER>(),
        24usize,
        concat!("Size of: ", stringify!(_STREAM_BITMAP_NEXT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_STREAM_BITMAP_NEXT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_STREAM_BITMAP_NEXT_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_NEXT_ORDER>())).bitmapFlags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_NEXT_ORDER),
            "::",
            stringify!(bitmapFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_NEXT_ORDER>())).bitmapType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_NEXT_ORDER),
            "::",
            stringify!(bitmapType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_NEXT_ORDER>())).bitmapBlockSize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_NEXT_ORDER),
            "::",
            stringify!(bitmapBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_STREAM_BITMAP_NEXT_ORDER>())).bitmapBlock as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAM_BITMAP_NEXT_ORDER),
            "::",
            stringify!(bitmapBlock)
        )
    );
}
pub type STREAM_BITMAP_NEXT_ORDER = _STREAM_BITMAP_NEXT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_GDIPLUS_FIRST_ORDER {
    pub cbSize: UINT32,
    pub cbTotalSize: UINT32,
    pub cbTotalEmfSize: UINT32,
    pub emfRecords: *mut BYTE,
}
#[test]
fn bindgen_test_layout__DRAW_GDIPLUS_FIRST_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_GDIPLUS_FIRST_ORDER>(),
        24usize,
        concat!("Size of: ", stringify!(_DRAW_GDIPLUS_FIRST_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_GDIPLUS_FIRST_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_DRAW_GDIPLUS_FIRST_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_FIRST_ORDER>())).cbSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_FIRST_ORDER),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_FIRST_ORDER>())).cbTotalSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_FIRST_ORDER),
            "::",
            stringify!(cbTotalSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_FIRST_ORDER>())).cbTotalEmfSize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_FIRST_ORDER),
            "::",
            stringify!(cbTotalEmfSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_FIRST_ORDER>())).emfRecords as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_FIRST_ORDER),
            "::",
            stringify!(emfRecords)
        )
    );
}
pub type DRAW_GDIPLUS_FIRST_ORDER = _DRAW_GDIPLUS_FIRST_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_GDIPLUS_NEXT_ORDER {
    pub cbSize: UINT32,
    pub emfRecords: *mut BYTE,
}
#[test]
fn bindgen_test_layout__DRAW_GDIPLUS_NEXT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_GDIPLUS_NEXT_ORDER>(),
        16usize,
        concat!("Size of: ", stringify!(_DRAW_GDIPLUS_NEXT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_GDIPLUS_NEXT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_DRAW_GDIPLUS_NEXT_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_GDIPLUS_NEXT_ORDER>())).cbSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_NEXT_ORDER),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_NEXT_ORDER>())).emfRecords as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_NEXT_ORDER),
            "::",
            stringify!(emfRecords)
        )
    );
}
pub type DRAW_GDIPLUS_NEXT_ORDER = _DRAW_GDIPLUS_NEXT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_GDIPLUS_END_ORDER {
    pub cbSize: UINT32,
    pub cbTotalSize: UINT32,
    pub cbTotalEmfSize: UINT32,
    pub emfRecords: *mut BYTE,
}
#[test]
fn bindgen_test_layout__DRAW_GDIPLUS_END_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_GDIPLUS_END_ORDER>(),
        24usize,
        concat!("Size of: ", stringify!(_DRAW_GDIPLUS_END_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_GDIPLUS_END_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_DRAW_GDIPLUS_END_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DRAW_GDIPLUS_END_ORDER>())).cbSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_END_ORDER),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_END_ORDER>())).cbTotalSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_END_ORDER),
            "::",
            stringify!(cbTotalSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_END_ORDER>())).cbTotalEmfSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_END_ORDER),
            "::",
            stringify!(cbTotalEmfSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_END_ORDER>())).emfRecords as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_END_ORDER),
            "::",
            stringify!(emfRecords)
        )
    );
}
pub type DRAW_GDIPLUS_END_ORDER = _DRAW_GDIPLUS_END_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_GDIPLUS_CACHE_FIRST_ORDER {
    pub flags: UINT32,
    pub cacheType: UINT32,
    pub cacheIndex: UINT32,
    pub cbSize: UINT32,
    pub cbTotalSize: UINT32,
    pub emfRecords: *mut BYTE,
}
#[test]
fn bindgen_test_layout__DRAW_GDIPLUS_CACHE_FIRST_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>(),
        32usize,
        concat!("Size of: ", stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>())).cacheType as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER),
            "::",
            stringify!(cacheType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>())).cacheIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>())).cbSize as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>())).cbTotalSize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER),
            "::",
            stringify!(cbTotalSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_FIRST_ORDER>())).emfRecords as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_FIRST_ORDER),
            "::",
            stringify!(emfRecords)
        )
    );
}
pub type DRAW_GDIPLUS_CACHE_FIRST_ORDER = _DRAW_GDIPLUS_CACHE_FIRST_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_GDIPLUS_CACHE_NEXT_ORDER {
    pub flags: UINT32,
    pub cacheType: UINT32,
    pub cacheIndex: UINT32,
    pub cbSize: UINT32,
    pub emfRecords: *mut BYTE,
}
#[test]
fn bindgen_test_layout__DRAW_GDIPLUS_CACHE_NEXT_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>(),
        24usize,
        concat!("Size of: ", stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>())).cacheType as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER),
            "::",
            stringify!(cacheType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>())).cacheIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>())).cbSize as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_NEXT_ORDER>())).emfRecords as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_NEXT_ORDER),
            "::",
            stringify!(emfRecords)
        )
    );
}
pub type DRAW_GDIPLUS_CACHE_NEXT_ORDER = _DRAW_GDIPLUS_CACHE_NEXT_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAW_GDIPLUS_CACHE_END_ORDER {
    pub flags: UINT32,
    pub cacheType: UINT32,
    pub cacheIndex: UINT32,
    pub cbSize: UINT32,
    pub cbTotalSize: UINT32,
    pub emfRecords: *mut BYTE,
}
#[test]
fn bindgen_test_layout__DRAW_GDIPLUS_CACHE_END_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_DRAW_GDIPLUS_CACHE_END_ORDER>(),
        32usize,
        concat!("Size of: ", stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_DRAW_GDIPLUS_CACHE_END_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_END_ORDER>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_END_ORDER>())).cacheType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER),
            "::",
            stringify!(cacheType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_END_ORDER>())).cacheIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_END_ORDER>())).cbSize as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_END_ORDER>())).cbTotalSize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER),
            "::",
            stringify!(cbTotalSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DRAW_GDIPLUS_CACHE_END_ORDER>())).emfRecords as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DRAW_GDIPLUS_CACHE_END_ORDER),
            "::",
            stringify!(emfRecords)
        )
    );
}
pub type DRAW_GDIPLUS_CACHE_END_ORDER = _DRAW_GDIPLUS_CACHE_END_ORDER;
pub type pCreateOffscreenBitmap = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        create_offscreen_bitmap: *const CREATE_OFFSCREEN_BITMAP_ORDER,
    ) -> BOOL,
>;
pub type pSwitchSurface = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        switch_surface: *const SWITCH_SURFACE_ORDER,
    ) -> BOOL,
>;
pub type pCreateNineGridBitmap = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        create_nine_grid_bitmap: *const CREATE_NINE_GRID_BITMAP_ORDER,
    ) -> BOOL,
>;
pub type pFrameMarker = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, frame_marker: *const FRAME_MARKER_ORDER) -> BOOL,
>;
pub type pStreamBitmapFirst = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        stream_bitmap_first: *const STREAM_BITMAP_FIRST_ORDER,
    ) -> BOOL,
>;
pub type pStreamBitmapNext = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        stream_bitmap_next: *const STREAM_BITMAP_NEXT_ORDER,
    ) -> BOOL,
>;
pub type pDrawGdiPlusFirst = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_gdiplus_first: *const DRAW_GDIPLUS_FIRST_ORDER,
    ) -> BOOL,
>;
pub type pDrawGdiPlusNext = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_gdiplus_next: *const DRAW_GDIPLUS_NEXT_ORDER,
    ) -> BOOL,
>;
pub type pDrawGdiPlusEnd = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_gdiplus_end: *const DRAW_GDIPLUS_END_ORDER,
    ) -> BOOL,
>;
pub type pDrawGdiPlusCacheFirst = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_gdiplus_cache_first: *const DRAW_GDIPLUS_CACHE_FIRST_ORDER,
    ) -> BOOL,
>;
pub type pDrawGdiPlusCacheNext = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_gdiplus_cache_next: *const DRAW_GDIPLUS_CACHE_NEXT_ORDER,
    ) -> BOOL,
>;
pub type pDrawGdiPlusCacheEnd = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        draw_gdiplus_cache_end: *const DRAW_GDIPLUS_CACHE_END_ORDER,
    ) -> BOOL,
>;
pub type pDrawOrderInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderType: UINT8,
        orderName: *const ::std::os::raw::c_char,
    ) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_altsec_update {
    pub context: *mut rdpContext,
    pub paddingA: [UINT32; 15usize],
    pub CreateOffscreenBitmap: pCreateOffscreenBitmap,
    pub SwitchSurface: pSwitchSurface,
    pub CreateNineGridBitmap: pCreateNineGridBitmap,
    pub FrameMarker: pFrameMarker,
    pub StreamBitmapFirst: pStreamBitmapFirst,
    pub StreamBitmapNext: pStreamBitmapNext,
    pub DrawGdiPlusFirst: pDrawGdiPlusFirst,
    pub DrawGdiPlusNext: pDrawGdiPlusNext,
    pub DrawGdiPlusEnd: pDrawGdiPlusEnd,
    pub DrawGdiPlusCacheFirst: pDrawGdiPlusCacheFirst,
    pub DrawGdiPlusCacheNext: pDrawGdiPlusCacheNext,
    pub DrawGdiPlusCacheEnd: pDrawGdiPlusCacheEnd,
    pub DrawOrderInfo: pDrawOrderInfo,
    pub paddingB: [UINT32; 3usize],
    pub create_offscreen_bitmap: CREATE_OFFSCREEN_BITMAP_ORDER,
    pub switch_surface: SWITCH_SURFACE_ORDER,
    pub create_nine_grid_bitmap: CREATE_NINE_GRID_BITMAP_ORDER,
    pub frame_marker: FRAME_MARKER_ORDER,
    pub stream_bitmap_first: STREAM_BITMAP_FIRST_ORDER,
    pub stream_bitmap_next: STREAM_BITMAP_NEXT_ORDER,
    pub draw_gdiplus_cache_first: DRAW_GDIPLUS_CACHE_FIRST_ORDER,
    pub draw_gdiplus_cache_next: DRAW_GDIPLUS_CACHE_NEXT_ORDER,
    pub draw_gdiplus_cache_end: DRAW_GDIPLUS_CACHE_END_ORDER,
    pub draw_gdiplus_first: DRAW_GDIPLUS_FIRST_ORDER,
    pub draw_gdiplus_next: DRAW_GDIPLUS_NEXT_ORDER,
    pub draw_gdiplus_end: DRAW_GDIPLUS_END_ORDER,
}
#[test]
fn bindgen_test_layout_rdp_altsec_update() {
    assert_eq!(
        ::std::mem::size_of::<rdp_altsec_update>(),
        488usize,
        concat!("Size of: ", stringify!(rdp_altsec_update))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_altsec_update>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_altsec_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).paddingA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).CreateOffscreenBitmap as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(CreateOffscreenBitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).SwitchSurface as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(SwitchSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).CreateNineGridBitmap as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(CreateNineGridBitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).FrameMarker as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(FrameMarker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).StreamBitmapFirst as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(StreamBitmapFirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).StreamBitmapNext as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(StreamBitmapNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).DrawGdiPlusFirst as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawGdiPlusFirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).DrawGdiPlusNext as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawGdiPlusNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).DrawGdiPlusEnd as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawGdiPlusEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).DrawGdiPlusCacheFirst as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawGdiPlusCacheFirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).DrawGdiPlusCacheNext as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawGdiPlusCacheNext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).DrawGdiPlusCacheEnd as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawGdiPlusCacheEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).DrawOrderInfo as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(DrawOrderInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).paddingB as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).create_offscreen_bitmap as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(create_offscreen_bitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).switch_surface as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(switch_surface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).create_nine_grid_bitmap as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(create_nine_grid_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_altsec_update>())).frame_marker as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(frame_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).stream_bitmap_first as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(stream_bitmap_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).stream_bitmap_next as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(stream_bitmap_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).draw_gdiplus_cache_first as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(draw_gdiplus_cache_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).draw_gdiplus_cache_next as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(draw_gdiplus_cache_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).draw_gdiplus_cache_end as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(draw_gdiplus_cache_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).draw_gdiplus_first as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(draw_gdiplus_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).draw_gdiplus_next as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(draw_gdiplus_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_altsec_update>())).draw_gdiplus_end as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_altsec_update),
            "::",
            stringify!(draw_gdiplus_end)
        )
    );
}
pub type rdpAltSecUpdate = rdp_altsec_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WINDOW_ORDER_INFO {
    pub windowId: UINT32,
    pub fieldFlags: UINT32,
    pub notifyIconId: UINT32,
}
#[test]
fn bindgen_test_layout__WINDOW_ORDER_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_WINDOW_ORDER_INFO>(),
        12usize,
        concat!("Size of: ", stringify!(_WINDOW_ORDER_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_WINDOW_ORDER_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(_WINDOW_ORDER_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_ORDER_INFO>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_ORDER_INFO),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_ORDER_INFO>())).fieldFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_ORDER_INFO),
            "::",
            stringify!(fieldFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_ORDER_INFO>())).notifyIconId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_ORDER_INFO),
            "::",
            stringify!(notifyIconId)
        )
    );
}
pub type WINDOW_ORDER_INFO = _WINDOW_ORDER_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICON_INFO {
    pub cacheEntry: UINT32,
    pub cacheId: UINT32,
    pub bpp: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub cbColorTable: UINT32,
    pub cbBitsMask: UINT32,
    pub cbBitsColor: UINT32,
    pub bitsMask: *mut BYTE,
    pub colorTable: *mut BYTE,
    pub bitsColor: *mut BYTE,
}
#[test]
fn bindgen_test_layout__ICON_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_ICON_INFO>(),
        56usize,
        concat!("Size of: ", stringify!(_ICON_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_ICON_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_ICON_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).cacheEntry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(cacheEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).cacheId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(cacheId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).bpp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).cbColorTable as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(cbColorTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).cbBitsMask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(cbBitsMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).cbBitsColor as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(cbBitsColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).bitsMask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(bitsMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).colorTable as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(colorTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ICON_INFO>())).bitsColor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ICON_INFO),
            "::",
            stringify!(bitsColor)
        )
    );
}
pub type ICON_INFO = _ICON_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHED_ICON_INFO {
    pub cacheEntry: UINT32,
    pub cacheId: UINT32,
}
#[test]
fn bindgen_test_layout__CACHED_ICON_INFO() {
    assert_eq!(
        ::std::mem::size_of::<_CACHED_ICON_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(_CACHED_ICON_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_CACHED_ICON_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(_CACHED_ICON_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHED_ICON_INFO>())).cacheEntry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHED_ICON_INFO),
            "::",
            stringify!(cacheEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CACHED_ICON_INFO>())).cacheId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CACHED_ICON_INFO),
            "::",
            stringify!(cacheId)
        )
    );
}
pub type CACHED_ICON_INFO = _CACHED_ICON_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NOTIFY_ICON_INFOTIP {
    pub timeout: UINT32,
    pub flags: UINT32,
    pub text: RAIL_UNICODE_STRING,
    pub title: RAIL_UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__NOTIFY_ICON_INFOTIP() {
    assert_eq!(
        ::std::mem::size_of::<_NOTIFY_ICON_INFOTIP>(),
        40usize,
        concat!("Size of: ", stringify!(_NOTIFY_ICON_INFOTIP))
    );
    assert_eq!(
        ::std::mem::align_of::<_NOTIFY_ICON_INFOTIP>(),
        8usize,
        concat!("Alignment of ", stringify!(_NOTIFY_ICON_INFOTIP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NOTIFY_ICON_INFOTIP>())).timeout as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_INFOTIP),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NOTIFY_ICON_INFOTIP>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_INFOTIP),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NOTIFY_ICON_INFOTIP>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_INFOTIP),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NOTIFY_ICON_INFOTIP>())).title as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_INFOTIP),
            "::",
            stringify!(title)
        )
    );
}
pub type NOTIFY_ICON_INFOTIP = _NOTIFY_ICON_INFOTIP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WINDOW_STATE_ORDER {
    pub ownerWindowId: UINT32,
    pub style: UINT32,
    pub extendedStyle: UINT32,
    pub showState: UINT32,
    pub titleInfo: RAIL_UNICODE_STRING,
    pub clientOffsetX: INT32,
    pub clientOffsetY: INT32,
    pub clientAreaWidth: UINT32,
    pub clientAreaHeight: UINT32,
    pub RPContent: UINT32,
    pub rootParentHandle: UINT32,
    pub windowOffsetX: INT32,
    pub windowOffsetY: INT32,
    pub windowClientDeltaX: INT32,
    pub windowClientDeltaY: INT32,
    pub windowWidth: UINT32,
    pub windowHeight: UINT32,
    pub numWindowRects: UINT32,
    pub windowRects: *mut RECTANGLE_16,
    pub visibleOffsetX: INT32,
    pub visibleOffsetY: INT32,
    pub resizeMarginLeft: UINT32,
    pub resizeMarginTop: UINT32,
    pub resizeMarginRight: UINT32,
    pub resizeMarginBottom: UINT32,
    pub numVisibilityRects: UINT32,
    pub visibilityRects: *mut RECTANGLE_16,
    pub OverlayDescription: RAIL_UNICODE_STRING,
    pub TaskbarButton: BYTE,
    pub EnforceServerZOrder: UINT8,
    pub AppBarState: UINT8,
    pub AppBarEdge: UINT8,
}
#[test]
fn bindgen_test_layout__WINDOW_STATE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_WINDOW_STATE_ORDER>(),
        160usize,
        concat!("Size of: ", stringify!(_WINDOW_STATE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_WINDOW_STATE_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_WINDOW_STATE_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).ownerWindowId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(ownerWindowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).style as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).extendedStyle as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(extendedStyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).showState as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(showState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).titleInfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(titleInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).clientOffsetX as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(clientOffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).clientOffsetY as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(clientOffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).clientAreaWidth as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(clientAreaWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).clientAreaHeight as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(clientAreaHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).RPContent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(RPContent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).rootParentHandle as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(rootParentHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowOffsetX as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowOffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowOffsetY as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowOffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowClientDeltaX as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowClientDeltaX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowClientDeltaY as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowClientDeltaY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowWidth as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowHeight as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).numWindowRects as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(numWindowRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).windowRects as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(windowRects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).visibleOffsetX as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(visibleOffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).visibleOffsetY as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(visibleOffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).resizeMarginLeft as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(resizeMarginLeft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).resizeMarginTop as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(resizeMarginTop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).resizeMarginRight as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(resizeMarginRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).resizeMarginBottom as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(resizeMarginBottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).numVisibilityRects as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(numVisibilityRects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).visibilityRects as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(visibilityRects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).OverlayDescription as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(OverlayDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).TaskbarButton as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(TaskbarButton)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).EnforceServerZOrder as *const _ as usize
        },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(EnforceServerZOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).AppBarState as *const _ as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(AppBarState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_STATE_ORDER>())).AppBarEdge as *const _ as usize },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_STATE_ORDER),
            "::",
            stringify!(AppBarEdge)
        )
    );
}
pub type WINDOW_STATE_ORDER = _WINDOW_STATE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WINDOW_ICON_ORDER {
    pub iconInfo: *mut ICON_INFO,
}
#[test]
fn bindgen_test_layout__WINDOW_ICON_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_WINDOW_ICON_ORDER>(),
        8usize,
        concat!("Size of: ", stringify!(_WINDOW_ICON_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_WINDOW_ICON_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_WINDOW_ICON_ORDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WINDOW_ICON_ORDER>())).iconInfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_ICON_ORDER),
            "::",
            stringify!(iconInfo)
        )
    );
}
pub type WINDOW_ICON_ORDER = _WINDOW_ICON_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WINDOW_CACHED_ICON_ORDER {
    pub cachedIcon: CACHED_ICON_INFO,
}
#[test]
fn bindgen_test_layout__WINDOW_CACHED_ICON_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_WINDOW_CACHED_ICON_ORDER>(),
        8usize,
        concat!("Size of: ", stringify!(_WINDOW_CACHED_ICON_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_WINDOW_CACHED_ICON_ORDER>(),
        4usize,
        concat!("Alignment of ", stringify!(_WINDOW_CACHED_ICON_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_WINDOW_CACHED_ICON_ORDER>())).cachedIcon as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WINDOW_CACHED_ICON_ORDER),
            "::",
            stringify!(cachedIcon)
        )
    );
}
pub type WINDOW_CACHED_ICON_ORDER = _WINDOW_CACHED_ICON_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NOTIFY_ICON_STATE_ORDER {
    pub version: UINT32,
    pub toolTip: RAIL_UNICODE_STRING,
    pub infoTip: NOTIFY_ICON_INFOTIP,
    pub state: UINT32,
    pub icon: ICON_INFO,
    pub cachedIcon: CACHED_ICON_INFO,
}
#[test]
fn bindgen_test_layout__NOTIFY_ICON_STATE_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_NOTIFY_ICON_STATE_ORDER>(),
        136usize,
        concat!("Size of: ", stringify!(_NOTIFY_ICON_STATE_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_NOTIFY_ICON_STATE_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_NOTIFY_ICON_STATE_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NOTIFY_ICON_STATE_ORDER>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_STATE_ORDER),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NOTIFY_ICON_STATE_ORDER>())).toolTip as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_STATE_ORDER),
            "::",
            stringify!(toolTip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NOTIFY_ICON_STATE_ORDER>())).infoTip as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_STATE_ORDER),
            "::",
            stringify!(infoTip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NOTIFY_ICON_STATE_ORDER>())).state as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_STATE_ORDER),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NOTIFY_ICON_STATE_ORDER>())).icon as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_STATE_ORDER),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_NOTIFY_ICON_STATE_ORDER>())).cachedIcon as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_NOTIFY_ICON_STATE_ORDER),
            "::",
            stringify!(cachedIcon)
        )
    );
}
pub type NOTIFY_ICON_STATE_ORDER = _NOTIFY_ICON_STATE_ORDER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MONITORED_DESKTOP_ORDER {
    pub activeWindowId: UINT32,
    pub numWindowIds: UINT32,
    pub windowIds: *mut UINT32,
}
#[test]
fn bindgen_test_layout__MONITORED_DESKTOP_ORDER() {
    assert_eq!(
        ::std::mem::size_of::<_MONITORED_DESKTOP_ORDER>(),
        16usize,
        concat!("Size of: ", stringify!(_MONITORED_DESKTOP_ORDER))
    );
    assert_eq!(
        ::std::mem::align_of::<_MONITORED_DESKTOP_ORDER>(),
        8usize,
        concat!("Alignment of ", stringify!(_MONITORED_DESKTOP_ORDER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITORED_DESKTOP_ORDER>())).activeWindowId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITORED_DESKTOP_ORDER),
            "::",
            stringify!(activeWindowId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITORED_DESKTOP_ORDER>())).numWindowIds as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITORED_DESKTOP_ORDER),
            "::",
            stringify!(numWindowIds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MONITORED_DESKTOP_ORDER>())).windowIds as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MONITORED_DESKTOP_ORDER),
            "::",
            stringify!(windowIds)
        )
    );
}
pub type MONITORED_DESKTOP_ORDER = _MONITORED_DESKTOP_ORDER;
pub type pWindowCreate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        window_state: *const WINDOW_STATE_ORDER,
    ) -> BOOL,
>;
pub type pWindowUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        window_state: *const WINDOW_STATE_ORDER,
    ) -> BOOL,
>;
pub type pWindowIcon = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        window_icon: *const WINDOW_ICON_ORDER,
    ) -> BOOL,
>;
pub type pWindowCachedIcon = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        window_cached_icon: *const WINDOW_CACHED_ICON_ORDER,
    ) -> BOOL,
>;
pub type pWindowDelete = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, orderInfo: *const WINDOW_ORDER_INFO) -> BOOL,
>;
pub type pNotifyIconCreate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        notify_icon_state: *const NOTIFY_ICON_STATE_ORDER,
    ) -> BOOL,
>;
pub type pNotifyIconUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        notify_icon_state: *const NOTIFY_ICON_STATE_ORDER,
    ) -> BOOL,
>;
pub type pNotifyIconDelete = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, orderInfo: *const WINDOW_ORDER_INFO) -> BOOL,
>;
pub type pMonitoredDesktop = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        orderInfo: *const WINDOW_ORDER_INFO,
        monitored_desktop: *const MONITORED_DESKTOP_ORDER,
    ) -> BOOL,
>;
pub type pNonMonitoredDesktop = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, orderInfo: *const WINDOW_ORDER_INFO) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_window_update {
    pub context: *mut rdpContext,
    pub paddingA: [UINT32; 15usize],
    pub WindowCreate: pWindowCreate,
    pub WindowUpdate: pWindowUpdate,
    pub WindowIcon: pWindowIcon,
    pub WindowCachedIcon: pWindowCachedIcon,
    pub WindowDelete: pWindowDelete,
    pub NotifyIconCreate: pNotifyIconCreate,
    pub NotifyIconUpdate: pNotifyIconUpdate,
    pub NotifyIconDelete: pNotifyIconDelete,
    pub MonitoredDesktop: pMonitoredDesktop,
    pub NonMonitoredDesktop: pNonMonitoredDesktop,
    pub paddingB: [UINT32; 6usize],
}
#[test]
fn bindgen_test_layout_rdp_window_update() {
    assert_eq!(
        ::std::mem::size_of::<rdp_window_update>(),
        176usize,
        concat!("Size of: ", stringify!(rdp_window_update))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_window_update>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_window_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).paddingA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).WindowCreate as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(WindowCreate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).WindowUpdate as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(WindowUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).WindowIcon as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(WindowIcon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_window_update>())).WindowCachedIcon as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(WindowCachedIcon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).WindowDelete as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(WindowDelete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_window_update>())).NotifyIconCreate as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(NotifyIconCreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_window_update>())).NotifyIconUpdate as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(NotifyIconUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_window_update>())).NotifyIconDelete as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(NotifyIconDelete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_window_update>())).MonitoredDesktop as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(MonitoredDesktop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_window_update>())).NonMonitoredDesktop as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(NonMonitoredDesktop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_window_update>())).paddingB as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_window_update),
            "::",
            stringify!(paddingB)
        )
    );
}
pub type rdpWindowUpdate = rdp_window_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTER_POSITION_UPDATE {
    pub xPos: UINT32,
    pub yPos: UINT32,
}
#[test]
fn bindgen_test_layout__POINTER_POSITION_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_POINTER_POSITION_UPDATE>(),
        8usize,
        concat!("Size of: ", stringify!(_POINTER_POSITION_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTER_POSITION_UPDATE>(),
        4usize,
        concat!("Alignment of ", stringify!(_POINTER_POSITION_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_POSITION_UPDATE>())).xPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_POSITION_UPDATE),
            "::",
            stringify!(xPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_POSITION_UPDATE>())).yPos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_POSITION_UPDATE),
            "::",
            stringify!(yPos)
        )
    );
}
pub type POINTER_POSITION_UPDATE = _POINTER_POSITION_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTER_SYSTEM_UPDATE {
    pub type_: UINT32,
}
#[test]
fn bindgen_test_layout__POINTER_SYSTEM_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_POINTER_SYSTEM_UPDATE>(),
        4usize,
        concat!("Size of: ", stringify!(_POINTER_SYSTEM_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTER_SYSTEM_UPDATE>(),
        4usize,
        concat!("Alignment of ", stringify!(_POINTER_SYSTEM_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_SYSTEM_UPDATE>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_SYSTEM_UPDATE),
            "::",
            stringify!(type_)
        )
    );
}
pub type POINTER_SYSTEM_UPDATE = _POINTER_SYSTEM_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTER_COLOR_UPDATE {
    pub cacheIndex: UINT32,
    pub xPos: UINT32,
    pub yPos: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub lengthAndMask: UINT32,
    pub lengthXorMask: UINT32,
    pub xorMaskData: *mut BYTE,
    pub andMaskData: *mut BYTE,
}
#[test]
fn bindgen_test_layout__POINTER_COLOR_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_POINTER_COLOR_UPDATE>(),
        48usize,
        concat!("Size of: ", stringify!(_POINTER_COLOR_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTER_COLOR_UPDATE>(),
        8usize,
        concat!("Alignment of ", stringify!(_POINTER_COLOR_UPDATE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).cacheIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).xPos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(xPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).yPos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(yPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).lengthAndMask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(lengthAndMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).lengthXorMask as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(lengthXorMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).xorMaskData as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(xorMaskData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_COLOR_UPDATE>())).andMaskData as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_COLOR_UPDATE),
            "::",
            stringify!(andMaskData)
        )
    );
}
pub type POINTER_COLOR_UPDATE = _POINTER_COLOR_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTER_LARGE_UPDATE {
    pub xorBpp: UINT16,
    pub cacheIndex: UINT16,
    pub hotSpotX: UINT16,
    pub hotSpotY: UINT16,
    pub width: UINT16,
    pub height: UINT16,
    pub lengthAndMask: UINT32,
    pub lengthXorMask: UINT32,
    pub xorMaskData: *mut BYTE,
    pub andMaskData: *mut BYTE,
}
#[test]
fn bindgen_test_layout__POINTER_LARGE_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_POINTER_LARGE_UPDATE>(),
        40usize,
        concat!("Size of: ", stringify!(_POINTER_LARGE_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTER_LARGE_UPDATE>(),
        8usize,
        concat!("Alignment of ", stringify!(_POINTER_LARGE_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).xorBpp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(xorBpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).cacheIndex as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(cacheIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).hotSpotX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(hotSpotX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).hotSpotY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(hotSpotY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).height as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).lengthAndMask as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(lengthAndMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).lengthXorMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(lengthXorMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).xorMaskData as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(xorMaskData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_LARGE_UPDATE>())).andMaskData as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_LARGE_UPDATE),
            "::",
            stringify!(andMaskData)
        )
    );
}
pub type POINTER_LARGE_UPDATE = _POINTER_LARGE_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTER_NEW_UPDATE {
    pub xorBpp: UINT32,
    pub colorPtrAttr: POINTER_COLOR_UPDATE,
}
#[test]
fn bindgen_test_layout__POINTER_NEW_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_POINTER_NEW_UPDATE>(),
        56usize,
        concat!("Size of: ", stringify!(_POINTER_NEW_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTER_NEW_UPDATE>(),
        8usize,
        concat!("Alignment of ", stringify!(_POINTER_NEW_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_POINTER_NEW_UPDATE>())).xorBpp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_NEW_UPDATE),
            "::",
            stringify!(xorBpp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_NEW_UPDATE>())).colorPtrAttr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_NEW_UPDATE),
            "::",
            stringify!(colorPtrAttr)
        )
    );
}
pub type POINTER_NEW_UPDATE = _POINTER_NEW_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTER_CACHED_UPDATE {
    pub cacheIndex: UINT32,
}
#[test]
fn bindgen_test_layout__POINTER_CACHED_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_POINTER_CACHED_UPDATE>(),
        4usize,
        concat!("Size of: ", stringify!(_POINTER_CACHED_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_POINTER_CACHED_UPDATE>(),
        4usize,
        concat!("Alignment of ", stringify!(_POINTER_CACHED_UPDATE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_POINTER_CACHED_UPDATE>())).cacheIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_POINTER_CACHED_UPDATE),
            "::",
            stringify!(cacheIndex)
        )
    );
}
pub type POINTER_CACHED_UPDATE = _POINTER_CACHED_UPDATE;
pub type pPointerPosition = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        pointer_position: *const POINTER_POSITION_UPDATE,
    ) -> BOOL,
>;
pub type pPointerSystem = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        pointer_system: *const POINTER_SYSTEM_UPDATE,
    ) -> BOOL,
>;
pub type pPointerColor = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        pointer_color: *const POINTER_COLOR_UPDATE,
    ) -> BOOL,
>;
pub type pPointerNew = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, pointer_new: *const POINTER_NEW_UPDATE) -> BOOL,
>;
pub type pPointerCached = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        pointer_cached: *const POINTER_CACHED_UPDATE,
    ) -> BOOL,
>;
pub type pPointerLarge = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        pointer_large: *const POINTER_LARGE_UPDATE,
    ) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_pointer_update {
    pub context: *mut rdpContext,
    pub paddingA: [UINT32; 15usize],
    pub PointerPosition: pPointerPosition,
    pub PointerSystem: pPointerSystem,
    pub PointerColor: pPointerColor,
    pub PointerNew: pPointerNew,
    pub PointerCached: pPointerCached,
    pub PointerLarge: pPointerLarge,
    pub paddingB: [UINT32; 10usize],
}
#[test]
fn bindgen_test_layout_rdp_pointer_update() {
    assert_eq!(
        ::std::mem::size_of::<rdp_pointer_update>(),
        160usize,
        concat!("Size of: ", stringify!(rdp_pointer_update))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_pointer_update>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_pointer_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_update>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_update>())).paddingA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_pointer_update>())).PointerPosition as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(PointerPosition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_pointer_update>())).PointerSystem as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(PointerSystem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_update>())).PointerColor as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(PointerColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_update>())).PointerNew as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(PointerNew)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_pointer_update>())).PointerCached as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(PointerCached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_update>())).PointerLarge as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(PointerLarge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_update>())).paddingB as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_update),
            "::",
            stringify!(paddingB)
        )
    );
}
pub type rdpPointerUpdate = rdp_pointer_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_DATA {
    pub destLeft: UINT32,
    pub destTop: UINT32,
    pub destRight: UINT32,
    pub destBottom: UINT32,
    pub width: UINT32,
    pub height: UINT32,
    pub bitsPerPixel: UINT32,
    pub flags: UINT32,
    pub bitmapLength: UINT32,
    pub cbCompFirstRowSize: UINT32,
    pub cbCompMainBodySize: UINT32,
    pub cbScanWidth: UINT32,
    pub cbUncompressedSize: UINT32,
    pub bitmapDataStream: *mut BYTE,
    pub compressed: BOOL,
}
#[test]
fn bindgen_test_layout__BITMAP_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_DATA>(),
        72usize,
        concat!("Size of: ", stringify!(_BITMAP_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_BITMAP_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).destLeft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(destLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).destTop as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(destTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).destRight as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(destRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).destBottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(destBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).bitsPerPixel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(bitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).bitmapLength as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(bitmapLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).cbCompFirstRowSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(cbCompFirstRowSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).cbCompMainBodySize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(cbCompMainBodySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).cbScanWidth as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(cbScanWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).cbUncompressedSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(cbUncompressedSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).bitmapDataStream as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(bitmapDataStream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_DATA>())).compressed as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_DATA),
            "::",
            stringify!(compressed)
        )
    );
}
pub type BITMAP_DATA = _BITMAP_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_UPDATE {
    pub count: UINT32,
    pub number: UINT32,
    pub rectangles: *mut BITMAP_DATA,
    pub skipCompression: BOOL,
}
#[test]
fn bindgen_test_layout__BITMAP_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_UPDATE>(),
        24usize,
        concat!("Size of: ", stringify!(_BITMAP_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_UPDATE>(),
        8usize,
        concat!("Alignment of ", stringify!(_BITMAP_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_UPDATE>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_UPDATE),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_UPDATE>())).number as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_UPDATE),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_UPDATE>())).rectangles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_UPDATE),
            "::",
            stringify!(rectangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_UPDATE>())).skipCompression as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_UPDATE),
            "::",
            stringify!(skipCompression)
        )
    );
}
pub type BITMAP_UPDATE = _BITMAP_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PALETTE_UPDATE {
    pub number: UINT32,
    pub entries: [PALETTE_ENTRY; 256usize],
}
#[test]
fn bindgen_test_layout__PALETTE_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_PALETTE_UPDATE>(),
        772usize,
        concat!("Size of: ", stringify!(_PALETTE_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_PALETTE_UPDATE>(),
        4usize,
        concat!("Alignment of ", stringify!(_PALETTE_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PALETTE_UPDATE>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PALETTE_UPDATE),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PALETTE_UPDATE>())).entries as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PALETTE_UPDATE),
            "::",
            stringify!(entries)
        )
    );
}
pub type PALETTE_UPDATE = _PALETTE_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PLAY_SOUND_UPDATE {
    pub duration: UINT32,
    pub frequency: UINT32,
}
#[test]
fn bindgen_test_layout__PLAY_SOUND_UPDATE() {
    assert_eq!(
        ::std::mem::size_of::<_PLAY_SOUND_UPDATE>(),
        8usize,
        concat!("Size of: ", stringify!(_PLAY_SOUND_UPDATE))
    );
    assert_eq!(
        ::std::mem::align_of::<_PLAY_SOUND_UPDATE>(),
        4usize,
        concat!("Alignment of ", stringify!(_PLAY_SOUND_UPDATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PLAY_SOUND_UPDATE>())).duration as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PLAY_SOUND_UPDATE),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PLAY_SOUND_UPDATE>())).frequency as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PLAY_SOUND_UPDATE),
            "::",
            stringify!(frequency)
        )
    );
}
pub type PLAY_SOUND_UPDATE = _PLAY_SOUND_UPDATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TS_COMPRESSED_BITMAP_HEADER_EX {
    pub highUniqueId: UINT32,
    pub lowUniqueId: UINT32,
    pub tmMilliseconds: UINT64,
    pub tmSeconds: UINT64,
}
#[test]
fn bindgen_test_layout__TS_COMPRESSED_BITMAP_HEADER_EX() {
    assert_eq!(
        ::std::mem::size_of::<_TS_COMPRESSED_BITMAP_HEADER_EX>(),
        24usize,
        concat!("Size of: ", stringify!(_TS_COMPRESSED_BITMAP_HEADER_EX))
    );
    assert_eq!(
        ::std::mem::align_of::<_TS_COMPRESSED_BITMAP_HEADER_EX>(),
        8usize,
        concat!("Alignment of ", stringify!(_TS_COMPRESSED_BITMAP_HEADER_EX))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TS_COMPRESSED_BITMAP_HEADER_EX>())).highUniqueId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_COMPRESSED_BITMAP_HEADER_EX),
            "::",
            stringify!(highUniqueId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TS_COMPRESSED_BITMAP_HEADER_EX>())).lowUniqueId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_COMPRESSED_BITMAP_HEADER_EX),
            "::",
            stringify!(lowUniqueId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TS_COMPRESSED_BITMAP_HEADER_EX>())).tmMilliseconds as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_COMPRESSED_BITMAP_HEADER_EX),
            "::",
            stringify!(tmMilliseconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TS_COMPRESSED_BITMAP_HEADER_EX>())).tmSeconds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_COMPRESSED_BITMAP_HEADER_EX),
            "::",
            stringify!(tmSeconds)
        )
    );
}
pub type TS_COMPRESSED_BITMAP_HEADER_EX = _TS_COMPRESSED_BITMAP_HEADER_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TS_BITMAP_DATA_EX {
    pub bpp: BYTE,
    pub flags: BYTE,
    pub codecID: UINT16,
    pub width: UINT16,
    pub height: UINT16,
    pub bitmapDataLength: UINT32,
    pub exBitmapDataHeader: TS_COMPRESSED_BITMAP_HEADER_EX,
    pub bitmapData: *mut BYTE,
}
#[test]
fn bindgen_test_layout__TS_BITMAP_DATA_EX() {
    assert_eq!(
        ::std::mem::size_of::<_TS_BITMAP_DATA_EX>(),
        48usize,
        concat!("Size of: ", stringify!(_TS_BITMAP_DATA_EX))
    );
    assert_eq!(
        ::std::mem::align_of::<_TS_BITMAP_DATA_EX>(),
        8usize,
        concat!("Alignment of ", stringify!(_TS_BITMAP_DATA_EX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).bpp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(bpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).codecID as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(codecID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).height as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).bitmapDataLength as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(bitmapDataLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).exBitmapDataHeader as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(exBitmapDataHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TS_BITMAP_DATA_EX>())).bitmapData as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TS_BITMAP_DATA_EX),
            "::",
            stringify!(bitmapData)
        )
    );
}
pub type TS_BITMAP_DATA_EX = _TS_BITMAP_DATA_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SURFACE_BITS_COMMAND {
    pub cmdType: UINT32,
    pub destLeft: UINT32,
    pub destTop: UINT32,
    pub destRight: UINT32,
    pub destBottom: UINT32,
    pub bmp: TS_BITMAP_DATA_EX,
    pub skipCompression: BOOL,
}
#[test]
fn bindgen_test_layout__SURFACE_BITS_COMMAND() {
    assert_eq!(
        ::std::mem::size_of::<_SURFACE_BITS_COMMAND>(),
        80usize,
        concat!("Size of: ", stringify!(_SURFACE_BITS_COMMAND))
    );
    assert_eq!(
        ::std::mem::align_of::<_SURFACE_BITS_COMMAND>(),
        8usize,
        concat!("Alignment of ", stringify!(_SURFACE_BITS_COMMAND))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).cmdType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(cmdType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).destLeft as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(destLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).destTop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(destTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).destRight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(destRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).destBottom as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(destBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).bmp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(bmp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SURFACE_BITS_COMMAND>())).skipCompression as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_BITS_COMMAND),
            "::",
            stringify!(skipCompression)
        )
    );
}
pub type SURFACE_BITS_COMMAND = _SURFACE_BITS_COMMAND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SURFACE_FRAME_MARKER {
    pub frameAction: UINT32,
    pub frameId: UINT32,
}
#[test]
fn bindgen_test_layout__SURFACE_FRAME_MARKER() {
    assert_eq!(
        ::std::mem::size_of::<_SURFACE_FRAME_MARKER>(),
        8usize,
        concat!("Size of: ", stringify!(_SURFACE_FRAME_MARKER))
    );
    assert_eq!(
        ::std::mem::align_of::<_SURFACE_FRAME_MARKER>(),
        4usize,
        concat!("Alignment of ", stringify!(_SURFACE_FRAME_MARKER))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SURFACE_FRAME_MARKER>())).frameAction as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_FRAME_MARKER),
            "::",
            stringify!(frameAction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SURFACE_FRAME_MARKER>())).frameId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SURFACE_FRAME_MARKER),
            "::",
            stringify!(frameId)
        )
    );
}
pub type SURFACE_FRAME_MARKER = _SURFACE_FRAME_MARKER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_update_proxy {
    _unused: [u8; 0],
}
pub type rdpUpdateProxy = rdp_update_proxy;
pub type pBeginPaint =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> BOOL>;
pub type pEndPaint = ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> BOOL>;
pub type pSetBounds = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, bounds: *const rdpBounds) -> BOOL,
>;
pub type pSynchronize =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> BOOL>;
pub type pDesktopResize =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> BOOL>;
pub type pBitmapUpdate = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, bitmap: *const BITMAP_UPDATE) -> BOOL,
>;
pub type pPalette = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, palette: *const PALETTE_UPDATE) -> BOOL,
>;
pub type pPlaySound = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, play_sound: *const PLAY_SOUND_UPDATE) -> BOOL,
>;
pub type pSetKeyboardIndicators = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, led_flags: UINT16) -> BOOL,
>;
pub type pRefreshRect = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, count: BYTE, areas: *const RECTANGLE_16) -> BOOL,
>;
pub type pSuppressOutput = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, allow: BYTE, area: *const RECTANGLE_16) -> BOOL,
>;
pub type pRemoteMonitors = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        count: UINT32,
        monitors: *const MONITOR_DEF,
    ) -> BOOL,
>;
pub type pSurfaceCommand =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext, s: *mut wStream) -> BOOL>;
pub type pSurfaceBits = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        surfaceBitsCommand: *const SURFACE_BITS_COMMAND,
    ) -> BOOL,
>;
pub type pSurfaceFrameMarker = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        surfaceFrameMarker: *const SURFACE_FRAME_MARKER,
    ) -> BOOL,
>;
pub type pSurfaceFrameBits = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        cmd: *const SURFACE_BITS_COMMAND,
        first: BOOL,
        last: BOOL,
        frameId: UINT32,
    ) -> BOOL,
>;
pub type pSurfaceFrameAcknowledge =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext, frameId: UINT32) -> BOOL>;
pub type pSaveSessionInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        type_: UINT32,
        data: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type pSetKeyboardImeStatus = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut rdpContext,
        imeId: UINT16,
        imeState: UINT32,
        imeConvMode: UINT32,
    ) -> BOOL,
>;
pub type pServerStatusInfo =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext, status: UINT32) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_update {
    pub context: *mut rdpContext,
    pub paddingA: [UINT32; 15usize],
    pub BeginPaint: pBeginPaint,
    pub EndPaint: pEndPaint,
    pub SetBounds: pSetBounds,
    pub Synchronize: pSynchronize,
    pub DesktopResize: pDesktopResize,
    pub BitmapUpdate: pBitmapUpdate,
    pub Palette: pPalette,
    pub PlaySound: pPlaySound,
    pub SetKeyboardIndicators: pSetKeyboardIndicators,
    pub SetKeyboardImeStatus: pSetKeyboardImeStatus,
    pub paddingB: [UINT32; 6usize],
    pub pointer: *mut rdpPointerUpdate,
    pub primary: *mut rdpPrimaryUpdate,
    pub secondary: *mut rdpSecondaryUpdate,
    pub altsec: *mut rdpAltSecUpdate,
    pub window: *mut rdpWindowUpdate,
    pub paddingC: [UINT32; 11usize],
    pub RefreshRect: pRefreshRect,
    pub SuppressOutput: pSuppressOutput,
    pub RemoteMonitors: pRemoteMonitors,
    pub paddingD: [UINT32; 13usize],
    pub SurfaceCommand: pSurfaceCommand,
    pub SurfaceBits: pSurfaceBits,
    pub SurfaceFrameMarker: pSurfaceFrameMarker,
    pub SurfaceFrameBits: pSurfaceFrameBits,
    pub SurfaceFrameAcknowledge: pSurfaceFrameAcknowledge,
    pub SaveSessionInfo: pSaveSessionInfo,
    pub ServerStatusInfo: pServerStatusInfo,
    pub paddingE: [UINT32; 9usize],
    pub log: *mut wLog,
    pub dump_rfx: BOOL,
    pub play_rfx: BOOL,
    pub pcap_rfx: *mut rdpPcap,
    pub initialState: BOOL,
    pub asynchronous: BOOL,
    pub proxy: *mut rdpUpdateProxy,
    pub queue: *mut wMessageQueue,
    pub us: *mut wStream,
    pub numberOrders: UINT16,
    pub combineUpdates: BOOL,
    pub currentBounds: rdpBounds,
    pub previousBounds: rdpBounds,
    pub mux: CRITICAL_SECTION,
    pub autoCalculateBitmapData: BOOL,
}
#[test]
fn bindgen_test_layout_rdp_update() {
    assert_eq!(
        ::std::mem::size_of::<rdp_update>(),
        584usize,
        concat!("Size of: ", stringify!(rdp_update))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_update>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).paddingA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).BeginPaint as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(BeginPaint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).EndPaint as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(EndPaint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SetBounds as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SetBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).Synchronize as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(Synchronize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).DesktopResize as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(DesktopResize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).BitmapUpdate as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(BitmapUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).Palette as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(Palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).PlaySound as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(PlaySound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_update>())).SetKeyboardIndicators as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SetKeyboardIndicators)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SetKeyboardImeStatus as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SetKeyboardImeStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).paddingB as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).pointer as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).primary as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).secondary as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(secondary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).altsec as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(altsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).window as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).paddingC as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(paddingC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).RefreshRect as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(RefreshRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SuppressOutput as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SuppressOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).RemoteMonitors as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(RemoteMonitors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).paddingD as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(paddingD)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SurfaceCommand as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SurfaceCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SurfaceBits as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SurfaceBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SurfaceFrameMarker as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SurfaceFrameMarker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SurfaceFrameBits as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SurfaceFrameBits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_update>())).SurfaceFrameAcknowledge as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SurfaceFrameAcknowledge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).SaveSessionInfo as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(SaveSessionInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).ServerStatusInfo as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(ServerStatusInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).paddingE as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(paddingE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).log as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).dump_rfx as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(dump_rfx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).play_rfx as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(play_rfx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).pcap_rfx as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(pcap_rfx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).initialState as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(initialState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).asynchronous as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(asynchronous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).proxy as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(proxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).queue as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).us as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).numberOrders as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(numberOrders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).combineUpdates as *const _ as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(combineUpdates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).currentBounds as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(currentBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).previousBounds as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(previousBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_update>())).mux as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(mux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_update>())).autoCalculateBitmapData as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_update),
            "::",
            stringify!(autoCalculateBitmapData)
        )
    );
}
pub type rdpAutoDetect = rdp_autodetect;
pub type pRTTMeasureRequest = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, sequenceNumber: UINT16) -> BOOL,
>;
pub type pRTTMeasureResponse = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, sequenceNumber: UINT16) -> BOOL,
>;
pub type pBandwidthMeasureStart = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, sequenceNumber: UINT16) -> BOOL,
>;
pub type pBandwidthMeasureStop = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, sequenceNumber: UINT16) -> BOOL,
>;
pub type pBandwidthMeasureResults = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, sequenceNumber: UINT16) -> BOOL,
>;
pub type pNetworkCharacteristicsResult = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, sequenceNumber: UINT16) -> BOOL,
>;
pub type pClientBandwidthMeasureResult = ::std::option::Option<
    unsafe extern "C" fn(context: *mut rdpContext, data: *mut rdpAutoDetect) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_autodetect {
    pub context: *mut rdpContext,
    pub rttMeasureStartTime: UINT64,
    pub bandwidthMeasureStartTime: UINT64,
    pub bandwidthMeasureTimeDelta: UINT64,
    pub bandwidthMeasureByteCount: UINT32,
    pub __bindgen_padding_0: u32,
    pub netCharBandwidth: UINT32,
    pub __bindgen_padding_1: u32,
    pub netCharBaseRTT: UINT32,
    pub __bindgen_padding_2: u32,
    pub netCharAverageRTT: UINT32,
    pub __bindgen_padding_3: u32,
    pub bandwidthMeasureStarted: BOOL,
    pub paddingA: [UINT64; 7usize],
    pub RTTMeasureRequest: pRTTMeasureRequest,
    pub RTTMeasureResponse: pRTTMeasureResponse,
    pub BandwidthMeasureStart: pBandwidthMeasureStart,
    pub BandwidthMeasureStop: pBandwidthMeasureStop,
    pub BandwidthMeasureResults: pBandwidthMeasureResults,
    pub NetworkCharacteristicsResult: pNetworkCharacteristicsResult,
    pub ClientBandwidthMeasureResult: pClientBandwidthMeasureResult,
    pub paddingB: [UINT64; 9usize],
}
#[test]
fn bindgen_test_layout_rdp_autodetect() {
    assert_eq!(
        ::std::mem::size_of::<rdp_autodetect>(),
        256usize,
        concat!("Size of: ", stringify!(rdp_autodetect))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_autodetect>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_autodetect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_autodetect>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).rttMeasureStartTime as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(rttMeasureStartTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).bandwidthMeasureStartTime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(bandwidthMeasureStartTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).bandwidthMeasureTimeDelta as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(bandwidthMeasureTimeDelta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).bandwidthMeasureByteCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(bandwidthMeasureByteCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_autodetect>())).netCharBandwidth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(netCharBandwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_autodetect>())).netCharBaseRTT as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(netCharBaseRTT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).netCharAverageRTT as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(netCharAverageRTT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).bandwidthMeasureStarted as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(bandwidthMeasureStarted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_autodetect>())).paddingA as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).RTTMeasureRequest as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(RTTMeasureRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).RTTMeasureResponse as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(RTTMeasureResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).BandwidthMeasureStart as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(BandwidthMeasureStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).BandwidthMeasureStop as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(BandwidthMeasureStop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).BandwidthMeasureResults as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(BandwidthMeasureResults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).NetworkCharacteristicsResult as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(NetworkCharacteristicsResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_autodetect>())).ClientBandwidthMeasureResult as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(ClientBandwidthMeasureResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_autodetect>())).paddingB as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_autodetect),
            "::",
            stringify!(paddingB)
        )
    );
}
pub type rdpHeartbeat = rdp_heartbeat;
pub type pServerHeartbeat = ::std::option::Option<
    unsafe extern "C" fn(instance: *mut freerdp, period: BYTE, count1: BYTE, count2: BYTE) -> BOOL,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_heartbeat {
    pub ServerHeartbeat: pServerHeartbeat,
}
#[test]
fn bindgen_test_layout_rdp_heartbeat() {
    assert_eq!(
        ::std::mem::size_of::<rdp_heartbeat>(),
        8usize,
        concat!("Size of: ", stringify!(rdp_heartbeat))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_heartbeat>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_heartbeat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_heartbeat>())).ServerHeartbeat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_heartbeat),
            "::",
            stringify!(ServerHeartbeat)
        )
    );
}
extern "C" {
    pub fn freerdp_heartbeat_send_heartbeat_pdu(
        peer: *mut freerdp_peer,
        period: BYTE,
        count1: BYTE,
        count2: BYTE,
    ) -> BOOL;
}
pub type pContextNew = ::std::option::Option<
    unsafe extern "C" fn(instance: *mut freerdp, context: *mut rdpContext) -> BOOL,
>;
pub type pContextFree =
    ::std::option::Option<unsafe extern "C" fn(instance: *mut freerdp, context: *mut rdpContext)>;
pub type pPreConnect = ::std::option::Option<unsafe extern "C" fn(instance: *mut freerdp) -> BOOL>;
pub type pPostConnect = ::std::option::Option<unsafe extern "C" fn(instance: *mut freerdp) -> BOOL>;
pub type pPostDisconnect = ::std::option::Option<unsafe extern "C" fn(instance: *mut freerdp)>;
pub type pAuthenticate = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        username: *mut *mut ::std::os::raw::c_char,
        password: *mut *mut ::std::os::raw::c_char,
        domain: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL,
>;
#[doc = " @brief Callback used if user interaction is required to accept"]
#[doc = "         an unknown certificate."]
#[doc = ""]
#[doc = "  @deprecated Use pVerifyCertificateEx"]
#[doc = "  @param common_name      The certificate registered hostname."]
#[doc = "  @param subject          The common name of the certificate."]
#[doc = "  @param issuer           The issuer of the certificate."]
#[doc = "  @param fingerprint      The fingerprint of the certificate."]
#[doc = "  @param host_mismatch    A flag indicating the certificate"]
#[doc = "                          subject does not match the host connecting to."]
#[doc = ""]
#[doc = "  @return 1 to accept and store a certificate, 2 to accept"]
#[doc = "          a certificate only for this session, 0 otherwise."]
pub type pVerifyCertificate = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        fingerprint: *const ::std::os::raw::c_char,
        host_mismatch: BOOL,
    ) -> DWORD,
>;
#[doc = " @brief Callback used if user interaction is required to accept"]
#[doc = "         an unknown certificate."]
#[doc = ""]
#[doc = "  @param host             The hostname connecting to."]
#[doc = "  @param port             The port connecting to."]
#[doc = "  @param common_name      The certificate registered hostname."]
#[doc = "  @param subject          The common name of the certificate."]
#[doc = "  @param issuer           The issuer of the certificate."]
#[doc = "  @param fingerprint      The fingerprint of the certificate."]
#[doc = "  @param flags            Flags of type VERIFY_CERT_FLAG*"]
#[doc = ""]
#[doc = "  @return 1 to accept and store a certificate, 2 to accept"]
#[doc = "          a certificate only for this session, 0 otherwise."]
pub type pVerifyCertificateEx = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        host: *const ::std::os::raw::c_char,
        port: UINT16,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        fingerprint: *const ::std::os::raw::c_char,
        flags: DWORD,
    ) -> DWORD,
>;
#[doc = " @brief Callback used if user interaction is required to accept"]
#[doc = "         a changed certificate."]
#[doc = ""]
#[doc = "  @deprecated Use pVerifyChangedCertificateEx"]
#[doc = "  @param common_name      The certificate registered hostname."]
#[doc = "  @param subject          The common name of the new certificate."]
#[doc = "  @param issuer           The issuer of the new certificate."]
#[doc = "  @param fingerprint      The fingerprint of the new certificate."]
#[doc = "  @param old_subject      The common name of the old certificate."]
#[doc = "  @param old_issuer       The issuer of the new certificate."]
#[doc = "  @param old_fingerprint  The fingerprint of the old certificate."]
#[doc = ""]
#[doc = "  @return 1 to accept and store a certificate, 2 to accept"]
#[doc = "          a certificate only for this session, 0 otherwise."]
pub type pVerifyChangedCertificate = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        new_fingerprint: *const ::std::os::raw::c_char,
        old_subject: *const ::std::os::raw::c_char,
        old_issuer: *const ::std::os::raw::c_char,
        old_fingerprint: *const ::std::os::raw::c_char,
    ) -> DWORD,
>;
#[doc = " @brief Callback used if user interaction is required to accept"]
#[doc = "         a changed certificate."]
#[doc = ""]
#[doc = "  @param host             The hostname connecting to."]
#[doc = "  @param port             The port connecting to."]
#[doc = "  @param common_name      The certificate registered hostname."]
#[doc = "  @param subject          The common name of the new certificate."]
#[doc = "  @param issuer           The issuer of the new certificate."]
#[doc = "  @param fingerprint      The fingerprint of the new certificate."]
#[doc = "  @param old_subject      The common name of the old certificate."]
#[doc = "  @param old_issuer       The issuer of the new certificate."]
#[doc = "  @param old_fingerprint  The fingerprint of the old certificate."]
#[doc = "  @param flags            Flags of type VERIFY_CERT_FLAG*"]
#[doc = ""]
#[doc = "  @return 1 to accept and store a certificate, 2 to accept"]
#[doc = "          a certificate only for this session, 0 otherwise."]
pub type pVerifyChangedCertificateEx = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        host: *const ::std::os::raw::c_char,
        port: UINT16,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        new_fingerprint: *const ::std::os::raw::c_char,
        old_subject: *const ::std::os::raw::c_char,
        old_issuer: *const ::std::os::raw::c_char,
        old_fingerprint: *const ::std::os::raw::c_char,
        flags: DWORD,
    ) -> DWORD,
>;
#[doc = " @brief Callback used if user interaction is required to accept"]
#[doc = "         a certificate."]
#[doc = ""]
#[doc = "  @param instance         Pointer to the freerdp instance."]
#[doc = "  @param data             Pointer to certificate data in PEM format."]
#[doc = "  @param length           The length of the certificate data."]
#[doc = "  @param hostname         The hostname connecting to."]
#[doc = "  @param port             The port connecting to."]
#[doc = "  @param flags            Flags of type VERIFY_CERT_FLAG*"]
#[doc = ""]
#[doc = "  @return 1 to accept and store a certificate, 2 to accept"]
#[doc = "          a certificate only for this session, 0 otherwise."]
pub type pVerifyX509Certificate = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        data: *const BYTE,
        length: size_t,
        hostname: *const ::std::os::raw::c_char,
        port: UINT16,
        flags: DWORD,
    ) -> ::std::os::raw::c_int,
>;
pub type pLogonErrorInfo = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        data: UINT32,
        type_: UINT32,
    ) -> ::std::os::raw::c_int,
>;
pub type pSendChannelData = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        channelId: UINT16,
        data: *const BYTE,
        size: size_t,
    ) -> BOOL,
>;
pub type pReceiveChannelData = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        channelId: UINT16,
        data: *const BYTE,
        size: size_t,
        flags: UINT32,
        totalSize: size_t,
    ) -> BOOL,
>;
pub type pPresentGatewayMessage = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut freerdp,
        type_: UINT32,
        isDisplayMandatory: BOOL,
        isConsentMandatory: BOOL,
        length: size_t,
        message: *const WCHAR,
    ) -> BOOL,
>;
#[doc = " Defines the context for a given instance of RDP connection."]
#[doc = " It is embedded in the rdp_freerdp structure, and allocated by a call to"]
#[doc = " freerdp_context_new(). It is deallocated by a call to freerdp_context_free()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_context {
    #[doc = "< (offset 0)"]
    #[doc = "Pointer to a rdp_freerdp structure."]
    #[doc = "This is a back-link to retrieve the freerdp instance from the context."]
    #[doc = "It is set by the freerdp_context_new() function"]
    pub instance: *mut freerdp,
    #[doc = "< (offset 1)"]
    #[doc = "Pointer to the client peer."]
    #[doc = "This is set by a call to freerdp_peer_context_new() during peer"]
    #[doc = "initialization. This field is used only on the server side."]
    pub peer: *mut freerdp_peer,
    #[doc = "< (offset 2) true when context is in server mode"]
    pub ServerMode: BOOL,
    pub __bindgen_padding_0: u32,
    pub LastError: UINT32,
    pub paddingA: [UINT64; 12usize],
    #[doc = "< (offset 16)"]
    #[doc = "Number of arguments given to the program at launch time."]
    #[doc = "Used to keep this data available and used later on, typically just before"]
    #[doc = "connection initialization."]
    #[doc = "@see freerdp_parse_args()"]
    pub argc: ::std::os::raw::c_int,
    #[doc = "< (offset 17)"]
    #[doc = "List of arguments given to the program at launch time."]
    #[doc = "Used to keep this data available and used later on, typically just before"]
    #[doc = "connection initialization."]
    #[doc = "@see freerdp_parse_args()"]
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub pubSub: *mut wPubSub,
    pub channelErrorEvent: HANDLE,
    pub channelErrorNum: UINT,
    pub errorDescription: *mut ::std::os::raw::c_char,
    pub paddingB: [UINT64; 10usize],
    #[doc = "< (offset 32)"]
    #[doc = "Pointer to a rdp_rdp structure used to keep the connection's parameters."]
    #[doc = "It is allocated by freerdp_context_new() and deallocated by"]
    #[doc = "freerdp_context_free(), at the same\t\t       time that this rdp_context"]
    #[doc = "structure -\t\t       there is no need to specifically allocate/deallocate this."]
    pub rdp: *mut rdpRdp,
    #[doc = "< (offset 33)"]
    #[doc = "Pointer to a rdp_gdi structure used to keep the gdi settings."]
    #[doc = "It is allocated by gdi_init() and deallocated by gdi_free()."]
    #[doc = "It must be deallocated before deallocating this rdp_context structure."]
    pub gdi: *mut rdpGdi,
    pub rail: *mut rdpRail,
    pub cache: *mut rdpCache,
    pub channels: *mut rdpChannels,
    pub graphics: *mut rdpGraphics,
    pub input: *mut rdpInput,
    pub update: *mut rdpUpdate,
    pub settings: *mut rdpSettings,
    pub metrics: *mut rdpMetrics,
    pub codecs: *mut rdpCodecs,
    pub autodetect: *mut rdpAutoDetect,
    pub abortEvent: HANDLE,
    pub disconnectUltimatum: ::std::os::raw::c_int,
    pub paddingC: [UINT64; 18usize],
    pub paddingD: [UINT64; 32usize],
    pub paddingE: [UINT64; 32usize],
}
#[test]
fn bindgen_test_layout_rdp_context() {
    assert_eq!(
        ::std::mem::size_of::<rdp_context>(),
        1024usize,
        concat!("Size of: ", stringify!(rdp_context))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_context>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).instance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).peer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).ServerMode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(ServerMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).LastError as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(LastError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).paddingA as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).argc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).argv as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).pubSub as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(pubSub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).channelErrorEvent as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(channelErrorEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).channelErrorNum as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(channelErrorNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).errorDescription as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(errorDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).paddingB as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).rdp as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).gdi as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(gdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).rail as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(rail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).cache as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).channels as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).graphics as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(graphics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).input as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).update as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).settings as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(settings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).metrics as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(metrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).codecs as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(codecs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).autodetect as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(autodetect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).abortEvent as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(abortEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).disconnectUltimatum as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(disconnectUltimatum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).paddingC as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(paddingC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).paddingD as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(paddingD)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_context>())).paddingE as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_context),
            "::",
            stringify!(paddingE)
        )
    );
}
#[doc = " Client Entry Points"]
pub type pRdpGlobalInit = ::std::option::Option<unsafe extern "C" fn() -> BOOL>;
pub type pRdpGlobalUninit = ::std::option::Option<unsafe extern "C" fn()>;
pub type pRdpClientNew = ::std::option::Option<
    unsafe extern "C" fn(instance: *mut freerdp, context: *mut rdpContext) -> BOOL,
>;
pub type pRdpClientFree =
    ::std::option::Option<unsafe extern "C" fn(instance: *mut freerdp, context: *mut rdpContext)>;
pub type pRdpClientStart =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> ::std::os::raw::c_int>;
pub type pRdpClientStop =
    ::std::option::Option<unsafe extern "C" fn(context: *mut rdpContext) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_client_entry_points_v1 {
    pub Size: DWORD,
    pub Version: DWORD,
    pub settings: *mut rdpSettings,
    pub GlobalInit: pRdpGlobalInit,
    pub GlobalUninit: pRdpGlobalUninit,
    pub ContextSize: DWORD,
    pub ClientNew: pRdpClientNew,
    pub ClientFree: pRdpClientFree,
    pub ClientStart: pRdpClientStart,
    pub ClientStop: pRdpClientStop,
}
#[test]
fn bindgen_test_layout_rdp_client_entry_points_v1() {
    assert_eq!(
        ::std::mem::size_of::<rdp_client_entry_points_v1>(),
        72usize,
        concat!("Size of: ", stringify!(rdp_client_entry_points_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_client_entry_points_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_client_entry_points_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).Version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).settings as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(settings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).GlobalInit as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(GlobalInit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).GlobalUninit as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(GlobalUninit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).ContextSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(ContextSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).ClientNew as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(ClientNew)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).ClientFree as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(ClientFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).ClientStart as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(ClientStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_client_entry_points_v1>())).ClientStop as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_entry_points_v1),
            "::",
            stringify!(ClientStop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_client_context {
    pub context: rdpContext,
    pub thread: HANDLE,
}
#[test]
fn bindgen_test_layout_rdp_client_context() {
    assert_eq!(
        ::std::mem::size_of::<rdp_client_context>(),
        1032usize,
        concat!("Size of: ", stringify!(rdp_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_client_context>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_context),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_client_context>())).thread as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_client_context),
            "::",
            stringify!(thread)
        )
    );
}
extern "C" {
    pub fn freerdp_client_context_new(
        pEntryPoints: *mut RDP_CLIENT_ENTRY_POINTS,
    ) -> *mut rdpContext;
}
extern "C" {
    pub fn freerdp_client_context_free(context: *mut rdpContext);
}
extern "C" {
    pub fn freerdp_client_start(context: *mut rdpContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_stop(context: *mut rdpContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_get_instance(context: *mut rdpContext) -> *mut freerdp;
}
extern "C" {
    pub fn freerdp_client_get_thread(context: *mut rdpContext) -> HANDLE;
}
extern "C" {
    pub fn freerdp_client_settings_parse_command_line(
        settings: *mut rdpSettings,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        allowUnknown: BOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_settings_parse_connection_file(
        settings: *mut rdpSettings,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_settings_parse_connection_file_buffer(
        settings: *mut rdpSettings,
        buffer: *const BYTE,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_settings_write_connection_file(
        settings: *const rdpSettings,
        filename: *const ::std::os::raw::c_char,
        unicode: BOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_settings_parse_assistance_file(
        settings: *mut rdpSettings,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn client_cli_authenticate(
        instance: *mut freerdp,
        username: *mut *mut ::std::os::raw::c_char,
        password: *mut *mut ::std::os::raw::c_char,
        domain: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn client_cli_gw_authenticate(
        instance: *mut freerdp,
        username: *mut *mut ::std::os::raw::c_char,
        password: *mut *mut ::std::os::raw::c_char,
        domain: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn client_cli_verify_certificate(
        instance: *mut freerdp,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        fingerprint: *const ::std::os::raw::c_char,
        host_mismatch: BOOL,
    ) -> DWORD;
}
extern "C" {
    pub fn client_cli_verify_certificate_ex(
        instance: *mut freerdp,
        host: *const ::std::os::raw::c_char,
        port: UINT16,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        fingerprint: *const ::std::os::raw::c_char,
        flags: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn client_cli_verify_changed_certificate(
        instance: *mut freerdp,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        fingerprint: *const ::std::os::raw::c_char,
        old_subject: *const ::std::os::raw::c_char,
        old_issuer: *const ::std::os::raw::c_char,
        old_fingerprint: *const ::std::os::raw::c_char,
    ) -> DWORD;
}
extern "C" {
    pub fn client_cli_verify_changed_certificate_ex(
        instance: *mut freerdp,
        host: *const ::std::os::raw::c_char,
        port: UINT16,
        common_name: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        issuer: *const ::std::os::raw::c_char,
        fingerprint: *const ::std::os::raw::c_char,
        old_subject: *const ::std::os::raw::c_char,
        old_issuer: *const ::std::os::raw::c_char,
        old_fingerprint: *const ::std::os::raw::c_char,
        flags: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn client_cli_present_gateway_message(
        instance: *mut freerdp,
        type_: UINT32,
        isDisplayMandatory: BOOL,
        isConsentMandatory: BOOL,
        length: size_t,
        message: *const WCHAR,
    ) -> BOOL;
}
extern "C" {
    pub fn client_auto_reconnect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn client_auto_reconnect_ex(
        instance: *mut freerdp,
        window_events: ::std::option::Option<unsafe extern "C" fn(instance: *mut freerdp) -> BOOL>,
    ) -> BOOL;
}
#[doc = " Defines the options for a given instance of RDP connection."]
#[doc = "  This is built by the client and given to the FreeRDP library to create the connection"]
#[doc = "  with the expected options."]
#[doc = "  It is allocated by a call to freerdp_new() and deallocated by a call to freerdp_free()."]
#[doc = "  Some of its content need specific allocation/deallocation - see field description for"]
#[doc = " details."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_freerdp {
    #[doc = "< (offset 0)"]
    #[doc = "Pointer to a rdpContext structure."]
    #[doc = "Client applications can use the ContextSize field to register a"]
    #[doc = "context bigger than the rdpContext structure. This allow clients to"]
    #[doc = "use additional context information. When using this capability, client"]
    #[doc = "application should ALWAYS declare their structure with the rdpContext"]
    #[doc = "field first, and any additional content following it. Can be allocated"]
    #[doc = "by a call to freerdp_context_new(). Must be deallocated by a call to"]
    #[doc = "freerdp_context_free() before deallocating the current instance."]
    pub context: *mut rdpContext,
    pub pClientEntryPoints: *mut RDP_CLIENT_ENTRY_POINTS,
    pub paddingA: [UINT64; 14usize],
    pub input: *mut rdpInput,
    pub update: *mut rdpUpdate,
    #[doc = "< (offset 18)"]
    #[doc = "Pointer to a rdpSettings structure. Will be used to maintain the"]
    #[doc = "required RDP\t settings.\t\t              Will be"]
    #[doc = "initialized by\t a call to freerdp_context_new()"]
    pub settings: *mut rdpSettings,
    pub autodetect: *mut rdpAutoDetect,
    pub heartbeat: *mut rdpHeartbeat,
    pub paddingB: [UINT64; 11usize],
    pub ContextSize: size_t,
    #[doc = "< (offset 33)"]
    #[doc = "Callback for context allocation"]
    #[doc = "Can be set before calling freerdp_context_new() to have it executed after"]
    #[doc = "allocation and initialization. Must be set to NULL if not needed."]
    pub ContextNew: pContextNew,
    #[doc = "< (offset 34)"]
    #[doc = "Callback for context deallocation"]
    #[doc = "Can be set before calling freerdp_context_free() to have it executed before"]
    #[doc = "deallocation.\t\t  Must be set to NULL if not needed."]
    pub ContextFree: pContextFree,
    pub paddingC: [UINT64; 12usize],
    pub ConnectionCallbackState: UINT,
    #[doc = "< (offset 48)"]
    #[doc = "Callback for pre-connect operations."]
    #[doc = "Can be set before calling freerdp_connect() to have it executed before the"]
    #[doc = "actual connection happens. Must be set to NULL if not needed."]
    pub PreConnect: pPreConnect,
    #[doc = "< (offset 49)"]
    #[doc = "Callback for post-connect operations."]
    #[doc = "Can be set before calling freerdp_connect() to have it executed after the"]
    #[doc = "actual connection has succeeded. Must be set to NULL if not needed."]
    pub PostConnect: pPostConnect,
    #[doc = "< (offset 50)"]
    #[doc = "Callback for authentication."]
    #[doc = "It is used to get the username/password when it was not"]
    #[doc = "provided at connection time."]
    pub Authenticate: pAuthenticate,
    pub VerifyCertificate: pVerifyCertificate,
    pub VerifyChangedCertificate: pVerifyChangedCertificate,
    #[doc = "< (offset 53)  Callback for X509 certificate verification (PEM"]
    #[doc = "format)"]
    pub VerifyX509Certificate: pVerifyX509Certificate,
    #[doc = "< (offset 54)  Callback for logon error info, important for logon"]
    #[doc = "system messages with RemoteApp"]
    pub LogonErrorInfo: pLogonErrorInfo,
    #[doc = "< (offset 55)"]
    #[doc = "Callback for cleaning up"]
    #[doc = "resources allocated by connect callbacks."]
    pub PostDisconnect: pPostDisconnect,
    #[doc = "< (offset 56)"]
    #[doc = "Callback for gateway authentication."]
    #[doc = "It is used to get the username/password when it was not"]
    #[doc = "provided at connection time."]
    pub GatewayAuthenticate: pAuthenticate,
    #[doc = "< (offset 57)"]
    #[doc = "Callback for gateway consent messages."]
    #[doc = "It is used to present consent messages to the user."]
    pub PresentGatewayMessage: pPresentGatewayMessage,
    pub paddingD: [UINT64; 6usize],
    pub SendChannelData: pSendChannelData,
    pub ReceiveChannelData: pReceiveChannelData,
    #[doc = "< (offset 66)"]
    #[doc = "Callback for certificate validation."]
    #[doc = "Used to verify that an unknown certificate is trusted."]
    pub VerifyCertificateEx: pVerifyCertificateEx,
    #[doc = "< (offset 67)"]
    #[doc = "Callback for changed certificate validation."]
    #[doc = "Used when a certificate differs from stored fingerprint."]
    pub VerifyChangedCertificateEx: pVerifyChangedCertificateEx,
    pub paddingE: [UINT64; 12usize],
}
#[test]
fn bindgen_test_layout_rdp_freerdp() {
    assert_eq!(
        ::std::mem::size_of::<rdp_freerdp>(),
        640usize,
        concat!("Size of: ", stringify!(rdp_freerdp))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_freerdp>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_freerdp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).pClientEntryPoints as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(pClientEntryPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).paddingA as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).input as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).update as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).settings as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(settings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).autodetect as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(autodetect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).heartbeat as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(heartbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).paddingB as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).ContextSize as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(ContextSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).ContextNew as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(ContextNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).ContextFree as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(ContextFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).paddingC as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(paddingC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_freerdp>())).ConnectionCallbackState as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(ConnectionCallbackState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).PreConnect as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(PreConnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).PostConnect as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(PostConnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).Authenticate as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(Authenticate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).VerifyCertificate as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(VerifyCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_freerdp>())).VerifyChangedCertificate as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(VerifyChangedCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_freerdp>())).VerifyX509Certificate as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(VerifyX509Certificate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).LogonErrorInfo as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(LogonErrorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).PostDisconnect as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(PostDisconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).GatewayAuthenticate as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(GatewayAuthenticate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_freerdp>())).PresentGatewayMessage as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(PresentGatewayMessage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).paddingD as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(paddingD)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).SendChannelData as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(SendChannelData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).ReceiveChannelData as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(ReceiveChannelData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).VerifyCertificateEx as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(VerifyCertificateEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rdp_freerdp>())).VerifyChangedCertificateEx as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(VerifyChangedCertificateEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_freerdp>())).paddingE as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_freerdp),
            "::",
            stringify!(paddingE)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_channel_handles {
    pub init: *mut wListDictionary,
    pub open: *mut wListDictionary,
}
#[test]
fn bindgen_test_layout_rdp_channel_handles() {
    assert_eq!(
        ::std::mem::size_of::<rdp_channel_handles>(),
        16usize,
        concat!("Size of: ", stringify!(rdp_channel_handles))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_channel_handles>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_channel_handles))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_channel_handles>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_channel_handles),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_channel_handles>())).open as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_channel_handles),
            "::",
            stringify!(open)
        )
    );
}
pub type rdpChannelHandles = rdp_channel_handles;
extern "C" {
    pub fn freerdp_context_new(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_context_free(instance: *mut freerdp);
}
extern "C" {
    pub fn freerdp_connect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_abort_connect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_shall_disconnect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_disconnect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_disconnect_before_reconnect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_reconnect(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_channel_add_init_handle_data(
        handles: *mut rdpChannelHandles,
        pInitHandle: *mut ::std::os::raw::c_void,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> UINT;
}
extern "C" {
    pub fn freerdp_channel_get_init_handle_data(
        handles: *mut rdpChannelHandles,
        pInitHandle: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn freerdp_channel_remove_init_handle_data(
        handles: *mut rdpChannelHandles,
        pInitHandle: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn freerdp_channel_add_open_handle_data(
        handles: *mut rdpChannelHandles,
        openHandle: DWORD,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> UINT;
}
extern "C" {
    pub fn freerdp_channel_get_open_handle_data(
        handles: *mut rdpChannelHandles,
        openHandle: DWORD,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn freerdp_channel_remove_open_handle_data(
        handles: *mut rdpChannelHandles,
        openHandle: DWORD,
    );
}
extern "C" {
    pub fn freerdp_channels_attach(instance: *mut freerdp) -> UINT;
}
extern "C" {
    pub fn freerdp_channels_detach(instance: *mut freerdp) -> UINT;
}
extern "C" {
    pub fn freerdp_get_fds(
        instance: *mut freerdp,
        rfds: *mut *mut ::std::os::raw::c_void,
        rcount: *mut ::std::os::raw::c_int,
        wfds: *mut *mut ::std::os::raw::c_void,
        wcount: *mut ::std::os::raw::c_int,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_check_fds(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_get_event_handles(
        context: *mut rdpContext,
        events: *mut HANDLE,
        count: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn freerdp_check_event_handles(context: *mut rdpContext) -> BOOL;
}
extern "C" {
    pub fn freerdp_get_message_queue(instance: *mut freerdp, id: DWORD) -> *mut wMessageQueue;
}
extern "C" {
    pub fn freerdp_get_message_queue_event_handle(instance: *mut freerdp, id: DWORD) -> HANDLE;
}
extern "C" {
    pub fn freerdp_message_queue_process_message(
        instance: *mut freerdp,
        id: DWORD,
        message: *mut wMessage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_message_queue_process_pending_messages(
        instance: *mut freerdp,
        id: DWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_error_info(instance: *mut freerdp) -> UINT32;
}
extern "C" {
    pub fn freerdp_set_error_info(rdp: *mut rdpRdp, error: UINT32);
}
extern "C" {
    pub fn freerdp_send_error_info(rdp: *mut rdpRdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_get_stats(
        rdp: *mut rdpRdp,
        inBytes: *mut UINT64,
        outBytes: *mut UINT64,
        inPackets: *mut UINT64,
        outPackets: *mut UINT64,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_get_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        revision: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn freerdp_get_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_build_date() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_build_revision() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_build_config() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_new() -> *mut freerdp;
}
extern "C" {
    pub fn freerdp_free(instance: *mut freerdp);
}
extern "C" {
    pub fn freerdp_focus_required(instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_set_focus(instance: *mut freerdp);
}
extern "C" {
    pub fn freerdp_get_disconnect_ultimatum(context: *mut rdpContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_get_last_error(context: *mut rdpContext) -> UINT32;
}
extern "C" {
    pub fn freerdp_get_last_error_name(error: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_last_error_string(error: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_last_error_category(error: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_set_last_error(context: *mut rdpContext, lastError: UINT32);
}
extern "C" {
    pub fn freerdp_set_last_error_ex(
        context: *mut rdpContext,
        lastError: UINT32,
        fkt: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn freerdp_get_logon_error_info_type(type_: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_logon_error_info_data(data: UINT32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_get_transport_sent(context: *mut rdpContext, resetCount: BOOL) -> ULONG;
}
extern "C" {
    pub fn freerdp_nla_impersonate(context: *mut rdpContext) -> BOOL;
}
extern "C" {
    pub fn freerdp_nla_revert_to_self(context: *mut rdpContext) -> BOOL;
}
extern "C" {
    pub fn clearChannelError(context: *mut rdpContext);
}
extern "C" {
    pub fn getChannelErrorEventHandle(context: *mut rdpContext) -> HANDLE;
}
extern "C" {
    pub fn getChannelError(context: *mut rdpContext) -> UINT;
}
extern "C" {
    pub fn getChannelErrorDescription(context: *mut rdpContext) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setChannelError(
        context: *mut rdpContext,
        errorNum: UINT,
        description: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn checkChannelErrorEvent(context: *mut rdpContext) -> BOOL;
}
extern "C" {
    pub fn freerdp_nego_get_routing_token(
        context: *mut rdpContext,
        length: *mut DWORD,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_channels_client_load(
        channels: *mut rdpChannels,
        settings: *mut rdpSettings,
        entry: PVIRTUALCHANNELENTRY,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_channels_client_load_ex(
        channels: *mut rdpChannels,
        settings: *mut rdpSettings,
        entryEx: PVIRTUALCHANNELENTRYEX,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_channels_load_plugin(
        channels: *mut rdpChannels,
        settings: *mut rdpSettings,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_channels_get_fds(
        channels: *mut rdpChannels,
        instance: *mut freerdp,
        read_fds: *mut *mut ::std::os::raw::c_void,
        read_count: *mut ::std::os::raw::c_int,
        write_fds: *mut *mut ::std::os::raw::c_void,
        write_count: *mut ::std::os::raw::c_int,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_channels_check_fds(channels: *mut rdpChannels, instance: *mut freerdp) -> BOOL;
}
extern "C" {
    pub fn freerdp_channels_get_static_channel_interface(
        channels: *mut rdpChannels,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn freerdp_channels_get_event_handle(instance: *mut freerdp) -> HANDLE;
}
extern "C" {
    pub fn freerdp_channels_process_pending_messages(
        instance: *mut freerdp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_channels_data(
        instance: *mut freerdp,
        channelId: UINT16,
        data: *const BYTE,
        dataSize: size_t,
        flags: UINT32,
        totalSize: size_t,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_channels_get_id_by_name(
        instance: *mut freerdp,
        channel_name: *const ::std::os::raw::c_char,
    ) -> UINT16;
}
extern "C" {
    pub fn freerdp_channels_get_name_by_id(
        instance: *mut freerdp,
        channelId: UINT16,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FreeRDP_InitWtsApi() -> PWtsApiFunctionTable;
}
extern "C" {
    pub fn freerdp_channels_client_find_static_entry(
        name: *const ::std::os::raw::c_char,
        identifier: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn freerdp_channels_load_static_addin_entry(
        pszName: LPCSTR,
        pszSubsystem: LPCSTR,
        pszType: LPCSTR,
        dwFlags: DWORD,
    ) -> PVIRTUALCHANNELENTRY;
}
extern "C" {
    pub fn freerdp_channels_list_addins(
        lpName: LPCSTR,
        lpSubsystem: LPCSTR,
        lpType: LPCSTR,
        dwFlags: DWORD,
    ) -> *mut *mut FREERDP_ADDIN;
}
extern "C" {
    pub fn freerdp_channels_addin_list_free(ppAddins: *mut *mut FREERDP_ADDIN);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAY_CONTROL_MONITOR_LAYOUT {
    pub Flags: UINT32,
    pub Left: INT32,
    pub Top: INT32,
    pub Width: UINT32,
    pub Height: UINT32,
    pub PhysicalWidth: UINT32,
    pub PhysicalHeight: UINT32,
    pub Orientation: UINT32,
    pub DesktopScaleFactor: UINT32,
    pub DeviceScaleFactor: UINT32,
}
#[test]
fn bindgen_test_layout__DISPLAY_CONTROL_MONITOR_LAYOUT() {
    assert_eq!(
        ::std::mem::size_of::<_DISPLAY_CONTROL_MONITOR_LAYOUT>(),
        40usize,
        concat!("Size of: ", stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<_DISPLAY_CONTROL_MONITOR_LAYOUT>(),
        4usize,
        concat!("Alignment of ", stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).Flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).Left as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(Left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).Top as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(Top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).Width as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).Height as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).PhysicalWidth as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(PhysicalWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).PhysicalHeight as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(PhysicalHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).Orientation as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(Orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).DesktopScaleFactor
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(DesktopScaleFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DISPLAY_CONTROL_MONITOR_LAYOUT>())).DeviceScaleFactor
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_DISPLAY_CONTROL_MONITOR_LAYOUT),
            "::",
            stringify!(DeviceScaleFactor)
        )
    );
}
pub type DISPLAY_CONTROL_MONITOR_LAYOUT = _DISPLAY_CONTROL_MONITOR_LAYOUT;
pub type DispClientContext = _disp_client_context;
pub type pcDispCaps = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut DispClientContext,
        MaxNumMonitors: UINT32,
        MaxMonitorAreaFactorA: UINT32,
        MaxMonitorAreaFactorB: UINT32,
    ) -> UINT,
>;
pub type pcDispSendMonitorLayout = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut DispClientContext,
        NumMonitors: UINT32,
        Monitors: *mut DISPLAY_CONTROL_MONITOR_LAYOUT,
    ) -> UINT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _disp_client_context {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub DisplayControlCaps: pcDispCaps,
    pub SendMonitorLayout: pcDispSendMonitorLayout,
}
#[test]
fn bindgen_test_layout__disp_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_disp_client_context>(),
        32usize,
        concat!("Size of: ", stringify!(_disp_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_disp_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_disp_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_disp_client_context>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_disp_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_disp_client_context>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_disp_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_disp_client_context>())).DisplayControlCaps as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_disp_client_context),
            "::",
            stringify!(DisplayControlCaps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_disp_client_context>())).SendMonitorLayout as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_disp_client_context),
            "::",
            stringify!(SendMonitorLayout)
        )
    );
}
pub const RDPINPUT_PROTOCOL_V10: ::std::os::raw::c_uint = 65536;
pub const RDPINPUT_PROTOCOL_V101: ::std::os::raw::c_uint = 65537;
pub const RDPINPUT_PROTOCOL_V200: ::std::os::raw::c_uint = 131072;
pub const RDPINPUT_PROTOCOL_V300: ::std::os::raw::c_uint = 196608;
#[doc = " @brief protocol version"]
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[doc = " @brief a contact point"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPINPUT_CONTACT_DATA {
    pub contactId: UINT32,
    pub fieldsPresent: UINT32,
    pub x: INT32,
    pub y: INT32,
    pub contactFlags: UINT32,
    pub contactRectLeft: INT32,
    pub contactRectTop: INT32,
    pub contactRectRight: INT32,
    pub contactRectBottom: INT32,
    pub orientation: UINT32,
    pub pressure: UINT32,
}
#[test]
fn bindgen_test_layout__RDPINPUT_CONTACT_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_RDPINPUT_CONTACT_DATA>(),
        44usize,
        concat!("Size of: ", stringify!(_RDPINPUT_CONTACT_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPINPUT_CONTACT_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(_RDPINPUT_CONTACT_DATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).contactId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(contactId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).fieldsPresent as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(fieldsPresent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).contactFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(contactFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).contactRectLeft as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(contactRectLeft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).contactRectTop as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(contactRectTop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).contactRectRight as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(contactRectRight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).contactRectBottom as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(contactRectBottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).orientation as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_CONTACT_DATA>())).pressure as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_CONTACT_DATA),
            "::",
            stringify!(pressure)
        )
    );
}
pub type RDPINPUT_CONTACT_DATA = _RDPINPUT_CONTACT_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDPINPUT_PEN_CONTACT {
    pub deviceId: UINT8,
    pub fieldsPresent: UINT16,
    pub x: INT32,
    pub y: INT32,
    pub contactFlags: UINT32,
    pub penFlags: UINT32,
    pub pressure: UINT32,
    pub rotation: UINT16,
    pub tiltX: INT16,
    pub tiltY: INT16,
}
#[test]
fn bindgen_test_layout__RDPINPUT_PEN_CONTACT() {
    assert_eq!(
        ::std::mem::size_of::<_RDPINPUT_PEN_CONTACT>(),
        32usize,
        concat!("Size of: ", stringify!(_RDPINPUT_PEN_CONTACT))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDPINPUT_PEN_CONTACT>(),
        4usize,
        concat!("Alignment of ", stringify!(_RDPINPUT_PEN_CONTACT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).deviceId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).fieldsPresent as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(fieldsPresent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).contactFlags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(contactFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).penFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(penFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).pressure as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).rotation as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).tiltX as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(tiltX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDPINPUT_PEN_CONTACT>())).tiltY as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDPINPUT_PEN_CONTACT),
            "::",
            stringify!(tiltY)
        )
    );
}
pub type RDPINPUT_PEN_CONTACT = _RDPINPUT_PEN_CONTACT;
#[doc = " Client Interface"]
pub type RdpeiClientContext = _rdpei_client_context;
pub type pcRdpeiGetVersion =
    ::std::option::Option<unsafe extern "C" fn(context: *mut RdpeiClientContext) -> UINT32>;
pub type pcRdpeiGetFeatures =
    ::std::option::Option<unsafe extern "C" fn(context: *mut RdpeiClientContext) -> UINT32>;
pub type pcRdpeiAddContact = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpeiClientContext,
        contact: *const RDPINPUT_CONTACT_DATA,
    ) -> UINT,
>;
pub type pcRdpeiTouchBegin = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpeiClientContext,
        externalId: INT32,
        x: INT32,
        y: INT32,
        contactId: *mut INT32,
    ) -> UINT,
>;
pub type pcRdpeiTouchUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpeiClientContext,
        externalId: INT32,
        x: INT32,
        y: INT32,
        contactId: *mut INT32,
    ) -> UINT,
>;
pub type pcRdpeiTouchEnd = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpeiClientContext,
        externalId: INT32,
        x: INT32,
        y: INT32,
        contactId: *mut INT32,
    ) -> UINT,
>;
pub type pcRdpeiAddPen = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpeiClientContext,
        externalId: INT32,
        contact: *const RDPINPUT_PEN_CONTACT,
    ) -> UINT,
>;
pub type pcRdpeiPen = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpeiClientContext,
        externalId: INT32,
        fieldFlags: UINT32,
        x: INT32,
        y: INT32,
        ...
    ) -> UINT,
>;
pub type pcRdpeiSuspendTouch =
    ::std::option::Option<unsafe extern "C" fn(context: *mut RdpeiClientContext) -> UINT>;
pub type pcRdpeiResumeTouch =
    ::std::option::Option<unsafe extern "C" fn(context: *mut RdpeiClientContext) -> UINT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rdpei_client_context {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub GetVersion: pcRdpeiGetVersion,
    pub AddContact: pcRdpeiAddContact,
    pub TouchBegin: pcRdpeiTouchBegin,
    pub TouchUpdate: pcRdpeiTouchUpdate,
    pub TouchEnd: pcRdpeiTouchEnd,
    pub SuspendTouch: pcRdpeiSuspendTouch,
    pub ResumeTouch: pcRdpeiResumeTouch,
    pub GetFeatures: pcRdpeiGetFeatures,
    pub AddPen: pcRdpeiAddPen,
    pub PenBegin: pcRdpeiPen,
    pub PenUpdate: pcRdpeiPen,
    pub PenEnd: pcRdpeiPen,
}
#[test]
fn bindgen_test_layout__rdpei_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_rdpei_client_context>(),
        112usize,
        concat!("Size of: ", stringify!(_rdpei_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_rdpei_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_rdpei_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).GetVersion as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(GetVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).AddContact as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(AddContact)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).TouchBegin as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(TouchBegin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).TouchUpdate as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(TouchUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).TouchEnd as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(TouchEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).SuspendTouch as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(SuspendTouch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).ResumeTouch as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(ResumeTouch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpei_client_context>())).GetFeatures as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(GetFeatures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).AddPen as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(AddPen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).PenBegin as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(PenBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).PenUpdate as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(PenUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpei_client_context>())).PenEnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpei_client_context),
            "::",
            stringify!(PenEnd)
        )
    );
}
#[doc = " Client Interface"]
pub type RailClientContext = _rail_client_context;
pub type pcRailOnOpen = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RailClientContext, sendHandshake: *mut BOOL) -> UINT,
>;
pub type pcRailClientExecute = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RailClientContext, exec: *const RAIL_EXEC_ORDER) -> UINT,
>;
pub type pcRailClientActivate = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        activate: *const RAIL_ACTIVATE_ORDER,
    ) -> UINT,
>;
pub type pcRailClientSystemParam = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        sysparam: *const RAIL_SYSPARAM_ORDER,
    ) -> UINT,
>;
pub type pcRailServerSystemParam = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        sysparam: *const RAIL_SYSPARAM_ORDER,
    ) -> UINT,
>;
pub type pcRailClientSystemCommand = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        syscommand: *const RAIL_SYSCOMMAND_ORDER,
    ) -> UINT,
>;
pub type pcRailClientHandshake = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        handshake: *const RAIL_HANDSHAKE_ORDER,
    ) -> UINT,
>;
pub type pcRailServerHandshake = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        handshake: *const RAIL_HANDSHAKE_ORDER,
    ) -> UINT,
>;
pub type pcRailServerHandshakeEx = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        handshakeEx: *const RAIL_HANDSHAKE_EX_ORDER,
    ) -> UINT,
>;
pub type pcRailClientNotifyEvent = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        notifyEvent: *const RAIL_NOTIFY_EVENT_ORDER,
    ) -> UINT,
>;
pub type pcRailClientWindowMove = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        windowMove: *const RAIL_WINDOW_MOVE_ORDER,
    ) -> UINT,
>;
pub type pcRailServerLocalMoveSize = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        localMoveSize: *const RAIL_LOCALMOVESIZE_ORDER,
    ) -> UINT,
>;
pub type pcRailServerMinMaxInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        minMaxInfo: *const RAIL_MINMAXINFO_ORDER,
    ) -> UINT,
>;
pub type pcRailClientInformation = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        clientStatus: *const RAIL_CLIENT_STATUS_ORDER,
    ) -> UINT,
>;
pub type pcRailClientSystemMenu = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        sysmenu: *const RAIL_SYSMENU_ORDER,
    ) -> UINT,
>;
pub type pcRailServerTaskBarInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        taskBarInfo: *const RAIL_TASKBAR_INFO_ORDER,
    ) -> UINT,
>;
pub type pcRailClientLanguageBarInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        langBarInfo: *const RAIL_LANGBAR_INFO_ORDER,
    ) -> UINT,
>;
pub type pcRailServerLanguageBarInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        langBarInfo: *const RAIL_LANGBAR_INFO_ORDER,
    ) -> UINT,
>;
pub type pcRailClientLanguageIMEInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        langImeInfo: *const RAIL_LANGUAGEIME_INFO_ORDER,
    ) -> UINT,
>;
pub type pcRailServerExecuteResult = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        execResult: *const RAIL_EXEC_RESULT_ORDER,
    ) -> UINT,
>;
pub type pcRailClientGetAppIdRequest = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        getAppIdReq: *const RAIL_GET_APPID_REQ_ORDER,
    ) -> UINT,
>;
pub type pcRailServerGetAppIdResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        getAppIdResp: *const RAIL_GET_APPID_RESP_ORDER,
    ) -> UINT,
>;
pub type pcRailServerZOrderSync = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RailClientContext, zorder: *const RAIL_ZORDER_SYNC) -> UINT,
>;
pub type pcRailServerCloak = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RailClientContext, cloak: *const RAIL_CLOAK) -> UINT,
>;
pub type pcRailClientCloak = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RailClientContext, cloak: *const RAIL_CLOAK) -> UINT,
>;
pub type pcRailServerPowerDisplayRequest = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        power: *const RAIL_POWER_DISPLAY_REQUEST,
    ) -> UINT,
>;
pub type pcRailClientSnapArrange = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RailClientContext, snap: *const RAIL_SNAP_ARRANGE) -> UINT,
>;
pub type pcRailServerGetAppidResponseExtended = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        id: *const RAIL_GET_APPID_RESP_EX,
    ) -> UINT,
>;
pub type pcRailClientCompartmentInfo = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RailClientContext,
        compartmentInfo: *const RAIL_COMPARTMENT_INFO_ORDER,
    ) -> UINT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rail_client_context {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub ClientExecute: pcRailClientExecute,
    pub ClientActivate: pcRailClientActivate,
    pub ClientSystemParam: pcRailClientSystemParam,
    pub ServerSystemParam: pcRailServerSystemParam,
    pub ClientSystemCommand: pcRailClientSystemCommand,
    pub ClientHandshake: pcRailClientHandshake,
    pub ServerHandshake: pcRailServerHandshake,
    pub ServerHandshakeEx: pcRailServerHandshakeEx,
    pub ClientNotifyEvent: pcRailClientNotifyEvent,
    pub ClientWindowMove: pcRailClientWindowMove,
    pub ServerLocalMoveSize: pcRailServerLocalMoveSize,
    pub ServerMinMaxInfo: pcRailServerMinMaxInfo,
    pub ClientInformation: pcRailClientInformation,
    pub ClientSystemMenu: pcRailClientSystemMenu,
    pub ServerTaskBarInfo: pcRailServerTaskBarInfo,
    pub ClientLanguageBarInfo: pcRailClientLanguageBarInfo,
    pub ServerLanguageBarInfo: pcRailServerLanguageBarInfo,
    pub ClientLanguageIMEInfo: pcRailClientLanguageIMEInfo,
    pub ServerExecuteResult: pcRailServerExecuteResult,
    pub ClientGetAppIdRequest: pcRailClientGetAppIdRequest,
    pub ServerGetAppIdResponse: pcRailServerGetAppIdResponse,
    pub ServerZOrderSync: pcRailServerZOrderSync,
    pub ClientCloak: pcRailClientCloak,
    pub ServerCloak: pcRailServerCloak,
    pub ServerPowerDisplayRequest: pcRailServerPowerDisplayRequest,
    pub ClientSnapArrange: pcRailClientSnapArrange,
    pub ServerGetAppidResponseExtended: pcRailServerGetAppidResponseExtended,
    pub ClientCompartmentInfo: pcRailClientCompartmentInfo,
    pub OnOpen: pcRailOnOpen,
}
#[test]
fn bindgen_test_layout__rail_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_rail_client_context>(),
        248usize,
        concat!("Size of: ", stringify!(_rail_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_rail_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_rail_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rail_client_context>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rail_client_context>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientExecute as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientExecute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientActivate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientActivate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientSystemParam as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientSystemParam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerSystemParam as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerSystemParam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientSystemCommand as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientSystemCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientHandshake as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientHandshake)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerHandshake as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerHandshake)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerHandshakeEx as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerHandshakeEx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientNotifyEvent as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientNotifyEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientWindowMove as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientWindowMove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerLocalMoveSize as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerLocalMoveSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerMinMaxInfo as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerMinMaxInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientInformation as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientInformation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientSystemMenu as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientSystemMenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerTaskBarInfo as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerTaskBarInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientLanguageBarInfo as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientLanguageBarInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerLanguageBarInfo as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerLanguageBarInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientLanguageIMEInfo as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientLanguageIMEInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerExecuteResult as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerExecuteResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientGetAppIdRequest as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientGetAppIdRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerGetAppIdResponse as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerGetAppIdResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerZOrderSync as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerZOrderSync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientCloak as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientCloak)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerCloak as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerCloak)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerPowerDisplayRequest as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerPowerDisplayRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientSnapArrange as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientSnapArrange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ServerGetAppidResponseExtended
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ServerGetAppidResponseExtended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rail_client_context>())).ClientCompartmentInfo as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(ClientCompartmentInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rail_client_context>())).OnOpen as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_rail_client_context),
            "::",
            stringify!(OnOpen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILEDESCRIPTORW {
    pub dwFlags: DWORD,
    pub clsid: CLSID,
    pub sizel: SIZEL,
    pub pointl: POINTL,
    pub dwFileAttributes: DWORD,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub nFileSizeHigh: DWORD,
    pub nFileSizeLow: DWORD,
    pub cFileName: [WCHAR; 260usize],
}
#[test]
fn bindgen_test_layout__FILEDESCRIPTORW() {
    assert_eq!(
        ::std::mem::size_of::<_FILEDESCRIPTORW>(),
        592usize,
        concat!("Size of: ", stringify!(_FILEDESCRIPTORW))
    );
    assert_eq!(
        ::std::mem::align_of::<_FILEDESCRIPTORW>(),
        4usize,
        concat!("Alignment of ", stringify!(_FILEDESCRIPTORW))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).dwFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).clsid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(clsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).sizel as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(sizel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).pointl as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(pointl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).dwFileAttributes as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(dwFileAttributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).ftCreationTime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(ftCreationTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).ftLastAccessTime as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(ftLastAccessTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).ftLastWriteTime as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(ftLastWriteTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).nFileSizeHigh as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(nFileSizeHigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).nFileSizeLow as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(nFileSizeLow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FILEDESCRIPTORW>())).cFileName as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILEDESCRIPTORW),
            "::",
            stringify!(cFileName)
        )
    );
}
pub type FILEDESCRIPTORW = _FILEDESCRIPTORW;
extern "C" {
    pub fn GetUserProfileDirectoryA(
        hToken: HANDLE,
        lpProfileDir: LPSTR,
        lpcchSize: LPDWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn GetUserProfileDirectoryW(
        hToken: HANDLE,
        lpProfileDir: LPWSTR,
        lpcchSize: LPDWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_MFPICT {
    pub mappingMode: UINT32,
    pub xExt: UINT32,
    pub yExt: UINT32,
    pub metaFileSize: UINT32,
    pub metaFileData: *mut BYTE,
}
#[test]
fn bindgen_test_layout__CLIPRDR_MFPICT() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_MFPICT>(),
        24usize,
        concat!("Size of: ", stringify!(_CLIPRDR_MFPICT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_MFPICT>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_MFPICT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MFPICT>())).mappingMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MFPICT),
            "::",
            stringify!(mappingMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MFPICT>())).xExt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MFPICT),
            "::",
            stringify!(xExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MFPICT>())).yExt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MFPICT),
            "::",
            stringify!(yExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MFPICT>())).metaFileSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MFPICT),
            "::",
            stringify!(metaFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MFPICT>())).metaFileData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MFPICT),
            "::",
            stringify!(metaFileData)
        )
    );
}
pub type CLIPRDR_MFPICT = _CLIPRDR_MFPICT;
extern "C" {
    pub fn cliprdr_parse_file_list(
        format_data: *const BYTE,
        format_data_length: UINT32,
        file_descriptor_array: *mut *mut FILEDESCRIPTORW,
        file_descriptor_count: *mut UINT32,
    ) -> UINT;
}
extern "C" {
    pub fn cliprdr_serialize_file_list(
        file_descriptor_array: *const FILEDESCRIPTORW,
        file_descriptor_count: UINT32,
        format_data: *mut *mut BYTE,
        format_data_length: *mut UINT32,
    ) -> UINT;
}
extern "C" {
    pub fn cliprdr_serialize_file_list_ex(
        flags: UINT32,
        file_descriptor_array: *const FILEDESCRIPTORW,
        file_descriptor_count: UINT32,
        format_data: *mut *mut BYTE,
        format_data_length: *mut UINT32,
    ) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_HEADER {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_HEADER>(),
        8usize,
        concat!("Size of: ", stringify!(_CLIPRDR_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_HEADER>())).msgType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_HEADER),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_HEADER>())).msgFlags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_HEADER),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_HEADER>())).dataLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_HEADER),
            "::",
            stringify!(dataLen)
        )
    );
}
pub type CLIPRDR_HEADER = _CLIPRDR_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_CAPABILITY_SET {
    pub capabilitySetType: UINT16,
    pub capabilitySetLength: UINT16,
}
#[test]
fn bindgen_test_layout__CLIPRDR_CAPABILITY_SET() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_CAPABILITY_SET>(),
        4usize,
        concat!("Size of: ", stringify!(_CLIPRDR_CAPABILITY_SET))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_CAPABILITY_SET>(),
        2usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_CAPABILITY_SET))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_CAPABILITY_SET>())).capabilitySetType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITY_SET),
            "::",
            stringify!(capabilitySetType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_CAPABILITY_SET>())).capabilitySetLength as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITY_SET),
            "::",
            stringify!(capabilitySetLength)
        )
    );
}
pub type CLIPRDR_CAPABILITY_SET = _CLIPRDR_CAPABILITY_SET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_GENERAL_CAPABILITY_SET {
    pub capabilitySetType: UINT16,
    pub capabilitySetLength: UINT16,
    pub version: UINT32,
    pub generalFlags: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_GENERAL_CAPABILITY_SET() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_GENERAL_CAPABILITY_SET>(),
        12usize,
        concat!("Size of: ", stringify!(_CLIPRDR_GENERAL_CAPABILITY_SET))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_GENERAL_CAPABILITY_SET>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_GENERAL_CAPABILITY_SET))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_GENERAL_CAPABILITY_SET>())).capabilitySetType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_GENERAL_CAPABILITY_SET),
            "::",
            stringify!(capabilitySetType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_GENERAL_CAPABILITY_SET>())).capabilitySetLength
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_GENERAL_CAPABILITY_SET),
            "::",
            stringify!(capabilitySetLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_GENERAL_CAPABILITY_SET>())).version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_GENERAL_CAPABILITY_SET),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_GENERAL_CAPABILITY_SET>())).generalFlags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_GENERAL_CAPABILITY_SET),
            "::",
            stringify!(generalFlags)
        )
    );
}
pub type CLIPRDR_GENERAL_CAPABILITY_SET = _CLIPRDR_GENERAL_CAPABILITY_SET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_CAPABILITIES {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub cCapabilitiesSets: UINT32,
    pub capabilitySets: *mut CLIPRDR_CAPABILITY_SET,
}
#[test]
fn bindgen_test_layout__CLIPRDR_CAPABILITIES() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_CAPABILITIES>(),
        24usize,
        concat!("Size of: ", stringify!(_CLIPRDR_CAPABILITIES))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_CAPABILITIES>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_CAPABILITIES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_CAPABILITIES>())).msgType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITIES),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_CAPABILITIES>())).msgFlags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITIES),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_CAPABILITIES>())).dataLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITIES),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_CAPABILITIES>())).cCapabilitiesSets as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITIES),
            "::",
            stringify!(cCapabilitiesSets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_CAPABILITIES>())).capabilitySets as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_CAPABILITIES),
            "::",
            stringify!(capabilitySets)
        )
    );
}
pub type CLIPRDR_CAPABILITIES = _CLIPRDR_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_MONITOR_READY {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_MONITOR_READY() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_MONITOR_READY>(),
        8usize,
        concat!("Size of: ", stringify!(_CLIPRDR_MONITOR_READY))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_MONITOR_READY>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_MONITOR_READY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MONITOR_READY>())).msgType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MONITOR_READY),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MONITOR_READY>())).msgFlags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MONITOR_READY),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_MONITOR_READY>())).dataLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_MONITOR_READY),
            "::",
            stringify!(dataLen)
        )
    );
}
pub type CLIPRDR_MONITOR_READY = _CLIPRDR_MONITOR_READY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_TEMP_DIRECTORY {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub szTempDir: [::std::os::raw::c_char; 520usize],
}
#[test]
fn bindgen_test_layout__CLIPRDR_TEMP_DIRECTORY() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_TEMP_DIRECTORY>(),
        528usize,
        concat!("Size of: ", stringify!(_CLIPRDR_TEMP_DIRECTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_TEMP_DIRECTORY>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_TEMP_DIRECTORY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_TEMP_DIRECTORY>())).msgType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_TEMP_DIRECTORY),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_TEMP_DIRECTORY>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_TEMP_DIRECTORY),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_TEMP_DIRECTORY>())).dataLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_TEMP_DIRECTORY),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_TEMP_DIRECTORY>())).szTempDir as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_TEMP_DIRECTORY),
            "::",
            stringify!(szTempDir)
        )
    );
}
pub type CLIPRDR_TEMP_DIRECTORY = _CLIPRDR_TEMP_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FORMAT {
    pub formatId: UINT32,
    pub formatName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FORMAT() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FORMAT>(),
        16usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FORMAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FORMAT>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FORMAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT>())).formatId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT),
            "::",
            stringify!(formatId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT>())).formatName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT),
            "::",
            stringify!(formatName)
        )
    );
}
pub type CLIPRDR_FORMAT = _CLIPRDR_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FORMAT_LIST {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub numFormats: UINT32,
    pub formats: *mut CLIPRDR_FORMAT,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FORMAT_LIST() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FORMAT_LIST>(),
        24usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FORMAT_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FORMAT_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FORMAT_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST>())).msgType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST>())).msgFlags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST>())).dataLen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST>())).numFormats as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST),
            "::",
            stringify!(numFormats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST>())).formats as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST),
            "::",
            stringify!(formats)
        )
    );
}
pub type CLIPRDR_FORMAT_LIST = _CLIPRDR_FORMAT_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FORMAT_LIST_RESPONSE {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FORMAT_LIST_RESPONSE() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FORMAT_LIST_RESPONSE>(),
        8usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FORMAT_LIST_RESPONSE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FORMAT_LIST_RESPONSE>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FORMAT_LIST_RESPONSE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST_RESPONSE>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST_RESPONSE),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST_RESPONSE>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST_RESPONSE),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_LIST_RESPONSE>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_LIST_RESPONSE),
            "::",
            stringify!(dataLen)
        )
    );
}
pub type CLIPRDR_FORMAT_LIST_RESPONSE = _CLIPRDR_FORMAT_LIST_RESPONSE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_LOCK_CLIPBOARD_DATA {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub clipDataId: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_LOCK_CLIPBOARD_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_LOCK_CLIPBOARD_DATA>(),
        12usize,
        concat!("Size of: ", stringify!(_CLIPRDR_LOCK_CLIPBOARD_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_LOCK_CLIPBOARD_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_LOCK_CLIPBOARD_DATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_LOCK_CLIPBOARD_DATA>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_LOCK_CLIPBOARD_DATA),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_LOCK_CLIPBOARD_DATA>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_LOCK_CLIPBOARD_DATA),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_LOCK_CLIPBOARD_DATA>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_LOCK_CLIPBOARD_DATA),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_LOCK_CLIPBOARD_DATA>())).clipDataId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_LOCK_CLIPBOARD_DATA),
            "::",
            stringify!(clipDataId)
        )
    );
}
pub type CLIPRDR_LOCK_CLIPBOARD_DATA = _CLIPRDR_LOCK_CLIPBOARD_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_UNLOCK_CLIPBOARD_DATA {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub clipDataId: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_UNLOCK_CLIPBOARD_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_UNLOCK_CLIPBOARD_DATA>(),
        12usize,
        concat!("Size of: ", stringify!(_CLIPRDR_UNLOCK_CLIPBOARD_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_UNLOCK_CLIPBOARD_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_UNLOCK_CLIPBOARD_DATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_UNLOCK_CLIPBOARD_DATA>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_UNLOCK_CLIPBOARD_DATA),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_UNLOCK_CLIPBOARD_DATA>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_UNLOCK_CLIPBOARD_DATA),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_UNLOCK_CLIPBOARD_DATA>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_UNLOCK_CLIPBOARD_DATA),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_UNLOCK_CLIPBOARD_DATA>())).clipDataId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_UNLOCK_CLIPBOARD_DATA),
            "::",
            stringify!(clipDataId)
        )
    );
}
pub type CLIPRDR_UNLOCK_CLIPBOARD_DATA = _CLIPRDR_UNLOCK_CLIPBOARD_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FORMAT_DATA_REQUEST {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub requestedFormatId: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FORMAT_DATA_REQUEST() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FORMAT_DATA_REQUEST>(),
        12usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FORMAT_DATA_REQUEST))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FORMAT_DATA_REQUEST>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FORMAT_DATA_REQUEST))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_REQUEST>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_REQUEST),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_REQUEST>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_REQUEST),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_REQUEST>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_REQUEST),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_REQUEST>())).requestedFormatId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_REQUEST),
            "::",
            stringify!(requestedFormatId)
        )
    );
}
pub type CLIPRDR_FORMAT_DATA_REQUEST = _CLIPRDR_FORMAT_DATA_REQUEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FORMAT_DATA_RESPONSE {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub requestedFormatData: *const BYTE,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FORMAT_DATA_RESPONSE() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FORMAT_DATA_RESPONSE>(),
        16usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FORMAT_DATA_RESPONSE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FORMAT_DATA_RESPONSE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FORMAT_DATA_RESPONSE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_RESPONSE>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_RESPONSE),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_RESPONSE>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_RESPONSE),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_RESPONSE>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_RESPONSE),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FORMAT_DATA_RESPONSE>())).requestedFormatData
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_DATA_RESPONSE),
            "::",
            stringify!(requestedFormatData)
        )
    );
}
pub type CLIPRDR_FORMAT_DATA_RESPONSE = _CLIPRDR_FORMAT_DATA_RESPONSE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FILE_CONTENTS_REQUEST {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub streamId: UINT32,
    pub listIndex: UINT32,
    pub dwFlags: UINT32,
    pub nPositionLow: UINT32,
    pub nPositionHigh: UINT32,
    pub cbRequested: UINT32,
    pub haveClipDataId: BOOL,
    pub clipDataId: UINT32,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FILE_CONTENTS_REQUEST() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FILE_CONTENTS_REQUEST>(),
        40usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FILE_CONTENTS_REQUEST>(),
        4usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).msgFlags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).streamId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(streamId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).listIndex as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(listIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).dwFlags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).nPositionLow as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(nPositionLow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).nPositionHigh as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(nPositionHigh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).cbRequested as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(cbRequested)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).haveClipDataId as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(haveClipDataId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_REQUEST>())).clipDataId as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_REQUEST),
            "::",
            stringify!(clipDataId)
        )
    );
}
pub type CLIPRDR_FILE_CONTENTS_REQUEST = _CLIPRDR_FILE_CONTENTS_REQUEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FILE_CONTENTS_RESPONSE {
    pub msgType: UINT16,
    pub msgFlags: UINT16,
    pub dataLen: UINT32,
    pub streamId: UINT32,
    pub cbRequested: UINT32,
    pub requestedData: *const BYTE,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FILE_CONTENTS_RESPONSE() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FILE_CONTENTS_RESPONSE>(),
        24usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FILE_CONTENTS_RESPONSE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_RESPONSE>())).msgType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE),
            "::",
            stringify!(msgType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_RESPONSE>())).msgFlags as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE),
            "::",
            stringify!(msgFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_RESPONSE>())).dataLen as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_RESPONSE>())).streamId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE),
            "::",
            stringify!(streamId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_RESPONSE>())).cbRequested as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE),
            "::",
            stringify!(cbRequested)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_CLIPRDR_FILE_CONTENTS_RESPONSE>())).requestedData as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FILE_CONTENTS_RESPONSE),
            "::",
            stringify!(requestedData)
        )
    );
}
pub type CLIPRDR_FILE_CONTENTS_RESPONSE = _CLIPRDR_FILE_CONTENTS_RESPONSE;
#[doc = " Client Interface"]
pub type CliprdrClientContext = _cliprdr_client_context;
pub type pcCliprdrServerCapabilities = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        capabilities: *const CLIPRDR_CAPABILITIES,
    ) -> UINT,
>;
pub type pcCliprdrClientCapabilities = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        capabilities: *const CLIPRDR_CAPABILITIES,
    ) -> UINT,
>;
pub type pcCliprdrMonitorReady = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        monitorReady: *const CLIPRDR_MONITOR_READY,
    ) -> UINT,
>;
pub type pcCliprdrTempDirectory = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        tempDirectory: *const CLIPRDR_TEMP_DIRECTORY,
    ) -> UINT,
>;
pub type pcCliprdrClientFormatList = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatList: *const CLIPRDR_FORMAT_LIST,
    ) -> UINT,
>;
pub type pcCliprdrServerFormatList = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatList: *const CLIPRDR_FORMAT_LIST,
    ) -> UINT,
>;
pub type pcCliprdrClientFormatListResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatListResponse: *const CLIPRDR_FORMAT_LIST_RESPONSE,
    ) -> UINT,
>;
pub type pcCliprdrServerFormatListResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatListResponse: *const CLIPRDR_FORMAT_LIST_RESPONSE,
    ) -> UINT,
>;
pub type pcCliprdrClientLockClipboardData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        lockClipboardData: *const CLIPRDR_LOCK_CLIPBOARD_DATA,
    ) -> UINT,
>;
pub type pcCliprdrServerLockClipboardData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        lockClipboardData: *const CLIPRDR_LOCK_CLIPBOARD_DATA,
    ) -> UINT,
>;
pub type pcCliprdrClientUnlockClipboardData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        unlockClipboardData: *const CLIPRDR_UNLOCK_CLIPBOARD_DATA,
    ) -> UINT,
>;
pub type pcCliprdrServerUnlockClipboardData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        unlockClipboardData: *const CLIPRDR_UNLOCK_CLIPBOARD_DATA,
    ) -> UINT,
>;
pub type pcCliprdrClientFormatDataRequest = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatDataRequest: *const CLIPRDR_FORMAT_DATA_REQUEST,
    ) -> UINT,
>;
pub type pcCliprdrServerFormatDataRequest = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatDataRequest: *const CLIPRDR_FORMAT_DATA_REQUEST,
    ) -> UINT,
>;
pub type pcCliprdrClientFormatDataResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatDataResponse: *const CLIPRDR_FORMAT_DATA_RESPONSE,
    ) -> UINT,
>;
pub type pcCliprdrServerFormatDataResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        formatDataResponse: *const CLIPRDR_FORMAT_DATA_RESPONSE,
    ) -> UINT,
>;
pub type pcCliprdrClientFileContentsRequest = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        fileContentsRequest: *const CLIPRDR_FILE_CONTENTS_REQUEST,
    ) -> UINT,
>;
pub type pcCliprdrServerFileContentsRequest = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        fileContentsRequest: *const CLIPRDR_FILE_CONTENTS_REQUEST,
    ) -> UINT,
>;
pub type pcCliprdrClientFileContentsResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        fileContentsResponse: *const CLIPRDR_FILE_CONTENTS_RESPONSE,
    ) -> UINT,
>;
pub type pcCliprdrServerFileContentsResponse = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut CliprdrClientContext,
        fileContentsResponse: *const CLIPRDR_FILE_CONTENTS_RESPONSE,
    ) -> UINT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cliprdr_client_context {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub ServerCapabilities: pcCliprdrServerCapabilities,
    pub ClientCapabilities: pcCliprdrClientCapabilities,
    pub MonitorReady: pcCliprdrMonitorReady,
    pub TempDirectory: pcCliprdrTempDirectory,
    pub ClientFormatList: pcCliprdrClientFormatList,
    pub ServerFormatList: pcCliprdrServerFormatList,
    pub ClientFormatListResponse: pcCliprdrClientFormatListResponse,
    pub ServerFormatListResponse: pcCliprdrServerFormatListResponse,
    pub ClientLockClipboardData: pcCliprdrClientLockClipboardData,
    pub ServerLockClipboardData: pcCliprdrServerLockClipboardData,
    pub ClientUnlockClipboardData: pcCliprdrClientUnlockClipboardData,
    pub ServerUnlockClipboardData: pcCliprdrServerUnlockClipboardData,
    pub ClientFormatDataRequest: pcCliprdrClientFormatDataRequest,
    pub ServerFormatDataRequest: pcCliprdrServerFormatDataRequest,
    pub ClientFormatDataResponse: pcCliprdrClientFormatDataResponse,
    pub ServerFormatDataResponse: pcCliprdrServerFormatDataResponse,
    pub ClientFileContentsRequest: pcCliprdrClientFileContentsRequest,
    pub ServerFileContentsRequest: pcCliprdrServerFileContentsRequest,
    pub ClientFileContentsResponse: pcCliprdrClientFileContentsResponse,
    pub ServerFileContentsResponse: pcCliprdrServerFileContentsResponse,
    pub lastRequestedFormatId: UINT32,
    pub rdpcontext: *mut rdpContext,
}
#[test]
fn bindgen_test_layout__cliprdr_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_cliprdr_client_context>(),
        192usize,
        concat!("Size of: ", stringify!(_cliprdr_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_cliprdr_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_cliprdr_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cliprdr_client_context>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cliprdr_client_context>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerCapabilities as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientCapabilities as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).MonitorReady as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(MonitorReady)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).TempDirectory as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(TempDirectory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientFormatList as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientFormatList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerFormatList as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerFormatList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientFormatListResponse as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientFormatListResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerFormatListResponse as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerFormatListResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientLockClipboardData as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientLockClipboardData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerLockClipboardData as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerLockClipboardData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientUnlockClipboardData
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientUnlockClipboardData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerUnlockClipboardData
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerUnlockClipboardData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientFormatDataRequest as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientFormatDataRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerFormatDataRequest as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerFormatDataRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientFormatDataResponse as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientFormatDataResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerFormatDataResponse as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerFormatDataResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientFileContentsRequest
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientFileContentsRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerFileContentsRequest
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerFileContentsRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ClientFileContentsResponse
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ClientFileContentsResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).ServerFileContentsResponse
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(ServerFileContentsResponse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).lastRequestedFormatId as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(lastRequestedFormatId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cliprdr_client_context>())).rdpcontext as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cliprdr_client_context),
            "::",
            stringify!(rdpcontext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLIPRDR_FORMAT_NAME {
    pub id: UINT32,
    pub name: *mut ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__CLIPRDR_FORMAT_NAME() {
    assert_eq!(
        ::std::mem::size_of::<_CLIPRDR_FORMAT_NAME>(),
        24usize,
        concat!("Size of: ", stringify!(_CLIPRDR_FORMAT_NAME))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIPRDR_FORMAT_NAME>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIPRDR_FORMAT_NAME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_NAME>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_NAME),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_NAME>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_NAME),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CLIPRDR_FORMAT_NAME>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIPRDR_FORMAT_NAME),
            "::",
            stringify!(length)
        )
    );
}
pub type CLIPRDR_FORMAT_NAME = _CLIPRDR_FORMAT_NAME;
#[doc = " Client Interface"]
pub type RdpgfxClientContext = _rdpgfx_client_context;
pub type pcRdpgfxResetGraphics = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        resetGraphics: *const RDPGFX_RESET_GRAPHICS_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxStartFrame = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        startFrame: *const RDPGFX_START_FRAME_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxEndFrame = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        endFrame: *const RDPGFX_END_FRAME_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxSurfaceCommand = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        cmd: *const RDPGFX_SURFACE_COMMAND,
    ) -> UINT,
>;
pub type pcRdpgfxDeleteEncodingContext = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        deleteEncodingContext: *const RDPGFX_DELETE_ENCODING_CONTEXT_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxCreateSurface = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        createSurface: *const RDPGFX_CREATE_SURFACE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxDeleteSurface = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        deleteSurface: *const RDPGFX_DELETE_SURFACE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxSolidFill = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        solidFill: *const RDPGFX_SOLID_FILL_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxSurfaceToSurface = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceToSurface: *const RDPGFX_SURFACE_TO_SURFACE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxSurfaceToCache = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceToCache: *const RDPGFX_SURFACE_TO_CACHE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxCacheToSurface = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        cacheToSurface: *const RDPGFX_CACHE_TO_SURFACE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxCacheImportOffer = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        cacheImportOffer: *const RDPGFX_CACHE_IMPORT_OFFER_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxCacheImportReply = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        cacheImportReply: *const RDPGFX_CACHE_IMPORT_REPLY_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxEvictCacheEntry = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        evictCacheEntry: *const RDPGFX_EVICT_CACHE_ENTRY_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxMapSurfaceToOutput = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceToOutput: *const RDPGFX_MAP_SURFACE_TO_OUTPUT_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxMapSurfaceToScaledOutput = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceToOutput: *const RDPGFX_MAP_SURFACE_TO_SCALED_OUTPUT_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxMapSurfaceToWindow = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceToWindow: *const RDPGFX_MAP_SURFACE_TO_WINDOW_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxMapSurfaceToScaledWindow = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceToWindow: *const RDPGFX_MAP_SURFACE_TO_SCALED_WINDOW_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxSetSurfaceData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceId: UINT16,
        pData: *mut ::std::os::raw::c_void,
    ) -> UINT,
>;
pub type pcRdpgfxGetSurfaceData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceId: UINT16,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type pcRdpgfxGetSurfaceIds = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        ppSurfaceIds: *mut *mut UINT16,
        count: *mut UINT16,
    ) -> UINT,
>;
pub type pcRdpgfxSetCacheSlotData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        cacheSlot: UINT16,
        pData: *mut ::std::os::raw::c_void,
    ) -> UINT,
>;
pub type pcRdpgfxGetCacheSlotData = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        cacheSlot: UINT16,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type pcRdpgfxUpdateSurfaces =
    ::std::option::Option<unsafe extern "C" fn(context: *mut RdpgfxClientContext) -> UINT>;
pub type pcRdpgfxUpdateSurfaceArea = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceId: UINT16,
        nrRects: UINT32,
        rects: *const RECTANGLE_16,
    ) -> UINT,
>;
pub type pcRdpgfxOnOpen = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        do_caps_advertise: *mut BOOL,
        do_frame_acks: *mut BOOL,
    ) -> UINT,
>;
pub type pcRdpgfxOnClose =
    ::std::option::Option<unsafe extern "C" fn(context: *mut RdpgfxClientContext) -> UINT>;
pub type pcRdpgfxCapsAdvertise = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        capsAdvertise: *const RDPGFX_CAPS_ADVERTISE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxCapsConfirm = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        capsConfirm: *const RDPGFX_CAPS_CONFIRM_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxFrameAcknowledge = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        frameAcknowledge: *const RDPGFX_FRAME_ACKNOWLEDGE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxQoeFrameAcknowledge = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        qoeFrameAcknowledge: *const RDPGFX_QOE_FRAME_ACKNOWLEDGE_PDU,
    ) -> UINT,
>;
pub type pcRdpgfxMapWindowForSurface = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut RdpgfxClientContext,
        surfaceID: UINT16,
        windowID: UINT64,
    ) -> UINT,
>;
pub type pcRdpgfxUnmapWindowForSurface = ::std::option::Option<
    unsafe extern "C" fn(context: *mut RdpgfxClientContext, windowID: UINT64) -> UINT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rdpgfx_client_context {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub ResetGraphics: pcRdpgfxResetGraphics,
    pub StartFrame: pcRdpgfxStartFrame,
    pub EndFrame: pcRdpgfxEndFrame,
    pub SurfaceCommand: pcRdpgfxSurfaceCommand,
    pub DeleteEncodingContext: pcRdpgfxDeleteEncodingContext,
    pub CreateSurface: pcRdpgfxCreateSurface,
    pub DeleteSurface: pcRdpgfxDeleteSurface,
    pub SolidFill: pcRdpgfxSolidFill,
    pub SurfaceToSurface: pcRdpgfxSurfaceToSurface,
    pub SurfaceToCache: pcRdpgfxSurfaceToCache,
    pub CacheToSurface: pcRdpgfxCacheToSurface,
    pub CacheImportOffer: pcRdpgfxCacheImportOffer,
    pub CacheImportReply: pcRdpgfxCacheImportReply,
    pub EvictCacheEntry: pcRdpgfxEvictCacheEntry,
    pub MapSurfaceToOutput: pcRdpgfxMapSurfaceToOutput,
    pub MapSurfaceToScaledOutput: pcRdpgfxMapSurfaceToScaledOutput,
    pub MapSurfaceToWindow: pcRdpgfxMapSurfaceToWindow,
    pub MapSurfaceToScaledWindow: pcRdpgfxMapSurfaceToScaledWindow,
    pub GetSurfaceIds: pcRdpgfxGetSurfaceIds,
    pub SetSurfaceData: pcRdpgfxSetSurfaceData,
    pub GetSurfaceData: pcRdpgfxGetSurfaceData,
    pub SetCacheSlotData: pcRdpgfxSetCacheSlotData,
    pub GetCacheSlotData: pcRdpgfxGetCacheSlotData,
    pub OnOpen: pcRdpgfxOnOpen,
    pub OnClose: pcRdpgfxOnClose,
    pub CapsAdvertise: pcRdpgfxCapsAdvertise,
    pub CapsConfirm: pcRdpgfxCapsConfirm,
    pub FrameAcknowledge: pcRdpgfxFrameAcknowledge,
    pub QoeFrameAcknowledge: pcRdpgfxQoeFrameAcknowledge,
    pub UpdateSurfaces: pcRdpgfxUpdateSurfaces,
    pub UpdateSurfaceArea: pcRdpgfxUpdateSurfaceArea,
    pub MapWindowForSurface: pcRdpgfxMapWindowForSurface,
    pub UnmapWindowForSurface: pcRdpgfxUnmapWindowForSurface,
    pub mux: CRITICAL_SECTION,
}
#[test]
fn bindgen_test_layout__rdpgfx_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_rdpgfx_client_context>(),
        320usize,
        concat!("Size of: ", stringify!(_rdpgfx_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_rdpgfx_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_rdpgfx_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpgfx_client_context>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpgfx_client_context>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).ResetGraphics as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(ResetGraphics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).StartFrame as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(StartFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpgfx_client_context>())).EndFrame as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(EndFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).SurfaceCommand as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(SurfaceCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).DeleteEncodingContext as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(DeleteEncodingContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).CreateSurface as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(CreateSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).DeleteSurface as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(DeleteSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).SolidFill as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(SolidFill)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).SurfaceToSurface as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(SurfaceToSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).SurfaceToCache as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(SurfaceToCache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).CacheToSurface as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(CacheToSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).CacheImportOffer as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(CacheImportOffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).CacheImportReply as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(CacheImportReply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).EvictCacheEntry as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(EvictCacheEntry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).MapSurfaceToOutput as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(MapSurfaceToOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).MapSurfaceToScaledOutput as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(MapSurfaceToScaledOutput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).MapSurfaceToWindow as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(MapSurfaceToWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).MapSurfaceToScaledWindow as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(MapSurfaceToScaledWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).GetSurfaceIds as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(GetSurfaceIds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).SetSurfaceData as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(SetSurfaceData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).GetSurfaceData as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(GetSurfaceData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).SetCacheSlotData as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(SetCacheSlotData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).GetCacheSlotData as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(GetCacheSlotData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpgfx_client_context>())).OnOpen as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(OnOpen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpgfx_client_context>())).OnClose as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(OnClose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).CapsAdvertise as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(CapsAdvertise)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).CapsConfirm as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(CapsConfirm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).FrameAcknowledge as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(FrameAcknowledge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).QoeFrameAcknowledge as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(QoeFrameAcknowledge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).UpdateSurfaces as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(UpdateSurfaces)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).UpdateSurfaceArea as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(UpdateSurfaceArea)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).MapWindowForSurface as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(MapWindowForSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_rdpgfx_client_context>())).UnmapWindowForSurface as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(UnmapWindowForSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_rdpgfx_client_context>())).mux as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_rdpgfx_client_context),
            "::",
            stringify!(mux)
        )
    );
}
extern "C" {
    pub fn rdpgfx_client_context_new(settings: *mut rdpSettings) -> *mut RdpgfxClientContext;
}
extern "C" {
    pub fn rdpgfx_client_context_free(context: *mut RdpgfxClientContext);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_UNICODE_STRING {
    pub cchString: UINT16,
    pub wString: [WCHAR; 1024usize],
}
#[test]
fn bindgen_test_layout__ENCOMSP_UNICODE_STRING() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_UNICODE_STRING>(),
        2050usize,
        concat!("Size of: ", stringify!(_ENCOMSP_UNICODE_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_UNICODE_STRING>(),
        2usize,
        concat!("Alignment of ", stringify!(_ENCOMSP_UNICODE_STRING))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_UNICODE_STRING>())).cchString as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_UNICODE_STRING),
            "::",
            stringify!(cchString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ENCOMSP_UNICODE_STRING>())).wString as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_UNICODE_STRING),
            "::",
            stringify!(wString)
        )
    );
}
pub type ENCOMSP_UNICODE_STRING = _ENCOMSP_UNICODE_STRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_FILTER_UPDATED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub Flags: BYTE,
}
#[test]
fn bindgen_test_layout__ENCOMSP_FILTER_UPDATED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_FILTER_UPDATED_PDU>(),
        6usize,
        concat!("Size of: ", stringify!(_ENCOMSP_FILTER_UPDATED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_FILTER_UPDATED_PDU>(),
        2usize,
        concat!("Alignment of ", stringify!(_ENCOMSP_FILTER_UPDATED_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_FILTER_UPDATED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_FILTER_UPDATED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_FILTER_UPDATED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_FILTER_UPDATED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_FILTER_UPDATED_PDU>())).Flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_FILTER_UPDATED_PDU),
            "::",
            stringify!(Flags)
        )
    );
}
pub type ENCOMSP_FILTER_UPDATED_PDU = _ENCOMSP_FILTER_UPDATED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_APPLICATION_CREATED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub Flags: UINT16,
    pub AppId: UINT32,
    pub Name: ENCOMSP_UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__ENCOMSP_APPLICATION_CREATED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_APPLICATION_CREATED_PDU>(),
        2064usize,
        concat!("Size of: ", stringify!(_ENCOMSP_APPLICATION_CREATED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_APPLICATION_CREATED_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_APPLICATION_CREATED_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_CREATED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_CREATED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_CREATED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_CREATED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_CREATED_PDU>())).Flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_CREATED_PDU),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_CREATED_PDU>())).AppId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_CREATED_PDU),
            "::",
            stringify!(AppId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_CREATED_PDU>())).Name as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_CREATED_PDU),
            "::",
            stringify!(Name)
        )
    );
}
pub type ENCOMSP_APPLICATION_CREATED_PDU = _ENCOMSP_APPLICATION_CREATED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_APPLICATION_REMOVED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub AppId: UINT32,
}
#[test]
fn bindgen_test_layout__ENCOMSP_APPLICATION_REMOVED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_APPLICATION_REMOVED_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_ENCOMSP_APPLICATION_REMOVED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_APPLICATION_REMOVED_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_APPLICATION_REMOVED_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_REMOVED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_REMOVED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_REMOVED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_REMOVED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_APPLICATION_REMOVED_PDU>())).AppId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_APPLICATION_REMOVED_PDU),
            "::",
            stringify!(AppId)
        )
    );
}
pub type ENCOMSP_APPLICATION_REMOVED_PDU = _ENCOMSP_APPLICATION_REMOVED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_WINDOW_CREATED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub Flags: UINT16,
    pub AppId: UINT32,
    pub WndId: UINT32,
    pub Name: ENCOMSP_UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__ENCOMSP_WINDOW_CREATED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_WINDOW_CREATED_PDU>(),
        2068usize,
        concat!("Size of: ", stringify!(_ENCOMSP_WINDOW_CREATED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_WINDOW_CREATED_PDU>(),
        4usize,
        concat!("Alignment of ", stringify!(_ENCOMSP_WINDOW_CREATED_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_CREATED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_CREATED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_CREATED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_CREATED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_CREATED_PDU>())).Flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_CREATED_PDU),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_CREATED_PDU>())).AppId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_CREATED_PDU),
            "::",
            stringify!(AppId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_CREATED_PDU>())).WndId as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_CREATED_PDU),
            "::",
            stringify!(WndId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_CREATED_PDU>())).Name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_CREATED_PDU),
            "::",
            stringify!(Name)
        )
    );
}
pub type ENCOMSP_WINDOW_CREATED_PDU = _ENCOMSP_WINDOW_CREATED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_WINDOW_REMOVED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub WndId: UINT32,
}
#[test]
fn bindgen_test_layout__ENCOMSP_WINDOW_REMOVED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_WINDOW_REMOVED_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_ENCOMSP_WINDOW_REMOVED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_WINDOW_REMOVED_PDU>(),
        4usize,
        concat!("Alignment of ", stringify!(_ENCOMSP_WINDOW_REMOVED_PDU))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_REMOVED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_REMOVED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_REMOVED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_REMOVED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_WINDOW_REMOVED_PDU>())).WndId as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_WINDOW_REMOVED_PDU),
            "::",
            stringify!(WndId)
        )
    );
}
pub type ENCOMSP_WINDOW_REMOVED_PDU = _ENCOMSP_WINDOW_REMOVED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_SHOW_WINDOW_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub WndId: UINT32,
}
#[test]
fn bindgen_test_layout__ENCOMSP_SHOW_WINDOW_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_SHOW_WINDOW_PDU>(),
        8usize,
        concat!("Size of: ", stringify!(_ENCOMSP_SHOW_WINDOW_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_SHOW_WINDOW_PDU>(),
        4usize,
        concat!("Alignment of ", stringify!(_ENCOMSP_SHOW_WINDOW_PDU))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ENCOMSP_SHOW_WINDOW_PDU>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_SHOW_WINDOW_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ENCOMSP_SHOW_WINDOW_PDU>())).Length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_SHOW_WINDOW_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ENCOMSP_SHOW_WINDOW_PDU>())).WndId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_SHOW_WINDOW_PDU),
            "::",
            stringify!(WndId)
        )
    );
}
pub type ENCOMSP_SHOW_WINDOW_PDU = _ENCOMSP_SHOW_WINDOW_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_PARTICIPANT_CREATED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub ParticipantId: UINT32,
    pub GroupId: UINT32,
    pub Flags: UINT16,
    pub FriendlyName: ENCOMSP_UNICODE_STRING,
}
#[test]
fn bindgen_test_layout__ENCOMSP_PARTICIPANT_CREATED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_PARTICIPANT_CREATED_PDU>(),
        2064usize,
        concat!("Size of: ", stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_PARTICIPANT_CREATED_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_CREATED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_CREATED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_CREATED_PDU>())).ParticipantId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU),
            "::",
            stringify!(ParticipantId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_CREATED_PDU>())).GroupId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU),
            "::",
            stringify!(GroupId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_CREATED_PDU>())).Flags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_CREATED_PDU>())).FriendlyName as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_CREATED_PDU),
            "::",
            stringify!(FriendlyName)
        )
    );
}
pub type ENCOMSP_PARTICIPANT_CREATED_PDU = _ENCOMSP_PARTICIPANT_CREATED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_PARTICIPANT_REMOVED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub ParticipantId: UINT32,
    pub DiscType: UINT32,
    pub DiscCode: UINT32,
}
#[test]
fn bindgen_test_layout__ENCOMSP_PARTICIPANT_REMOVED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>(),
        16usize,
        concat!("Size of: ", stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>())).Type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>())).Length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>())).ParticipantId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU),
            "::",
            stringify!(ParticipantId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>())).DiscType as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU),
            "::",
            stringify!(DiscType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_PARTICIPANT_REMOVED_PDU>())).DiscCode as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_PARTICIPANT_REMOVED_PDU),
            "::",
            stringify!(DiscCode)
        )
    );
}
pub type ENCOMSP_PARTICIPANT_REMOVED_PDU = _ENCOMSP_PARTICIPANT_REMOVED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
    pub Flags: UINT16,
    pub ParticipantId: UINT32,
}
#[test]
fn bindgen_test_layout__ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU>())).Type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU>())).Length
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU>())).Flags
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU>())).ParticipantId
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU),
            "::",
            stringify!(ParticipantId)
        )
    );
}
pub type ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU =
    _ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
}
#[test]
fn bindgen_test_layout__ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU>(),
        4usize,
        concat!("Size of: ", stringify!(_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU))
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU>())).Type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU>())).Length as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU),
            "::",
            stringify!(Length)
        )
    );
}
pub type ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU = _ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU {
    pub Type: UINT16,
    pub Length: UINT16,
}
#[test]
fn bindgen_test_layout__ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU() {
    assert_eq!(
        ::std::mem::size_of::<_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU>())).Type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU>())).Length as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU),
            "::",
            stringify!(Length)
        )
    );
}
pub type ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU = _ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU;
#[doc = " Client Interface"]
pub type EncomspClientContext = _encomsp_client_context;
pub type pcEncomspFilterUpdated = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        filterUpdated: *const ENCOMSP_FILTER_UPDATED_PDU,
    ) -> UINT,
>;
pub type pcEncomspApplicationCreated = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        applicationCreated: *const ENCOMSP_APPLICATION_CREATED_PDU,
    ) -> UINT,
>;
pub type pcEncomspApplicationRemoved = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        applicationRemoved: *const ENCOMSP_APPLICATION_REMOVED_PDU,
    ) -> UINT,
>;
pub type pcEncomspWindowCreated = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        windowCreated: *const ENCOMSP_WINDOW_CREATED_PDU,
    ) -> UINT,
>;
pub type pcEncomspWindowRemoved = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        windowRemoved: *const ENCOMSP_WINDOW_REMOVED_PDU,
    ) -> UINT,
>;
pub type pcEncomspShowWindow = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        showWindow: *const ENCOMSP_SHOW_WINDOW_PDU,
    ) -> UINT,
>;
pub type pcEncomspParticipantCreated = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        participantCreated: *const ENCOMSP_PARTICIPANT_CREATED_PDU,
    ) -> UINT,
>;
pub type pcEncomspParticipantRemoved = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        participantRemoved: *const ENCOMSP_PARTICIPANT_REMOVED_PDU,
    ) -> UINT,
>;
pub type pcEncomspChangeParticipantControlLevel = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        changeParticipantControlLevel: *const ENCOMSP_CHANGE_PARTICIPANT_CONTROL_LEVEL_PDU,
    ) -> UINT,
>;
pub type pcEncomspGraphicsStreamPaused = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        graphicsStreamPaused: *const ENCOMSP_GRAPHICS_STREAM_PAUSED_PDU,
    ) -> UINT,
>;
pub type pcEncomspGraphicsStreamResumed = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut EncomspClientContext,
        graphicsStreamResumed: *const ENCOMSP_GRAPHICS_STREAM_RESUMED_PDU,
    ) -> UINT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _encomsp_client_context {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub FilterUpdated: pcEncomspFilterUpdated,
    pub ApplicationCreated: pcEncomspApplicationCreated,
    pub ApplicationRemoved: pcEncomspApplicationRemoved,
    pub WindowCreated: pcEncomspWindowCreated,
    pub WindowRemoved: pcEncomspWindowRemoved,
    pub ShowWindow: pcEncomspShowWindow,
    pub ParticipantCreated: pcEncomspParticipantCreated,
    pub ParticipantRemoved: pcEncomspParticipantRemoved,
    pub ChangeParticipantControlLevel: pcEncomspChangeParticipantControlLevel,
    pub GraphicsStreamPaused: pcEncomspGraphicsStreamPaused,
    pub GraphicsStreamResumed: pcEncomspGraphicsStreamResumed,
}
#[test]
fn bindgen_test_layout__encomsp_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_encomsp_client_context>(),
        104usize,
        concat!("Size of: ", stringify!(_encomsp_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_encomsp_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_encomsp_client_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_encomsp_client_context>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_encomsp_client_context>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).FilterUpdated as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(FilterUpdated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).ApplicationCreated as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(ApplicationCreated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).ApplicationRemoved as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(ApplicationRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).WindowCreated as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(WindowCreated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).WindowRemoved as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(WindowRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).ShowWindow as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(ShowWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).ParticipantCreated as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(ParticipantCreated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).ParticipantRemoved as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(ParticipantRemoved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).ChangeParticipantControlLevel
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(ChangeParticipantControlLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).GraphicsStreamPaused as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(GraphicsStreamPaused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_encomsp_client_context>())).GraphicsStreamResumed as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_encomsp_client_context),
            "::",
            stringify!(GraphicsStreamResumed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDP_CODEPAGE {
    pub id: UINT16,
    pub primaryId: UINT8,
    pub subId: UINT8,
    pub locale: [::std::os::raw::c_char; 512usize],
    pub primaryLanguage: [::std::os::raw::c_char; 512usize],
    pub primaryLanguageSymbol: [::std::os::raw::c_char; 512usize],
    pub subLanguage: [::std::os::raw::c_char; 512usize],
    pub subLanguageSymbol: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout__RDP_CODEPAGE() {
    assert_eq!(
        ::std::mem::size_of::<_RDP_CODEPAGE>(),
        2564usize,
        concat!("Size of: ", stringify!(_RDP_CODEPAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDP_CODEPAGE>(),
        2usize,
        concat!("Alignment of ", stringify!(_RDP_CODEPAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).primaryId as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(primaryId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).subId as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(subId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).locale as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).primaryLanguage as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(primaryLanguage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_RDP_CODEPAGE>())).primaryLanguageSymbol as *const _ as usize
        },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(primaryLanguageSymbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).subLanguage as *const _ as usize },
        1540usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(subLanguage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_CODEPAGE>())).subLanguageSymbol as *const _ as usize },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_CODEPAGE),
            "::",
            stringify!(subLanguageSymbol)
        )
    );
}
pub type RDP_CODEPAGE = _RDP_CODEPAGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RDP_KEYBOARD_LAYOUT {
    pub code: DWORD,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__RDP_KEYBOARD_LAYOUT() {
    assert_eq!(
        ::std::mem::size_of::<_RDP_KEYBOARD_LAYOUT>(),
        16usize,
        concat!("Size of: ", stringify!(_RDP_KEYBOARD_LAYOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<_RDP_KEYBOARD_LAYOUT>(),
        8usize,
        concat!("Alignment of ", stringify!(_RDP_KEYBOARD_LAYOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_KEYBOARD_LAYOUT>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_KEYBOARD_LAYOUT),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RDP_KEYBOARD_LAYOUT>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RDP_KEYBOARD_LAYOUT),
            "::",
            stringify!(name)
        )
    );
}
pub type RDP_KEYBOARD_LAYOUT = _RDP_KEYBOARD_LAYOUT;
extern "C" {
    pub fn freerdp_keyboard_init(keyboardLayoutId: DWORD) -> DWORD;
}
extern "C" {
    pub fn freerdp_keyboard_init_ex(
        keyboardLayoutId: DWORD,
        keyboardRemappingList: *const ::std::os::raw::c_char,
    ) -> DWORD;
}
extern "C" {
    pub fn freerdp_keyboard_get_layouts(types: DWORD) -> *mut RDP_KEYBOARD_LAYOUT;
}
extern "C" {
    pub fn freerdp_keyboard_layouts_free(layouts: *mut RDP_KEYBOARD_LAYOUT);
}
extern "C" {
    pub fn freerdp_keyboard_get_layout_name_from_id(
        keyboardLayoutId: DWORD,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_keyboard_get_layout_id_from_name(name: *const ::std::os::raw::c_char) -> DWORD;
}
extern "C" {
    pub fn freerdp_keyboard_get_rdp_scancode_from_x11_keycode(keycode: DWORD) -> DWORD;
}
extern "C" {
    pub fn freerdp_keyboard_get_x11_keycode_from_rdp_scancode(
        scancode: DWORD,
        extended: BOOL,
    ) -> DWORD;
}
extern "C" {
    pub fn freerdp_keyboard_get_matching_codepages(
        column: DWORD,
        filter: *const ::std::os::raw::c_char,
        count: *mut size_t,
    ) -> *mut RDP_CODEPAGE;
}
extern "C" {
    pub fn freerdp_codepages_free(arg1: *mut RDP_CODEPAGE);
}
extern "C" {
    pub fn freerdp_get_system_locale_id() -> DWORD;
}
extern "C" {
    pub fn freerdp_get_system_locale_name_from_id(localeId: DWORD)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn freerdp_detect_keyboard_layout_from_system_locale(
        keyboardLayoutId: *mut DWORD,
    ) -> ::std::os::raw::c_int;
}
pub type GLYPH_CACHE = _GLYPH_CACHE;
pub type FRAGMENT_CACHE_ENTRY = _FRAGMENT_CACHE_ENTRY;
pub type FRAGMENT_CACHE = _FRAGMENT_CACHE;
pub type rdpGlyphCache = rdp_glyph_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPH_CACHE {
    pub number: UINT32,
    pub maxCellSize: UINT32,
    pub entries: *mut *mut rdpGlyph,
}
#[test]
fn bindgen_test_layout__GLYPH_CACHE() {
    assert_eq!(
        ::std::mem::size_of::<_GLYPH_CACHE>(),
        16usize,
        concat!("Size of: ", stringify!(_GLYPH_CACHE))
    );
    assert_eq!(
        ::std::mem::align_of::<_GLYPH_CACHE>(),
        8usize,
        concat!("Alignment of ", stringify!(_GLYPH_CACHE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_CACHE>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_CACHE),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_CACHE>())).maxCellSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_CACHE),
            "::",
            stringify!(maxCellSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GLYPH_CACHE>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GLYPH_CACHE),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAGMENT_CACHE_ENTRY {
    pub fragment: *mut ::std::os::raw::c_void,
    pub size: UINT32,
}
#[test]
fn bindgen_test_layout__FRAGMENT_CACHE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_FRAGMENT_CACHE_ENTRY>(),
        16usize,
        concat!("Size of: ", stringify!(_FRAGMENT_CACHE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_FRAGMENT_CACHE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_FRAGMENT_CACHE_ENTRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FRAGMENT_CACHE_ENTRY>())).fragment as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FRAGMENT_CACHE_ENTRY),
            "::",
            stringify!(fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FRAGMENT_CACHE_ENTRY>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FRAGMENT_CACHE_ENTRY),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAGMENT_CACHE {
    pub entries: *mut FRAGMENT_CACHE_ENTRY,
}
#[test]
fn bindgen_test_layout__FRAGMENT_CACHE() {
    assert_eq!(
        ::std::mem::size_of::<_FRAGMENT_CACHE>(),
        8usize,
        concat!("Size of: ", stringify!(_FRAGMENT_CACHE))
    );
    assert_eq!(
        ::std::mem::align_of::<_FRAGMENT_CACHE>(),
        8usize,
        concat!("Alignment of ", stringify!(_FRAGMENT_CACHE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FRAGMENT_CACHE>())).entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FRAGMENT_CACHE),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_glyph_cache {
    pub fragCache: FRAGMENT_CACHE,
    pub glyphCache: [GLYPH_CACHE; 10usize],
    pub log: *mut wLog,
    pub context: *mut rdpContext,
    pub settings: *mut rdpSettings,
}
#[test]
fn bindgen_test_layout_rdp_glyph_cache() {
    assert_eq!(
        ::std::mem::size_of::<rdp_glyph_cache>(),
        192usize,
        concat!("Size of: ", stringify!(rdp_glyph_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_glyph_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_glyph_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph_cache>())).fragCache as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph_cache),
            "::",
            stringify!(fragCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph_cache>())).glyphCache as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph_cache),
            "::",
            stringify!(glyphCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph_cache>())).log as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph_cache),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph_cache>())).context as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph_cache),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_glyph_cache>())).settings as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_glyph_cache),
            "::",
            stringify!(settings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_brush_cache {
    _unused: [u8; 0],
}
pub type rdpBrushCache = rdp_brush_cache;
pub type rdpPointerCache = rdp_pointer_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_pointer_cache {
    pub cacheSize: UINT32,
    pub entries: *mut *mut rdpPointer,
    pub update: *mut rdpUpdate,
    pub settings: *mut rdpSettings,
}
#[test]
fn bindgen_test_layout_rdp_pointer_cache() {
    assert_eq!(
        ::std::mem::size_of::<rdp_pointer_cache>(),
        32usize,
        concat!("Size of: ", stringify!(rdp_pointer_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_pointer_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_pointer_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_cache>())).cacheSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_cache),
            "::",
            stringify!(cacheSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_cache>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_cache),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_cache>())).update as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_cache),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_pointer_cache>())).settings as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_pointer_cache),
            "::",
            stringify!(settings)
        )
    );
}
pub type BITMAP_V2_CELL = _BITMAP_V2_CELL;
pub type rdpBitmapCache = rdp_bitmap_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_V2_CELL {
    pub number: UINT32,
    pub entries: *mut *mut rdpBitmap,
}
#[test]
fn bindgen_test_layout__BITMAP_V2_CELL() {
    assert_eq!(
        ::std::mem::size_of::<_BITMAP_V2_CELL>(),
        16usize,
        concat!("Size of: ", stringify!(_BITMAP_V2_CELL))
    );
    assert_eq!(
        ::std::mem::align_of::<_BITMAP_V2_CELL>(),
        8usize,
        concat!("Alignment of ", stringify!(_BITMAP_V2_CELL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_V2_CELL>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_V2_CELL),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_BITMAP_V2_CELL>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_BITMAP_V2_CELL),
            "::",
            stringify!(entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_bitmap_cache {
    pub MemBlt: pMemBlt,
    pub Mem3Blt: pMem3Blt,
    pub CacheBitmap: pCacheBitmap,
    pub CacheBitmapV2: pCacheBitmapV2,
    pub CacheBitmapV3: pCacheBitmapV3,
    pub BitmapUpdate: pBitmapUpdate,
    pub paddingA: [UINT32; 10usize],
    pub maxCells: UINT32,
    pub cells: *mut BITMAP_V2_CELL,
    pub paddingB: [UINT32; 14usize],
    pub update: *mut rdpUpdate,
    pub context: *mut rdpContext,
    pub settings: *mut rdpSettings,
}
#[test]
fn bindgen_test_layout_rdp_bitmap_cache() {
    assert_eq!(
        ::std::mem::size_of::<rdp_bitmap_cache>(),
        184usize,
        concat!("Size of: ", stringify!(rdp_bitmap_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_bitmap_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_bitmap_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).MemBlt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(MemBlt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).Mem3Blt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(Mem3Blt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).CacheBitmap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(CacheBitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).CacheBitmapV2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(CacheBitmapV2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).CacheBitmapV3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(CacheBitmapV3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).BitmapUpdate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(BitmapUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).paddingA as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(paddingA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).maxCells as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(maxCells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).cells as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).paddingB as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(paddingB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).update as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).context as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_bitmap_cache>())).settings as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_bitmap_cache),
            "::",
            stringify!(settings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_nine_grid_cache {
    _unused: [u8; 0],
}
pub type rdpNineGridCache = rdp_nine_grid_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_offscreen_cache {
    _unused: [u8; 0],
}
pub type rdpOffscreenCache = rdp_offscreen_cache;
pub type PALETTE_TABLE_ENTRY = _PALETTE_TABLE_ENTRY;
pub type rdpPaletteCache = rdp_palette_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PALETTE_TABLE_ENTRY {
    pub entry: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__PALETTE_TABLE_ENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_PALETTE_TABLE_ENTRY>(),
        8usize,
        concat!("Size of: ", stringify!(_PALETTE_TABLE_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_PALETTE_TABLE_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_PALETTE_TABLE_ENTRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PALETTE_TABLE_ENTRY>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PALETTE_TABLE_ENTRY),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_palette_cache {
    pub maxEntries: UINT32,
    pub entries: *mut PALETTE_TABLE_ENTRY,
    pub settings: *mut rdpSettings,
}
#[test]
fn bindgen_test_layout_rdp_palette_cache() {
    assert_eq!(
        ::std::mem::size_of::<rdp_palette_cache>(),
        24usize,
        concat!("Size of: ", stringify!(rdp_palette_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_palette_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_palette_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_palette_cache>())).maxEntries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_palette_cache),
            "::",
            stringify!(maxEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_palette_cache>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_palette_cache),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_palette_cache>())).settings as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_palette_cache),
            "::",
            stringify!(settings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_cache {
    pub glyph: *mut rdpGlyphCache,
    pub brush: *mut rdpBrushCache,
    pub pointer: *mut rdpPointerCache,
    pub bitmap: *mut rdpBitmapCache,
    pub offscreen: *mut rdpOffscreenCache,
    pub palette: *mut rdpPaletteCache,
    pub nine_grid: *mut rdpNineGridCache,
}
#[test]
fn bindgen_test_layout_rdp_cache() {
    assert_eq!(
        ::std::mem::size_of::<rdp_cache>(),
        56usize,
        concat!("Size of: ", stringify!(rdp_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).glyph as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).brush as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(brush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).pointer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).bitmap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).offscreen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(offscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).palette as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_cache>())).nine_grid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_cache),
            "::",
            stringify!(nine_grid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FREERDP_RGNDATA {
    pub boundingRect: RDP_RECT,
    pub nRectCount: UINT32,
    pub rects: *mut RDP_RECT,
}
#[test]
fn bindgen_test_layout__FREERDP_RGNDATA() {
    assert_eq!(
        ::std::mem::size_of::<_FREERDP_RGNDATA>(),
        24usize,
        concat!("Size of: ", stringify!(_FREERDP_RGNDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_FREERDP_RGNDATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_FREERDP_RGNDATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_RGNDATA>())).boundingRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_RGNDATA),
            "::",
            stringify!(boundingRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_RGNDATA>())).nRectCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_RGNDATA),
            "::",
            stringify!(nRectCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FREERDP_RGNDATA>())).rects as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FREERDP_RGNDATA),
            "::",
            stringify!(rects)
        )
    );
}
pub type FREERDP_RGNDATA = _FREERDP_RGNDATA;
#[doc = " Client Interface"]
pub type GeometryClientContext = _geometry_client_context;
pub type MAPPED_GEOMETRY = _MAPPED_GEOMETRY;
pub type pcMappedGeometryAdded = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut GeometryClientContext,
        geometry: *mut MAPPED_GEOMETRY,
    ) -> BOOL,
>;
pub type pcMappedGeometryUpdate =
    ::std::option::Option<unsafe extern "C" fn(geometry: *mut MAPPED_GEOMETRY) -> BOOL>;
pub type pcMappedGeometryClear =
    ::std::option::Option<unsafe extern "C" fn(geometry: *mut MAPPED_GEOMETRY) -> BOOL>;
#[doc = " @brief a geometry record tracked by the geometry channel"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MAPPED_GEOMETRY {
    pub refCounter: LONG,
    pub mappingId: UINT64,
    pub topLevelId: UINT64,
    pub left: INT32,
    pub top: INT32,
    pub right: INT32,
    pub bottom: INT32,
    pub topLevelLeft: INT32,
    pub topLevelTop: INT32,
    pub topLevelRight: INT32,
    pub topLevelBottom: INT32,
    pub geometry: FREERDP_RGNDATA,
    pub custom: *mut ::std::os::raw::c_void,
    pub MappedGeometryUpdate: pcMappedGeometryUpdate,
    pub MappedGeometryClear: pcMappedGeometryClear,
}
#[test]
fn bindgen_test_layout__MAPPED_GEOMETRY() {
    assert_eq!(
        ::std::mem::size_of::<_MAPPED_GEOMETRY>(),
        104usize,
        concat!("Size of: ", stringify!(_MAPPED_GEOMETRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_MAPPED_GEOMETRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_MAPPED_GEOMETRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).refCounter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(refCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).mappingId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(mappingId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).topLevelId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(topLevelId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).left as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).top as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).right as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).bottom as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).topLevelLeft as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(topLevelLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).topLevelTop as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(topLevelTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).topLevelRight as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(topLevelRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).topLevelBottom as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(topLevelBottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).geometry as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).custom as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).MappedGeometryUpdate as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(MappedGeometryUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_MAPPED_GEOMETRY>())).MappedGeometryClear as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_MAPPED_GEOMETRY),
            "::",
            stringify!(MappedGeometryClear)
        )
    );
}
#[doc = " @brief the geometry context for client channel"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _geometry_client_context {
    pub geometries: *mut wHashTable,
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub MappedGeometryAdded: pcMappedGeometryAdded,
}
#[test]
fn bindgen_test_layout__geometry_client_context() {
    assert_eq!(
        ::std::mem::size_of::<_geometry_client_context>(),
        32usize,
        concat!("Size of: ", stringify!(_geometry_client_context))
    );
    assert_eq!(
        ::std::mem::align_of::<_geometry_client_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_geometry_client_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_geometry_client_context>())).geometries as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_geometry_client_context),
            "::",
            stringify!(geometries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_geometry_client_context>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_geometry_client_context),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_geometry_client_context>())).custom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_geometry_client_context),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_geometry_client_context>())).MappedGeometryAdded as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_geometry_client_context),
            "::",
            stringify!(MappedGeometryAdded)
        )
    );
}
pub type VideoClientContext = _VideoClientContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VideoClientContextPriv {
    _unused: [u8; 0],
}
pub type VideoClientContextPriv = _VideoClientContextPriv;
pub type VideoSurface = _VideoSurface;
#[doc = " @brief an implementation of surface used by the video channel"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VideoSurface {
    pub x: UINT32,
    pub y: UINT32,
    pub w: UINT32,
    pub h: UINT32,
    pub data: *mut BYTE,
}
#[test]
fn bindgen_test_layout__VideoSurface() {
    assert_eq!(
        ::std::mem::size_of::<_VideoSurface>(),
        24usize,
        concat!("Size of: ", stringify!(_VideoSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<_VideoSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(_VideoSurface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoSurface>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoSurface),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoSurface>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoSurface),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoSurface>())).w as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoSurface),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoSurface>())).h as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoSurface),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoSurface>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoSurface),
            "::",
            stringify!(data)
        )
    );
}
pub type pcVideoTimer =
    ::std::option::Option<unsafe extern "C" fn(video: *mut VideoClientContext, now: UINT64)>;
pub type pcVideoSetGeometry = ::std::option::Option<
    unsafe extern "C" fn(video: *mut VideoClientContext, geometry: *mut GeometryClientContext),
>;
pub type pcVideoCreateSurface = ::std::option::Option<
    unsafe extern "C" fn(
        video: *mut VideoClientContext,
        data: *mut BYTE,
        x: UINT32,
        y: UINT32,
        width: UINT32,
        height: UINT32,
    ) -> *mut VideoSurface,
>;
pub type pcVideoShowSurface = ::std::option::Option<
    unsafe extern "C" fn(video: *mut VideoClientContext, surface: *mut VideoSurface) -> BOOL,
>;
pub type pcVideoDeleteSurface = ::std::option::Option<
    unsafe extern "C" fn(video: *mut VideoClientContext, surface: *mut VideoSurface) -> BOOL,
>;
#[doc = " @brief context for the video (MS-RDPEVOR) channel"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VideoClientContext {
    pub handle: *mut ::std::os::raw::c_void,
    pub custom: *mut ::std::os::raw::c_void,
    pub priv_: *mut VideoClientContextPriv,
    pub setGeometry: pcVideoSetGeometry,
    pub timer: pcVideoTimer,
    pub createSurface: pcVideoCreateSurface,
    pub showSurface: pcVideoShowSurface,
    pub deleteSurface: pcVideoDeleteSurface,
}
#[test]
fn bindgen_test_layout__VideoClientContext() {
    assert_eq!(
        ::std::mem::size_of::<_VideoClientContext>(),
        64usize,
        concat!("Size of: ", stringify!(_VideoClientContext))
    );
    assert_eq!(
        ::std::mem::align_of::<_VideoClientContext>(),
        8usize,
        concat!("Alignment of ", stringify!(_VideoClientContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoClientContext>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoClientContext>())).custom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoClientContext>())).priv_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoClientContext>())).setGeometry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(setGeometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoClientContext>())).timer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_VideoClientContext>())).createSurface as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(createSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_VideoClientContext>())).showSurface as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(showSurface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_VideoClientContext>())).deleteSurface as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_VideoClientContext),
            "::",
            stringify!(deleteSurface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDIOBJECT {
    pub objectType: BYTE,
}
#[test]
fn bindgen_test_layout__GDIOBJECT() {
    assert_eq!(
        ::std::mem::size_of::<_GDIOBJECT>(),
        1usize,
        concat!("Size of: ", stringify!(_GDIOBJECT))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDIOBJECT>(),
        1usize,
        concat!("Alignment of ", stringify!(_GDIOBJECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDIOBJECT>())).objectType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDIOBJECT),
            "::",
            stringify!(objectType)
        )
    );
}
pub type GDIOBJECT = _GDIOBJECT;
pub type HGDIOBJECT = *mut GDIOBJECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDI_RGN {
    pub objectType: BYTE,
    pub x: INT32,
    pub y: INT32,
    pub w: INT32,
    pub h: INT32,
    pub null: BOOL,
}
#[test]
fn bindgen_test_layout__GDI_RGN() {
    assert_eq!(
        ::std::mem::size_of::<_GDI_RGN>(),
        24usize,
        concat!("Size of: ", stringify!(_GDI_RGN))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDI_RGN>(),
        4usize,
        concat!("Alignment of ", stringify!(_GDI_RGN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_RGN>())).objectType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_RGN),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_RGN>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_RGN),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_RGN>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_RGN),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_RGN>())).w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_RGN),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_RGN>())).h as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_RGN),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_RGN>())).null as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_RGN),
            "::",
            stringify!(null)
        )
    );
}
pub type GDI_RGN = _GDI_RGN;
pub type HGDI_RGN = *mut GDI_RGN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDI_BITMAP {
    pub objectType: BYTE,
    pub format: UINT32,
    pub width: INT32,
    pub height: INT32,
    pub scanline: UINT32,
    pub data: *mut BYTE,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout__GDI_BITMAP() {
    assert_eq!(
        ::std::mem::size_of::<_GDI_BITMAP>(),
        40usize,
        concat!("Size of: ", stringify!(_GDI_BITMAP))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDI_BITMAP>(),
        8usize,
        concat!("Alignment of ", stringify!(_GDI_BITMAP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).objectType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).format as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).scanline as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BITMAP>())).free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BITMAP),
            "::",
            stringify!(free)
        )
    );
}
pub type GDI_BITMAP = _GDI_BITMAP;
pub type HGDI_BITMAP = *mut GDI_BITMAP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDI_PEN {
    pub objectType: BYTE,
    pub style: UINT32,
    pub width: INT32,
    pub posX: INT32,
    pub posY: INT32,
    pub color: UINT32,
    pub format: UINT32,
    pub palette: *const gdiPalette,
}
#[test]
fn bindgen_test_layout__GDI_PEN() {
    assert_eq!(
        ::std::mem::size_of::<_GDI_PEN>(),
        40usize,
        concat!("Size of: ", stringify!(_GDI_PEN))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDI_PEN>(),
        8usize,
        concat!("Alignment of ", stringify!(_GDI_PEN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).objectType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).style as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).posX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(posX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).posY as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(posY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).color as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_PEN>())).palette as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_PEN),
            "::",
            stringify!(palette)
        )
    );
}
pub type GDI_PEN = _GDI_PEN;
pub type HGDI_PEN = *mut GDI_PEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDI_BRUSH {
    pub objectType: BYTE,
    pub style: ::std::os::raw::c_int,
    pub pattern: HGDI_BITMAP,
    pub color: UINT32,
    pub nXOrg: INT32,
    pub nYOrg: INT32,
}
#[test]
fn bindgen_test_layout__GDI_BRUSH() {
    assert_eq!(
        ::std::mem::size_of::<_GDI_BRUSH>(),
        32usize,
        concat!("Size of: ", stringify!(_GDI_BRUSH))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDI_BRUSH>(),
        8usize,
        concat!("Alignment of ", stringify!(_GDI_BRUSH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BRUSH>())).objectType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BRUSH),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BRUSH>())).style as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BRUSH),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BRUSH>())).pattern as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BRUSH),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BRUSH>())).color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BRUSH),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BRUSH>())).nXOrg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BRUSH),
            "::",
            stringify!(nXOrg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_BRUSH>())).nYOrg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_BRUSH),
            "::",
            stringify!(nYOrg)
        )
    );
}
pub type GDI_BRUSH = _GDI_BRUSH;
pub type HGDI_BRUSH = *mut GDI_BRUSH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDI_WND {
    pub count: UINT32,
    pub ninvalid: INT32,
    pub invalid: HGDI_RGN,
    pub cinvalid: HGDI_RGN,
}
#[test]
fn bindgen_test_layout__GDI_WND() {
    assert_eq!(
        ::std::mem::size_of::<_GDI_WND>(),
        24usize,
        concat!("Size of: ", stringify!(_GDI_WND))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDI_WND>(),
        8usize,
        concat!("Alignment of ", stringify!(_GDI_WND))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_WND>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_WND),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_WND>())).ninvalid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_WND),
            "::",
            stringify!(ninvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_WND>())).invalid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_WND),
            "::",
            stringify!(invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_WND>())).cinvalid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_WND),
            "::",
            stringify!(cinvalid)
        )
    );
}
pub type GDI_WND = _GDI_WND;
pub type HGDI_WND = *mut GDI_WND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDI_DC {
    pub selectedObject: HGDIOBJECT,
    pub format: UINT32,
    pub bkColor: UINT32,
    pub textColor: UINT32,
    pub brush: HGDI_BRUSH,
    pub clip: HGDI_RGN,
    pub pen: HGDI_PEN,
    pub hwnd: HGDI_WND,
    pub drawMode: INT32,
    pub bkMode: INT32,
}
#[test]
fn bindgen_test_layout__GDI_DC() {
    assert_eq!(
        ::std::mem::size_of::<_GDI_DC>(),
        64usize,
        concat!("Size of: ", stringify!(_GDI_DC))
    );
    assert_eq!(
        ::std::mem::align_of::<_GDI_DC>(),
        8usize,
        concat!("Alignment of ", stringify!(_GDI_DC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).selectedObject as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(selectedObject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).bkColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(bkColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).textColor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(textColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).brush as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(brush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).clip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).pen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(pen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).hwnd as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).drawMode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(drawMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GDI_DC>())).bkMode as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_GDI_DC),
            "::",
            stringify!(bkMode)
        )
    );
}
pub type GDI_DC = _GDI_DC;
pub type HGDI_DC = *mut GDI_DC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gdi_bitmap {
    pub _p: rdpBitmap,
    pub hdc: HGDI_DC,
    pub bitmap: HGDI_BITMAP,
    pub org_bitmap: HGDI_BITMAP,
}
#[test]
fn bindgen_test_layout_gdi_bitmap() {
    assert_eq!(
        ::std::mem::size_of::<gdi_bitmap>(),
        312usize,
        concat!("Size of: ", stringify!(gdi_bitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<gdi_bitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(gdi_bitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gdi_bitmap>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gdi_bitmap),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gdi_bitmap>())).hdc as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(gdi_bitmap),
            "::",
            stringify!(hdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gdi_bitmap>())).bitmap as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(gdi_bitmap),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gdi_bitmap>())).org_bitmap as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(gdi_bitmap),
            "::",
            stringify!(org_bitmap)
        )
    );
}
pub type gdiBitmap = gdi_bitmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdp_gdi {
    pub context: *mut rdpContext,
    pub width: INT32,
    pub height: INT32,
    pub stride: UINT32,
    pub dstFormat: UINT32,
    pub cursor_x: UINT32,
    pub cursor_y: UINT32,
    pub hdc: HGDI_DC,
    pub primary: *mut gdiBitmap,
    pub drawing: *mut gdiBitmap,
    pub bitmap_size: UINT32,
    pub bitmap_stride: UINT32,
    pub primary_buffer: *mut BYTE,
    pub palette: gdiPalette,
    pub image: *mut gdiBitmap,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub inGfxFrame: BOOL,
    pub graphicsReset: BOOL,
    pub suppressOutput: BOOL,
    pub outputSurfaceId: UINT16,
    pub gfx: *mut RdpgfxClientContext,
    pub video: *mut VideoClientContext,
    pub geometry: *mut GeometryClientContext,
    pub log: *mut wLog,
    pub frameId: UINT32,
}
#[test]
fn bindgen_test_layout_rdp_gdi() {
    assert_eq!(
        ::std::mem::size_of::<rdp_gdi>(),
        1176usize,
        concat!("Size of: ", stringify!(rdp_gdi))
    );
    assert_eq!(
        ::std::mem::align_of::<rdp_gdi>(),
        8usize,
        concat!("Alignment of ", stringify!(rdp_gdi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).stride as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).dstFormat as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(dstFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).cursor_x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(cursor_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).cursor_y as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(cursor_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).hdc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(hdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).primary as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(primary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).drawing as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(drawing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).bitmap_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(bitmap_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).bitmap_stride as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(bitmap_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).primary_buffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(primary_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).palette as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).image as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).free as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).inGfxFrame as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(inGfxFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).graphicsReset as *const _ as usize },
        1124usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(graphicsReset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).suppressOutput as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(suppressOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).outputSurfaceId as *const _ as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(outputSurfaceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).gfx as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(gfx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).video as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(video)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).geometry as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).log as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rdp_gdi>())).frameId as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(rdp_gdi),
            "::",
            stringify!(frameId)
        )
    );
}
extern "C" {
    pub fn gdi_rop3_code(code: BYTE) -> DWORD;
}
extern "C" {
    pub fn gdi_rop3_code_string(code: BYTE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gdi_rop3_string(rop: DWORD) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gdi_get_pixel_format(bitsPerPixel: UINT32) -> UINT32;
}
extern "C" {
    pub fn gdi_decode_color(
        gdi: *mut rdpGdi,
        srcColor: UINT32,
        color: *mut UINT32,
        format: *mut UINT32,
    ) -> BOOL;
}
extern "C" {
    pub fn gdi_resize(gdi: *mut rdpGdi, width: UINT32, height: UINT32) -> BOOL;
}
extern "C" {
    pub fn gdi_resize_ex(
        gdi: *mut rdpGdi,
        width: UINT32,
        height: UINT32,
        stride: UINT32,
        format: UINT32,
        buffer: *mut BYTE,
        pfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> BOOL;
}
extern "C" {
    pub fn gdi_init(instance: *mut freerdp, format: UINT32) -> BOOL;
}
extern "C" {
    pub fn gdi_init_ex(
        instance: *mut freerdp,
        format: UINT32,
        stride: UINT32,
        buffer: *mut BYTE,
        pfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> BOOL;
}
extern "C" {
    pub fn gdi_free(instance: *mut freerdp);
}
extern "C" {
    pub fn gdi_send_suppress_output(gdi: *mut rdpGdi, suppress: BOOL) -> BOOL;
}
extern "C" {
    pub fn gdi_graphics_pipeline_init(gdi: *mut rdpGdi, gfx: *mut RdpgfxClientContext) -> BOOL;
}
extern "C" {
    pub fn gdi_graphics_pipeline_init_ex(
        gdi: *mut rdpGdi,
        gfx: *mut RdpgfxClientContext,
        map: pcRdpgfxMapWindowForSurface,
        unmap: pcRdpgfxUnmapWindowForSurface,
        update: pcRdpgfxUpdateSurfaceArea,
    ) -> BOOL;
}
extern "C" {
    pub fn gdi_graphics_pipeline_uninit(gdi: *mut rdpGdi, gfx: *mut RdpgfxClientContext);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _gdiVideoContext {
    _unused: [u8; 0],
}
pub type gdiVideoContext = _gdiVideoContext;
extern "C" {
    pub fn gdi_video_geometry_init(gdi: *mut rdpGdi, geom: *mut GeometryClientContext);
}
extern "C" {
    pub fn gdi_video_geometry_uninit(gdi: *mut rdpGdi, geom: *mut GeometryClientContext);
}
extern "C" {
    pub fn gdi_video_control_init(gdi: *mut rdpGdi, video: *mut VideoClientContext);
}
extern "C" {
    pub fn gdi_video_control_uninit(gdi: *mut rdpGdi, video: *mut VideoClientContext);
}
extern "C" {
    pub fn gdi_video_data_init(gdi: *mut rdpGdi, video: *mut VideoClientContext);
}
extern "C" {
    pub fn gdi_video_data_uninit(gdi: *mut rdpGdi, context: *mut VideoClientContext);
}
extern "C" {
    pub fn gdi_video_new(gdi: *mut rdpGdi) -> *mut gdiVideoContext;
}
extern "C" {
    pub fn gdi_video_free(context: *mut gdiVideoContext);
}
pub type COMMAND_LINE_ARGUMENT_A = _COMMAND_LINE_ARGUMENT_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMMAND_LINE_ARGUMENT_A {
    pub Name: LPCSTR,
    pub Flags: DWORD,
    pub Format: LPCSTR,
    pub Default: LPCSTR,
    pub Value: LPSTR,
    pub Index: LONG,
    pub Alias: LPCSTR,
    pub Text: LPCSTR,
}
#[test]
fn bindgen_test_layout__COMMAND_LINE_ARGUMENT_A() {
    assert_eq!(
        ::std::mem::size_of::<_COMMAND_LINE_ARGUMENT_A>(),
        64usize,
        concat!("Size of: ", stringify!(_COMMAND_LINE_ARGUMENT_A))
    );
    assert_eq!(
        ::std::mem::align_of::<_COMMAND_LINE_ARGUMENT_A>(),
        8usize,
        concat!("Alignment of ", stringify!(_COMMAND_LINE_ARGUMENT_A))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Default as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Index as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Alias as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_COMMAND_LINE_ARGUMENT_A>())).Text as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_COMMAND_LINE_ARGUMENT_A),
            "::",
            stringify!(Text)
        )
    );
}
extern "C" {
    pub fn freerdp_client_settings_parse_command_line_arguments(
        settings: *mut rdpSettings,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        allowUnknown: BOOL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_settings_command_line_status_print(
        settings: *mut rdpSettings,
        status: ::std::os::raw::c_int,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_settings_command_line_status_print_ex(
        settings: *mut rdpSettings,
        status: ::std::os::raw::c_int,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        custom: *mut COMMAND_LINE_ARGUMENT_A,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freerdp_client_load_addins(
        channels: *mut rdpChannels,
        settings: *mut rdpSettings,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_client_print_version() -> BOOL;
}
extern "C" {
    pub fn freerdp_client_print_buildconfig() -> BOOL;
}
extern "C" {
    pub fn freerdp_client_print_command_line_help(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_client_print_command_line_help_ex(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        custom: *mut COMMAND_LINE_ARGUMENT_A,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_parse_username(
        username: *const ::std::os::raw::c_char,
        user: *mut *mut ::std::os::raw::c_char,
        domain: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_parse_hostname(
        hostname: *const ::std::os::raw::c_char,
        host: *mut *mut ::std::os::raw::c_char,
        port: *mut ::std::os::raw::c_int,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_set_connection_type(settings: *mut rdpSettings, type_: UINT32) -> BOOL;
}
extern "C" {
    pub fn freerdp_client_add_device_channel(
        settings: *mut rdpSettings,
        count: size_t,
        params: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_client_add_static_channel(
        settings: *mut rdpSettings,
        count: size_t,
        params: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn freerdp_client_add_dynamic_channel(
        settings: *mut rdpSettings,
        count: size_t,
        params: *mut *mut ::std::os::raw::c_char,
    ) -> BOOL;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
